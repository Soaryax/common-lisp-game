;; Generated by :claw at 2023-05-17T16:07:58.904327Z
(uiop:define-package :claylib/wrap (:use))
(uiop:define-package :claylib/wrap~pristine (:use :cl))
(common-lisp:in-package :claylib/wrap~pristine)

(defparameter claylib/wrap::+auto-cursor-cooldown+ 40)

(defparameter claylib/wrap::+auto-cursor-delay+ 1)

(defparameter claylib/wrap::+big-endian+ nil)

(defparameter claylib/wrap::+bufsiz+ 8192)

(defparameter claylib/wrap::+byte-order+ nil)

(defparameter claylib/wrap::+camera-cull-distance-far+ nil)

(defparameter claylib/wrap::+camera-cull-distance-near+ nil)

(defparameter claylib/wrap::+deg2rad+ 0.01745329238474369D0)

(defparameter claylib/wrap::+eof+ -1)

(defparameter claylib/wrap::+epsilon+ 9.999999974752427D-7)

(defparameter claylib/wrap::+exit-failure+ 1)

(defparameter claylib/wrap::+exit-success+ 0)

(defparameter claylib/wrap::+fd-setsize+ nil)

(defparameter claylib/wrap::+filename-max+ 4096)

(defparameter claylib/wrap::+fopen-max+ 16)

(defparameter claylib/wrap::+fp-ilogb0+ -2147483648)

(defparameter claylib/wrap::+fp-ilogbnan+ -2147483648)

(defparameter claylib/wrap::+fp-infinite+ 1)

(defparameter claylib/wrap::+fp-nan+ 0)

(defparameter claylib/wrap::+fp-normal+ 4)

(defparameter claylib/wrap::+fp-subnormal+ 3)

(defparameter claylib/wrap::+fp-zero+ 2)

(defparameter claylib/wrap::+huge-val+ :short-float-positive-infinity)

(defparameter claylib/wrap::+huge-valf+ :short-float-positive-infinity)

(defparameter claylib/wrap::+huge-vall+ :short-float-positive-infinity)

(defparameter claylib/wrap::+icon-text-padding+ 4)

(defparameter claylib/wrap::+infinity+ :short-float-positive-infinity)

(defparameter claylib/wrap::+little-endian+ nil)

(defparameter claylib/wrap::+l-ctermid+ nil)

(defparameter claylib/wrap::+l-tmpnam+ 20)

(defparameter claylib/wrap::+material-map-diffuse+ 0)

(defparameter claylib/wrap::+material-map-specular+ 1)

(defparameter claylib/wrap::+math-errexcept+ 2)

(defparameter claylib/wrap::+math-errno+ 1)

(defparameter claylib/wrap::+max-line-buffer-size+ 256)

(defparameter claylib/wrap::+mb-cur-max+ nil)

(defparameter claylib/wrap::+mouse-left-button+ 0)

(defparameter claylib/wrap::+mouse-middle-button+ 2)

(defparameter claylib/wrap::+mouse-right-button+ 1)

(defparameter claylib/wrap::+m-1-pi+ nil)

(defparameter claylib/wrap::+m-2-pi+ nil)

(defparameter claylib/wrap::+m-2-sqrtpi+ nil)

(defparameter claylib/wrap::+m-e+ nil)

(defparameter claylib/wrap::+m-ln10+ nil)

(defparameter claylib/wrap::+m-ln2+ nil)

(defparameter claylib/wrap::+m-log10e+ nil)

(defparameter claylib/wrap::+m-log2e+ nil)

(defparameter claylib/wrap::+m-pi+ nil)

(defparameter claylib/wrap::+m-pi-2+ nil)

(defparameter claylib/wrap::+m-pi-4+ nil)

(defparameter claylib/wrap::+m-sqrt1-2+ nil)

(defparameter claylib/wrap::+m-sqrt2+ nil)

(defparameter claylib/wrap::+nan+ :double-nan)

(defparameter claylib/wrap::+nfdbits+ nil)

(defparameter claylib/wrap::+null+ 0)

(defparameter claylib/wrap::+pdp-endian+ nil)

(defparameter claylib/wrap::+pi+ 3.1415927410125732D0)

(defparameter claylib/wrap::+p-tmpdir+ nil)

(defparameter claylib/wrap::+rad2deg+ 57.2957763671875D0)

(defparameter claylib/wrap::+rand-max+ 2147483647)

(defparameter claylib/wrap::+rayguiapi+ nil)

(defparameter claylib/wrap::+raygui-colorbaralpha-checked-size+ 10)

(defparameter claylib/wrap::+raygui-grid-alpha+ 0.15000000596046448D0)

(defparameter claylib/wrap::+raygui-groupbox-line-thick+ 1)

(defparameter claylib/wrap::+raygui-h+ nil)

(defparameter claylib/wrap::+raygui-icon-data-elements+ 8)

(defparameter claylib/wrap::+raygui-icon-max-icons+ 256)

(defparameter claylib/wrap::+raygui-icon-max-name-length+ 32)

(defparameter claylib/wrap::+raygui-icon-size+ 16)

(defparameter claylib/wrap::+raygui-implementation+ 1)

(defparameter claylib/wrap::+raygui-line-margin-text+ 12)

(defparameter claylib/wrap::+raygui-line-text-padding+ 4)

(defparameter claylib/wrap::+raygui-max-controls+ 16)

(defparameter claylib/wrap::+raygui-max-props-base+ 16)

(defparameter claylib/wrap::+raygui-max-props-extended+ 8)

(defparameter claylib/wrap::+raygui-max-text-lines+ 128)

(defparameter claylib/wrap::+raygui-messagebox-button-height+ 24)

(defparameter claylib/wrap::+raygui-messagebox-button-padding+ 12)

(defparameter claylib/wrap::+raygui-panel-border-width+ 1)

(defparameter claylib/wrap::+raygui-support-log-info+ nil)

(defparameter claylib/wrap::+raygui-tabbar-item-width+ 160)

(defparameter claylib/wrap::+raygui-textinputbox-button-height+ 24)

(defparameter claylib/wrap::+raygui-textinputbox-button-padding+ 12)

(defparameter claylib/wrap::+raygui-textinputbox-height+ 26)

(defparameter claylib/wrap::+raygui-textsplit-max-items+ 128)

(defparameter claylib/wrap::+raygui-textsplit-max-text-size+ 1024)

(defparameter claylib/wrap::+raygui-togglegroup-max-items+ 32)

(defparameter claylib/wrap::+raygui-valuebox-max-chars+ 32)

(defparameter claylib/wrap::+raygui-version+ "3.6")

(defparameter claylib/wrap::+raygui-version-major+ 3)

(defparameter claylib/wrap::+raygui-version-minor+ 6)

(defparameter claylib/wrap::+raygui-version-patch+ 0)

(defparameter claylib/wrap::+raygui-windowbox-statusbar-height+ 24)

(defparameter claylib/wrap::+raylib-h+ nil)

(defparameter claylib/wrap::+raylib-version+ "4.5")

(defparameter claylib/wrap::+raylib-version-major+ 4)

(defparameter claylib/wrap::+raylib-version-minor+ 5)

(defparameter claylib/wrap::+raylib-version-patch+ 0)

(defparameter claylib/wrap::+raymath-h+ nil)

(defparameter claylib/wrap::+rcamera-h+ nil)

(defparameter claylib/wrap::+rlapi+ nil)

(defparameter claylib/wrap::+rl-color-type+ nil)

(defparameter claylib/wrap::+rl-matrix-type+ nil)

(defparameter claylib/wrap::+rl-quaternion-type+ nil)

(defparameter claylib/wrap::+rl-rectangle-type+ nil)

(defparameter claylib/wrap::+rl-vector2-type+ nil)

(defparameter claylib/wrap::+rl-vector3-type+ nil)

(defparameter claylib/wrap::+rl-vector4-type+ nil)

(defparameter claylib/wrap::+rmapi+ nil)

(defparameter claylib/wrap::+scrollbar-left-side+ 0)

(defparameter claylib/wrap::+scrollbar-right-side+ 1)

(defparameter claylib/wrap::+seek-cur+ 1)

(defparameter claylib/wrap::+seek-end+ 2)

(defparameter claylib/wrap::+seek-set+ 0)

(defparameter claylib/wrap::+shader-loc-map-diffuse+ 15)

(defparameter claylib/wrap::+shader-loc-map-specular+ 16)

(defparameter claylib/wrap::+tmp-max+ 238328)

(defparameter claylib/wrap::+wcontinued+ nil)

(defparameter claylib/wrap::+wexited+ nil)

(defparameter claylib/wrap::+wnohang+ nil)

(defparameter claylib/wrap::+wnowait+ nil)

(defparameter claylib/wrap::+wstopped+ nil)

(defparameter claylib/wrap::+wuntraced+ nil)

(defparameter claylib/wrap::+%alloca-h+ nil)

(defparameter claylib/wrap::+%atfile-source+ nil)

(defparameter claylib/wrap::+%bits-atomic-wide-counter-h+ nil)

(defparameter claylib/wrap::+%bits-byteswap-h+ nil)

(defparameter claylib/wrap::+%bits-endianness-h+ nil)

(defparameter claylib/wrap::+%bits-endian-h+ nil)

(defparameter claylib/wrap::+%bits-floatn-common-h+ nil)

(defparameter claylib/wrap::+%bits-floatn-h+ nil)

(defparameter claylib/wrap::+%bits-libm-simd-decl-stubs-h+ 1)

(defparameter claylib/wrap::+%bits-pthreadtypes-arch-h+ nil)

(defparameter claylib/wrap::+%bits-pthreadtypes-common-h+ nil)

(defparameter claylib/wrap::+%bits-stdint-intn-h+ nil)

(defparameter claylib/wrap::+%bits-stdio-lim-h+ 1)

(defparameter claylib/wrap::+%bits-time64-h+ 1)

(defparameter claylib/wrap::+%bits-typesizes-h+ 1)

(defparameter claylib/wrap::+%bits-types-h+ 1)

(defparameter claylib/wrap::+%bits-types-locale-t-h+ nil)

(defparameter claylib/wrap::+%bits-types---locale-t-h+ nil)

(defparameter claylib/wrap::+%bits-uintn-identity-h+ nil)

(defparameter claylib/wrap::+%default-source+ nil)

(defparameter claylib/wrap::+%endian-h+ nil)

(defparameter claylib/wrap::+%features-h+ 1)

(defparameter claylib/wrap::+%ilp32+ 1)

(defparameter claylib/wrap::+%iofbf+ 0)

(defparameter claylib/wrap::+%iolbf+ 1)

(defparameter claylib/wrap::+%ionbf+ 2)

(defparameter claylib/wrap::+%io-eof-seen+ 16)

(defparameter claylib/wrap::+%io-err-seen+ 32)

(defparameter claylib/wrap::+%io-user-lock+ 32768)

(defparameter claylib/wrap::+%math-h+ 1)

(defparameter claylib/wrap::+%mdouble+ nil)

(defparameter claylib/wrap::+%posix-c-source+ nil)

(defparameter claylib/wrap::+%posix-source+ nil)

(defparameter claylib/wrap::+%rwlock-internal-h+ nil)

(defparameter claylib/wrap::+%sigset-nwords+ nil)

(defparameter claylib/wrap::+%size-t+ nil)

(defparameter claylib/wrap::+%stdio-h+ 1)

(defparameter claylib/wrap::+%stdlib-h+ 1)

(defparameter claylib/wrap::+%strings-h+ nil)

(defparameter claylib/wrap::+%string-h+ 1)

(defparameter claylib/wrap::+%struct-timespec+ nil)

(defparameter claylib/wrap::+%sys-cdefs-h+ 1)

(defparameter claylib/wrap::+%sys-select-h+ nil)

(defparameter claylib/wrap::+%sys-types-h+ nil)

(defparameter claylib/wrap::+%thread-mutex-internal-h+ nil)

(defparameter claylib/wrap::+%va-list+ nil)

(defparameter claylib/wrap::+%va-list-defined+ nil)

(defparameter claylib/wrap::+%wchar-t+ nil)

(defparameter claylib/wrap::+bool+ nil)

(defparameter claylib/wrap::+false+ 0)

(defparameter claylib/wrap::+i386+ nil)

(defparameter claylib/wrap::+math-errhandling+ 3)

(defparameter claylib/wrap::+stderr+ nil)

(defparameter claylib/wrap::+stdin+ nil)

(defparameter claylib/wrap::+stdout+ nil)

(defparameter claylib/wrap::+true+ 1)

(cffi:defcenum (claylib/wrap::|C:@EA@BLEND-MODE| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:856:9"
               (:alpha 0)
               (:additive 1)
               (:multiplied 2)
               (:add-colors 3)
               (:subtract-colors 4)
               (:alpha-premultiply 5)
               (:custom 6)
               (:custom-separate 7))

(cffi:defcenum (claylib/wrap::|C:@EA@CAMERA-MODE| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:884:9"
               (:custom 0)
               (:free 1)
               (:orbital 2)
               (:first-person 3)
               (:third-person 4))

(cffi:defcenum (claylib/wrap::|C:@EA@CAMERA-PROJECTION|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:893:9"
               (:perspective 0)
               (:orthographic 1))

(cffi:defbitfield (claylib/wrap::|C:@EA@CONFIG-FLAGS| :unsigned-int)
                  "/home/me/claylib/wrap/lib/raylib.h:506:9"
                  (:vsync-hint 64)
                  (:fullscreen-mode 2)
                  (:window-resizable 4)
                  (:window-undecorated 8)
                  (:window-hidden 128)
                  (:window-minimized 512)
                  (:window-maximized 1024)
                  (:window-unfocused 2048)
                  (:window-topmost 4096)
                  (:window-always-run 256)
                  (:window-transparent 16)
                  (:window-highdpi 8192)
                  (:window-mouse-passthrough 16384)
                  (:msaa-4x-hint 32)
                  (:interlaced-hint 65536))

(cffi:defcenum (claylib/wrap::|C:@EA@CUBEMAP-LAYOUT| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:839:9"
               (:auto-detect 0)
               (:line-vertical 1)
               (:line-horizontal 2)
               (:cross-three-by-four 3)
               (:cross-four-by-three 4)
               (:panorama 5))

(cffi:defcenum (claylib/wrap::|C:@EA@FONT-TYPE| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:849:9"
               (:default 0)
               (:bitmap 1)
               (:sdf 2))

(cffi:defcenum (claylib/wrap::|C:@EA@GAMEPAD-AXIS| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:711:9"
               (:left-x 0)
               (:left-y 1)
               (:right-x 2)
               (:right-y 3)
               (:left-trigger 4)
               (:right-trigger 5))

(cffi:defcenum (claylib/wrap::|C:@EA@GAMEPAD-BUTTON| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:689:9"
               (:unknown 0)
               (:left-face-up 1)
               (:left-face-right 2)
               (:left-face-down 3)
               (:left-face-left 4)
               (:right-face-up 5)
               (:right-face-right 6)
               (:right-face-down 7)
               (:right-face-left 8)
               (:left-trigger-1 9)
               (:left-trigger-2 10)
               (:right-trigger-1 11)
               (:right-trigger-2 12)
               (:middle-left 13)
               (:middle 14)
               (:middle-right 15)
               (:left-thumb 16)
               (:right-thumb 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GESTURE| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:869:9"
               (:none 0)
               (:tap 1)
               (:doubletap 2)
               (:hold 4)
               (:drag 8)
               (:swipe-right 16)
               (:swipe-left 32)
               (:swipe-up 64)
               (:swipe-down 128)
               (:pinch-in 256)
               (:pinch-out 512))

(cffi:defbitfield (claylib/wrap::|C:@EA@GUI-CHECK-BOX-PROPERTY|
                   :unsigned-int)
                  "/home/me/claylib/wrap/lib/raygui.h:487:9"
                  (:check-padding 16))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-COLOR-PICKER-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:527:9"
               (:color-selector-size 16)
               (:huebar-width 17)
               (:huebar-padding 18)
               (:huebar-selector-height 19)
               (:huebar-selector-overflow 20))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-COMBO-BOX-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:492:9"
               (:width 16)
               (:spacing 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-CONTROL| :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:399:9"
               (:default 0)
               (:label 1)
               (:button 2)
               (:toggle 3)
               (:slider 4)
               (:progressbar 5)
               (:checkbox 6)
               (:combobox 7)
               (:dropdownbox 8)
               (:textbox 9)
               (:valuebox 10)
               (:spinner 11)
               (:listview 12)
               (:colorpicker 13)
               (:scrollbar 14)
               (:statusbar 15))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-CONTROL-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:422:9"
               (:border-color-normal 0)
               (:base-color-normal 1)
               (:text-color-normal 2)
               (:border-color-focused 3)
               (:base-color-focused 4)
               (:text-color-focused 5)
               (:border-color-pressed 6)
               (:base-color-pressed 7)
               (:text-color-pressed 8)
               (:border-color-disabled 9)
               (:base-color-disabled 10)
               (:text-color-disabled 11)
               (:border-width 12)
               (:text-padding 13)
               (:text-alignment 14)
               (:reserved 15))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-DEFAULT-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:447:9"
               (:text-size 16)
               (:text-spacing 17)
               (:line-color 18)
               (:background-color 19))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-DROPDOWN-BOX-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:498:9"
               (:arrow-padding 16)
               (:dropdown-items-spacing 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-ICON-NAME| :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:628:9"
               (:none 0)
               (:folder-file-open 1)
               (:file-save-classic 2)
               (:folder-open 3)
               (:folder-save 4)
               (:file-open 5)
               (:file-save 6)
               (:file-export 7)
               (:file-add 8)
               (:file-delete 9)
               (:filetype-text 10)
               (:filetype-audio 11)
               (:filetype-image 12)
               (:filetype-play 13)
               (:filetype-video 14)
               (:filetype-info 15)
               (:file-copy 16)
               (:file-cut 17)
               (:file-paste 18)
               (:cursor-hand 19)
               (:cursor-pointer 20)
               (:cursor-classic 21)
               (:pencil 22)
               (:pencil-big 23)
               (:brush-classic 24)
               (:brush-painter 25)
               (:water-drop 26)
               (:color-picker 27)
               (:rubber 28)
               (:color-bucket 29)
               (:text-t 30)
               (:text-a 31)
               (:scale 32)
               (:resize 33)
               (:filter-point 34)
               (:filter-bilinear 35)
               (:crop 36)
               (:crop-alpha 37)
               (:square-toggle 38)
               (:symmetry 39)
               (:symmetry-horizontal 40)
               (:symmetry-vertical 41)
               (:lens 42)
               (:lens-big 43)
               (:eye-on 44)
               (:eye-off 45)
               (:filter-top 46)
               (:filter 47)
               (:target-point 48)
               (:target-small 49)
               (:target-big 50)
               (:target-move 51)
               (:cursor-move 52)
               (:cursor-scale 53)
               (:cursor-scale-right 54)
               (:cursor-scale-left 55)
               (:undo 56)
               (:mutate 59)
               (:rotate 60)
               (:repeat 61)
               (:shuffle 62)
               (:emptybox 63)
               (:target 64)
               (:target-small-fill 65)
               (:target-big-fill 66)
               (:target-move-fill 67)
               (:cursor-move-fill 68)
               (:cursor-scale-fill 69)
               (:cursor-scale-right-fill 70)
               (:cursor-scale-left-fill 71)
               (:undo-fill 72)
               (:mutate-fill 75)
               (:rotate-fill 76)
               (:repeat-fill 77)
               (:shuffle-fill 78)
               (:emptybox-small 79)
               (:box 80)
               (:box-top 81)
               (:box-top-right 82)
               (:box-right 83)
               (:box-bottom-right 84)
               (:box-bottom 85)
               (:box-bottom-left 86)
               (:box-left 87)
               (:box-top-left 88)
               (:box-center 89)
               (:box-circle-mask 90)
               (:pot 91)
               (:alpha-multiply 92)
               (:alpha-clear 93)
               (:dithering 94)
               (:mipmaps 95)
               (:box-grid 96)
               (:grid 97)
               (:box-corners-small 98)
               (:box-corners-big 99)
               (:four-boxes 100)
               (:grid-fill 101)
               (:box-multisize 102)
               (:zoom-small 103)
               (:zoom-medium 104)
               (:zoom-big 105)
               (:zoom-all 106)
               (:zoom-center 107)
               (:box-dots-small 108)
               (:box-dots-big 109)
               (:box-concentric 110)
               (:box-grid-big 111)
               (:ok-tick 112)
               (:cross 113)
               (:arrow-left 114)
               (:arrow-right 115)
               (:arrow-down 116)
               (:arrow-up 117)
               (:arrow-left-fill 118)
               (:arrow-right-fill 119)
               (:arrow-down-fill 120)
               (:arrow-up-fill 121)
               (:audio 122)
               (:fx 123)
               (:wave 124)
               (:wave-sinus 125)
               (:wave-square 126)
               (:wave-triangular 127)
               (:cross-small 128)
               (:player-previous 129)
               (:player-play-back 130)
               (:player-play 131)
               (:player-pause 132)
               (:player-stop 133)
               (:player-next 134)
               (:player-record 135)
               (:magnet 136)
               (:lock-close 137)
               (:lock-open 138)
               (:clock 139)
               (:tools 140)
               (:gear 141)
               (:gear-big 142)
               (:bin 143)
               (:hand-pointer 144)
               (:laser 145)
               (:coin 146)
               (:explosion 147)
               (:1up 148)
               (:player 149)
               (:player-jump 150)
               (:key 151)
               (:demon 152)
               (:text-popup 153)
               (:gear-ex 154)
               (:crack 155)
               (:crack-points 156)
               (:star 157)
               (:door 158)
               (:exit 159)
               (:mode-2d 160)
               (:mode-3d 161)
               (:cube 162)
               (:cube-face-top 163)
               (:cube-face-left 164)
               (:cube-face-front 165)
               (:cube-face-bottom 166)
               (:cube-face-right 167)
               (:cube-face-back 168)
               (:camera 169)
               (:special 170)
               (:link-net 171)
               (:link-boxes 172)
               (:link-multi 173)
               (:link 174)
               (:link-broke 175)
               (:text-notes 176)
               (:notebook 177)
               (:suitcase 178)
               (:suitcase-zip 179)
               (:mailbox 180)
               (:monitor 181)
               (:printer 182)
               (:photo-camera 183)
               (:photo-camera-flash 184)
               (:house 185)
               (:heart 186)
               (:corner 187)
               (:vertical-bars 188)
               (:vertical-bars-fill 189)
               (:life-bars 190)
               (:info 191)
               (:crossline 192)
               (:help 193)
               (:filetype-alpha 194)
               (:filetype-home 195)
               (:layers-visible 196)
               (:layers 197)
               (:window 198)
               (:hidpi 199)
               (:filetype-binary 200)
               (:hex 201)
               (:shield 202)
               (:file-new 203)
               (:folder-add 204)
               (:alarm 205)
               (:cpu 206)
               (:rom 207)
               (:step-over 208)
               (:step-into 209)
               (:step-out 210)
               (:restart 211)
               (:breakpoint-on 212)
               (:breakpoint-off 213)
               (:burger-menu 214)
               (:case-sensitive 215)
               (:reg-exp 216)
               (:folder 217)
               (:file 218)
               (:sand-timer 219)
               (:|220| 220)
               (:|221| 221)
               (:|222| 222)
               (:|223| 223)
               (:|224| 224)
               (:|225| 225)
               (:|226| 226)
               (:|227| 227)
               (:|228| 228)
               (:|229| 229)
               (:|230| 230)
               (:|231| 231)
               (:|232| 232)
               (:|233| 233)
               (:|234| 234)
               (:|235| 235)
               (:|236| 236)
               (:|237| 237)
               (:|238| 238)
               (:|239| 239)
               (:|240| 240)
               (:|241| 241)
               (:|242| 242)
               (:|243| 243)
               (:|244| 244)
               (:|245| 245)
               (:|246| 246)
               (:|247| 247)
               (:|248| 248)
               (:|249| 249)
               (:|250| 250)
               (:|251| 251)
               (:|252| 252)
               (:|253| 253)
               (:|254| 254)
               (:|255| 255))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-LIST-VIEW-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:519:9"
               (:list-items-height 16)
               (:list-items-spacing 17)
               (:scrollbar-width 18)
               (:scrollbar-side 19))

(cffi:defbitfield (claylib/wrap::|C:@EA@GUI-PROGRESS-BAR-PROPERTY|
                   :unsigned-int)
                  "/home/me/claylib/wrap/lib/raygui.h:472:9"
                  (:progress-padding 16))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-PROPERTY-ELEMENT|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:1222:9"
               (:border 0)
               (:base 1)
               (:text 2)
               (:other 3))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-SCROLL-BAR-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:477:9"
               (:arrows-size 16)
               (:arrows-visible 17)
               (:scroll-slider-padding 18)
               (:scroll-slider-size 19)
               (:scroll-padding 20)
               (:scroll-speed 21))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-SLIDER-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:466:9"
               (:width 16)
               (:padding 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-SPINNER-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:513:9"
               (:width 16)
               (:spacing 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-STATE| :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:384:9"
               (:normal 0)
               (:focused 1)
               (:pressed 2)
               (:disabled 3))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-TEXT-ALIGNMENT|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:392:9"
               (:left 0)
               (:center 1)
               (:right 2))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-TEXT-BOX-PROPERTY|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raygui.h:504:9"
               (:inner-padding 16)
               (:lines-spacing 17)
               (:alignment-vertical 18)
               (:multiline 19)
               (:wrap-mode 20))

(cffi:defbitfield (claylib/wrap::|C:@EA@GUI-TOGGLE-PROPERTY|
                   :unsigned-int)
                  "/home/me/claylib/wrap/lib/raygui.h:461:9"
                  (:group-padding 16))

(cffi:defcenum (claylib/wrap::|C:@EA@KEYBOARD-KEY| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:540:9"
               (:null 0)
               (:apostrophe 39)
               (:comma 44)
               (:minus 45)
               (:period 46)
               (:slash 47)
               (:zero 48)
               (:one 49)
               (:two 50)
               (:three 51)
               (:four 52)
               (:five 53)
               (:six 54)
               (:seven 55)
               (:eight 56)
               (:nine 57)
               (:semicolon 59)
               (:equal 61)
               (:a 65)
               (:b 66)
               (:c 67)
               (:d 68)
               (:e 69)
               (:f 70)
               (:g 71)
               (:h 72)
               (:i 73)
               (:j 74)
               (:k 75)
               (:l 76)
               (:m 77)
               (:n 78)
               (:o 79)
               (:p 80)
               (:q 81)
               (:r 82)
               (:s 83)
               (:t 84)
               (:u 85)
               (:v 86)
               (:w 87)
               (:x 88)
               (:y 89)
               (:z 90)
               (:left-bracket 91)
               (:backslash 92)
               (:right-bracket 93)
               (:grave 96)
               (:space 32)
               (:escape 256)
               (:enter 257)
               (:tab 258)
               (:backspace 259)
               (:insert 260)
               (:delete 261)
               (:right 262)
               (:left 263)
               (:down 264)
               (:up 265)
               (:page-up 266)
               (:page-down 267)
               (:home 268)
               (:end 269)
               (:caps-lock 280)
               (:scroll-lock 281)
               (:num-lock 282)
               (:print-screen 283)
               (:pause 284)
               (:f1 290)
               (:f2 291)
               (:f3 292)
               (:f4 293)
               (:f5 294)
               (:f6 295)
               (:f7 296)
               (:f8 297)
               (:f9 298)
               (:f10 299)
               (:f11 300)
               (:f12 301)
               (:left-shift 340)
               (:left-control 341)
               (:left-alt 342)
               (:left-super 343)
               (:right-shift 344)
               (:right-control 345)
               (:right-alt 346)
               (:right-super 347)
               (:kb-menu 348)
               (:kp-0 320)
               (:kp-1 321)
               (:kp-2 322)
               (:kp-3 323)
               (:kp-4 324)
               (:kp-5 325)
               (:kp-6 326)
               (:kp-7 327)
               (:kp-8 328)
               (:kp-9 329)
               (:kp-decimal 330)
               (:kp-divide 331)
               (:kp-multiply 332)
               (:kp-subtract 333)
               (:kp-add 334)
               (:kp-enter 335)
               (:kp-equal 336)
               (:back 4)
               (:menu 82)
               (:volume-up 24)
               (:volume-down 25))

(cffi:defcenum (claylib/wrap::|C:@EA@MATERIAL-MAP-INDEX|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:721:9"
               (:albedo 0)
               (:metalness 1)
               (:normal 2)
               (:roughness 3)
               (:occlusion 4)
               (:emission 5)
               (:height 6)
               (:cubemap 7)
               (:irradiance 8)
               (:prefilter 9)
               (:brdf 10))

(cffi:defcenum (claylib/wrap::|C:@EA@MOUSE-BUTTON| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:663:9"
               (:left 0)
               (:right 1)
               (:middle 2)
               (:side 3)
               (:extra 4)
               (:forward 5)
               (:back 6))

(cffi:defcenum (claylib/wrap::|C:@EA@MOUSE-CURSOR| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:674:9"
               (:default 0)
               (:arrow 1)
               (:ibeam 2)
               (:crosshair 3)
               (:pointing-hand 4)
               (:resize-ew 5)
               (:resize-ns 6)
               (:resize-nwse 7)
               (:resize-nesw 8)
               (:resize-all 9)
               (:not-allowed 10))

(cffi:defcenum (claylib/wrap::|C:@EA@N-PATCH-LAYOUT| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:899:9"
               (:nine-patch 0)
               (:three-patch-vertical 1)
               (:three-patch-horizontal 2))

(cffi:defcenum (claylib/wrap::|C:@EA@PIXEL-FORMAT| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:794:9"
               (:uncompressed-r5g6b5 3)
               (:uncompressed-r8g8b8 4)
               (:uncompressed-r5g5b5a1 5)
               (:uncompressed-r4g4b4a4 6)
               (:uncompressed-r8g8b8a8 7)
               (:uncompressed-r32 8)
               (:uncompressed-r32g32b32 9)
               (:uncompressed-r32g32b32a32 10)
               (:compressed-dxt1-rgb 11)
               (:compressed-dxt1-rgba 12)
               (:compressed-dxt3-rgba 13)
               (:compressed-dxt5-rgba 14)
               (:compressed-etc1-rgb 15)
               (:compressed-etc2-rgb 16)
               (:compressed-etc2-eac-rgba 17)
               (:compressed-pvrt-rgb 18)
               (:compressed-pvrt-rgba 19)
               (:compressed-astc-4x4-rgba 20)
               (:compressed-astc-8x8-rgba 21))

(cffi:defcenum (claylib/wrap::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:785:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3))

(cffi:defcenum (claylib/wrap::|C:@EA@SHADER-LOCATION-INDEX|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:739:9"
               (:vertex-position 0)
               (:vertex-texcoord01 1)
               (:vertex-texcoord02 2)
               (:vertex-normal 3)
               (:vertex-tangent 4)
               (:vertex-color 5)
               (:matrix-mvp 6)
               (:matrix-view 7)
               (:matrix-projection 8)
               (:matrix-model 9)
               (:matrix-normal 10)
               (:vector-view 11)
               (:color-diffuse 12)
               (:color-specular 13)
               (:color-ambient 14)
               (:map-albedo 15)
               (:map-metalness 16)
               (:map-normal 17)
               (:map-roughness 18)
               (:map-occlusion 19)
               (:map-emission 20)
               (:map-height 21)
               (:map-cubemap 22)
               (:map-irradiance 23)
               (:map-prefilter 24)
               (:map-brdf 25))

(cffi:defcenum (claylib/wrap::|C:@EA@SHADER-UNIFORM-DATA-TYPE|
                :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:772:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3)
               (:int 4)
               (:ivec2 5)
               (:ivec3 6)
               (:ivec4 7)
               (:sampler2d 8))

(cffi:defcenum (claylib/wrap::|C:@EA@TEXTURE-FILTER| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:821:9"
               (:point 0)
               (:bilinear 1)
               (:trilinear 2)
               (:anisotropic-4x 3)
               (:anisotropic-8x 4)
               (:anisotropic-16x 5))

(cffi:defcenum (claylib/wrap::|C:@EA@TEXTURE-WRAP| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:831:9"
               (:repeat 0)
               (:clamp 1)
               (:mirror-repeat 2)
               (:mirror-clamp 3))

(cffi:defcenum (claylib/wrap::|C:@EA@TRACE-LOG-LEVEL| :unsigned-int)
               "/home/me/claylib/wrap/lib/raylib.h:526:9"
               (:all 0)
               (:trace 1)
               (:debug 2)
               (:info 3)
               (:warning 4)
               (:error 5)
               (:fatal 6)
               (:none 7))

(defparameter claylib/wrap::+fp-nan+ 0)

(defparameter claylib/wrap::+fp-infinite+ 1)

(defparameter claylib/wrap::+fp-zero+ 2)

(defparameter claylib/wrap::+fp-subnormal+ 3)

(defparameter claylib/wrap::+fp-normal+ 4)

(cffi:defctype claylib/wrap::audio-callback (:pointer :void))

(declaim (inline claylib/wrap::attach-audio-mixed-processor))

(cffi:defcfun ("AttachAudioMixedProcessor"
               claylib/wrap::attach-audio-mixed-processor)
              :void
              (claylib/wrap::processor claylib/wrap::audio-callback))

(cffi:defcstruct (claylib/wrap::r-audio-buffer :size 0))

(cffi:defctype claylib/wrap::r-audio-buffer
               (:struct claylib/wrap::r-audio-buffer))

(cffi:defcstruct (claylib/wrap::r-audio-processor :size 0))

(cffi:defctype claylib/wrap::r-audio-processor
               (:struct claylib/wrap::r-audio-processor))

(cffi:defcstruct (claylib/wrap::audio-stream :size 20)
                 (claylib/wrap::buffer
                  (:pointer claylib/wrap::r-audio-buffer) :offset 0)
                 (claylib/wrap::processor
                  (:pointer claylib/wrap::r-audio-processor) :offset
                  4)
                 (claylib/wrap::sample-rate :unsigned-int :offset 8)
                 (claylib/wrap::sample-size :unsigned-int :offset 12)
                 (claylib/wrap::channels :unsigned-int :offset 16))

(cffi:defctype claylib/wrap::audio-stream
               (:struct claylib/wrap::audio-stream))

(declaim (inline claylib/wrap::attach-audio-stream-processor))

(cffi:defcfun ("__claw__AttachAudioStreamProcessor"
               claylib/wrap::attach-audio-stream-processor)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::processor claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::begin-blend-mode))

(cffi:defcfun ("BeginBlendMode" claylib/wrap::begin-blend-mode)
              :void
              (claylib/wrap::mode :int))

(declaim (inline claylib/wrap::begin-drawing))

(cffi:defcfun ("BeginDrawing" claylib/wrap::begin-drawing) :void)

(cffi:defcstruct (claylib/wrap::vector2 :size 8)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4))

(cffi:defctype claylib/wrap::vector2 (:struct claylib/wrap::vector2))

(cffi:defcstruct (claylib/wrap::camera-2d :size 24)
                 (claylib/wrap::offset claylib/wrap::vector2 :offset
                  0)
                 (claylib/wrap::target claylib/wrap::vector2 :offset
                  8)
                 (claylib/wrap::rotation :float :offset 16)
                 (claylib/wrap::zoom :float :offset 20))

(cffi:defctype claylib/wrap::camera-2d
               (:struct claylib/wrap::camera-2d))

(declaim (inline claylib/wrap::begin-mode-2d))

(cffi:defcfun ("__claw__BeginMode2D" claylib/wrap::begin-mode-2d)
              :void
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera-2d)))

(cffi:defcstruct (claylib/wrap::vector3 :size 12)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4)
                 (claylib/wrap::z :float :offset 8))

(cffi:defctype claylib/wrap::vector3 (:struct claylib/wrap::vector3))

(cffi:defcstruct (claylib/wrap::camera-3d :size 44)
                 (claylib/wrap::position claylib/wrap::vector3
                  :offset 0)
                 (claylib/wrap::target claylib/wrap::vector3 :offset
                  12)
                 (claylib/wrap::up claylib/wrap::vector3 :offset 24)
                 (claylib/wrap::fovy :float :offset 36)
                 (claylib/wrap::projection :int :offset 40))

(cffi:defctype claylib/wrap::camera-3d
               (:struct claylib/wrap::camera-3d))

(declaim (inline claylib/wrap::begin-mode-3d))

(cffi:defcfun ("__claw__BeginMode3D" claylib/wrap::begin-mode-3d)
              :void
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera-3d)))

(declaim (inline claylib/wrap::begin-scissor-mode))

(cffi:defcfun ("BeginScissorMode" claylib/wrap::begin-scissor-mode)
              :void
              (claylib/wrap::x :int)
              (claylib/wrap::y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(cffi:defcstruct (claylib/wrap::shader :size 8)
                 (claylib/wrap::id :unsigned-int :offset 0)
                 (claylib/wrap::locs (:pointer :int) :offset 4))

(cffi:defctype claylib/wrap::shader (:struct claylib/wrap::shader))

(declaim (inline claylib/wrap::begin-shader-mode))

(cffi:defcfun ("__claw__BeginShaderMode"
               claylib/wrap::begin-shader-mode)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader)))

(cffi:defcstruct (claylib/wrap::texture :size 20)
                 (claylib/wrap::id :unsigned-int :offset 0)
                 (claylib/wrap::width :int :offset 4)
                 (claylib/wrap::height :int :offset 8)
                 (claylib/wrap::mipmaps :int :offset 12)
                 (claylib/wrap::format :int :offset 16))

(cffi:defctype claylib/wrap::texture (:struct claylib/wrap::texture))

(cffi:defcstruct (claylib/wrap::render-texture :size 44)
                 (claylib/wrap::id :unsigned-int :offset 0)
                 (claylib/wrap::texture claylib/wrap::texture :offset
                  4)
                 (claylib/wrap::depth claylib/wrap::texture :offset
                  24))

(cffi:defctype claylib/wrap::render-texture-2d
               (:struct claylib/wrap::render-texture))

(declaim (inline claylib/wrap::begin-texture-mode))

(cffi:defcfun ("__claw__BeginTextureMode"
               claylib/wrap::begin-texture-mode)
              :void
              (claylib/wrap::target
               (:pointer claylib/wrap::render-texture-2d)))

(cffi:defcstruct (claylib/wrap::matrix :size 64)
                 (claylib/wrap::m0 :float :offset 0)
                 (claylib/wrap::m4 :float :offset 4)
                 (claylib/wrap::m8 :float :offset 8)
                 (claylib/wrap::m12 :float :offset 12)
                 (claylib/wrap::m1 :float :offset 16)
                 (claylib/wrap::m5 :float :offset 20)
                 (claylib/wrap::m9 :float :offset 24)
                 (claylib/wrap::m13 :float :offset 28)
                 (claylib/wrap::m2 :float :offset 32)
                 (claylib/wrap::m6 :float :offset 36)
                 (claylib/wrap::m10 :float :offset 40)
                 (claylib/wrap::m14 :float :offset 44)
                 (claylib/wrap::m3 :float :offset 48)
                 (claylib/wrap::m7 :float :offset 52)
                 (claylib/wrap::m11 :float :offset 56)
                 (claylib/wrap::m15 :float :offset 60))

(cffi:defctype claylib/wrap::matrix (:struct claylib/wrap::matrix))

(cffi:defcstruct (claylib/wrap::vr-stereo-config :size 304)
                 (claylib/wrap::projection claylib/wrap::matrix
                  :count 2 :offset 0)
                 (claylib/wrap::view-offset claylib/wrap::matrix
                  :count 2 :offset 128)
                 (claylib/wrap::left-lens-center :float :count 2
                  :offset 256)
                 (claylib/wrap::right-lens-center :float :count 2
                  :offset 264)
                 (claylib/wrap::left-screen-center :float :count 2
                  :offset 272)
                 (claylib/wrap::right-screen-center :float :count 2
                  :offset 280)
                 (claylib/wrap::scale :float :count 2 :offset 288)
                 (claylib/wrap::scale-in :float :count 2 :offset 296))

(cffi:defctype claylib/wrap::vr-stereo-config
               (:struct claylib/wrap::vr-stereo-config))

(declaim (inline claylib/wrap::begin-vr-stereo-mode))

(cffi:defcfun ("__claw__BeginVrStereoMode"
               claylib/wrap::begin-vr-stereo-mode)
              :void
              (claylib/wrap::config
               (:pointer claylib/wrap::vr-stereo-config)))

(cffi:defctype claylib/wrap::camera (:struct claylib/wrap::camera-3d))

(declaim (inline claylib/wrap::camera-move-forward))

(cffi:defcfun ("CameraMoveForward" claylib/wrap::camera-move-forward)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::distance :float)
              (claylib/wrap::move-in-world-plane :bool))

(declaim (inline claylib/wrap::camera-move-right))

(cffi:defcfun ("CameraMoveRight" claylib/wrap::camera-move-right)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::distance :float)
              (claylib/wrap::move-in-world-plane :bool))

(declaim (inline claylib/wrap::camera-move-to-target))

(cffi:defcfun ("CameraMoveToTarget"
               claylib/wrap::camera-move-to-target)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::delta :float))

(declaim (inline claylib/wrap::camera-move-up))

(cffi:defcfun ("CameraMoveUp" claylib/wrap::camera-move-up)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::distance :float))

(declaim (inline claylib/wrap::camera-pitch))

(cffi:defcfun ("CameraPitch" claylib/wrap::camera-pitch)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::angle :float)
              (claylib/wrap::lock-view :bool)
              (claylib/wrap::rotate-around-target :bool)
              (claylib/wrap::rotate-up :bool))

(declaim (inline claylib/wrap::camera-roll))

(cffi:defcfun ("CameraRoll" claylib/wrap::camera-roll)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::camera-yaw))

(cffi:defcfun ("CameraYaw" claylib/wrap::camera-yaw)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::angle :float)
              (claylib/wrap::rotate-around-target :bool))

(declaim (inline claylib/wrap::change-directory))

(cffi:defcfun ("ChangeDirectory" claylib/wrap::change-directory)
              :bool
              (claylib/wrap::dir :string))

(cffi:defcstruct (claylib/wrap::bounding-box :size 24)
                 (claylib/wrap::min claylib/wrap::vector3 :offset 0)
                 (claylib/wrap::max claylib/wrap::vector3 :offset 12))

(cffi:defctype claylib/wrap::bounding-box
               (:struct claylib/wrap::bounding-box))

(declaim (inline claylib/wrap::check-collision-box-sphere))

(cffi:defcfun ("__claw__CheckCollisionBoxSphere"
               claylib/wrap::check-collision-box-sphere)
              :bool
              (claylib/wrap::box
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::center (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::check-collision-boxes))

(cffi:defcfun ("__claw__CheckCollisionBoxes"
               claylib/wrap::check-collision-boxes)
              :bool
              (claylib/wrap::box1
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::box2
               (:pointer claylib/wrap::bounding-box)))

(cffi:defcstruct (claylib/wrap::rectangle :size 16)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4)
                 (claylib/wrap::width :float :offset 8)
                 (claylib/wrap::height :float :offset 12))

(cffi:defctype claylib/wrap::rectangle
               (:struct claylib/wrap::rectangle))

(declaim (inline claylib/wrap::check-collision-circle-rec))

(cffi:defcfun ("__claw__CheckCollisionCircleRec"
               claylib/wrap::check-collision-circle-rec)
              :bool
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::check-collision-circles))

(cffi:defcfun ("__claw__CheckCollisionCircles"
               claylib/wrap::check-collision-circles)
              :bool
              (claylib/wrap::center1
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius1 :float)
              (claylib/wrap::center2
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius2 :float))

(declaim (inline claylib/wrap::check-collision-lines))

(cffi:defcfun ("__claw__CheckCollisionLines"
               claylib/wrap::check-collision-lines)
              :bool
              (claylib/wrap::start-pos1
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos1
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::start-pos2
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos2
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::collision-point
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::check-collision-point-circle))

(cffi:defcfun ("__claw__CheckCollisionPointCircle"
               claylib/wrap::check-collision-point-circle)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::check-collision-point-line))

(cffi:defcfun ("__claw__CheckCollisionPointLine"
               claylib/wrap::check-collision-point-line)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::threshold :int))

(declaim (inline claylib/wrap::check-collision-point-poly))

(cffi:defcfun ("__claw__CheckCollisionPointPoly"
               claylib/wrap::check-collision-point-poly)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int))

(declaim (inline claylib/wrap::check-collision-point-rec))

(cffi:defcfun ("__claw__CheckCollisionPointRec"
               claylib/wrap::check-collision-point-rec)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::check-collision-point-triangle))

(cffi:defcfun ("__claw__CheckCollisionPointTriangle"
               claylib/wrap::check-collision-point-triangle)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::p3 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::check-collision-recs))

(cffi:defcfun ("__claw__CheckCollisionRecs"
               claylib/wrap::check-collision-recs)
              :bool
              (claylib/wrap::rec1 (:pointer claylib/wrap::rectangle))
              (claylib/wrap::rec2 (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::check-collision-spheres))

(cffi:defcfun ("__claw__CheckCollisionSpheres"
               claylib/wrap::check-collision-spheres)
              :bool
              (claylib/wrap::center1
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius1 :float)
              (claylib/wrap::center2
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius2 :float))

(declaim (inline claylib/wrap::clamp))

(cffi:defcfun ("__claw__Clamp" claylib/wrap::clamp)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::min :float)
              (claylib/wrap::max :float))

(cffi:defcstruct (claylib/wrap::color :size 4)
                 (claylib/wrap::r :unsigned-char :offset 0)
                 (claylib/wrap::g :unsigned-char :offset 1)
                 (claylib/wrap::b :unsigned-char :offset 2)
                 (claylib/wrap::a :unsigned-char :offset 3))

(cffi:defctype claylib/wrap::color (:struct claylib/wrap::color))

(declaim (inline claylib/wrap::clear-background))

(cffi:defcfun ("__claw__ClearBackground"
               claylib/wrap::clear-background)
              :void
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::clear-window-state))

(cffi:defcfun ("ClearWindowState" claylib/wrap::clear-window-state)
              :void
              (claylib/wrap::flags :unsigned-int))

(declaim (inline claylib/wrap::close-audio-device))

(cffi:defcfun ("CloseAudioDevice" claylib/wrap::close-audio-device)
              :void)

(declaim (inline claylib/wrap::close-window))

(cffi:defcfun ("CloseWindow" claylib/wrap::close-window) :void)

(declaim (inline claylib/wrap::codepoint-to-utf8))

(cffi:defcfun ("CodepointToUTF8" claylib/wrap::codepoint-to-utf8)
              :string
              (claylib/wrap::codepoint :int)
              (claylib/wrap::utf8size (:pointer :int)))

(declaim (inline claylib/wrap::color-alpha))

(cffi:defcfun ("__claw__ColorAlpha" claylib/wrap::color-alpha)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::color-alpha-blend))

(cffi:defcfun ("__claw__ColorAlphaBlend"
               claylib/wrap::color-alpha-blend)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::dst (:pointer claylib/wrap::color))
              (claylib/wrap::src (:pointer claylib/wrap::color))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-brightness))

(cffi:defcfun ("__claw__ColorBrightness"
               claylib/wrap::color-brightness)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::factor :float))

(declaim (inline claylib/wrap::color-contrast))

(cffi:defcfun ("__claw__ColorContrast" claylib/wrap::color-contrast)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::contrast :float))

(declaim (inline claylib/wrap::color-from-hsv))

(cffi:defcfun ("__claw__ColorFromHSV" claylib/wrap::color-from-hsv)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::hue :float)
              (claylib/wrap::saturation :float)
              (claylib/wrap::value :float))

(cffi:defcstruct (claylib/wrap::vector4 :size 16)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4)
                 (claylib/wrap::z :float :offset 8)
                 (claylib/wrap::w :float :offset 12))

(cffi:defctype claylib/wrap::vector4 (:struct claylib/wrap::vector4))

(declaim (inline claylib/wrap::color-from-normalized))

(cffi:defcfun ("__claw__ColorFromNormalized"
               claylib/wrap::color-from-normalized)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::normalized
               (:pointer claylib/wrap::vector4)))

(declaim (inline claylib/wrap::color-normalize))

(cffi:defcfun ("__claw__ColorNormalize"
               claylib/wrap::color-normalize)
              (:pointer claylib/wrap::vector4)
              (claylib/wrap::result (:pointer claylib/wrap::vector4))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-tint))

(cffi:defcfun ("__claw__ColorTint" claylib/wrap::color-tint)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-to-hsv))

(cffi:defcfun ("__claw__ColorToHSV" claylib/wrap::color-to-hsv)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-to-int))

(cffi:defcfun ("__claw__ColorToInt" claylib/wrap::color-to-int)
              :int
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::compress-data))

(cffi:defcfun ("CompressData" claylib/wrap::compress-data)
              (:pointer :unsigned-char)
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::comp-data-size (:pointer :int)))

(declaim (inline claylib/wrap::decode-data-base64))

(cffi:defcfun ("DecodeDataBase64" claylib/wrap::decode-data-base64)
              (:pointer :unsigned-char)
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::output-size (:pointer :int)))

(declaim (inline claylib/wrap::decompress-data))

(cffi:defcfun ("DecompressData" claylib/wrap::decompress-data)
              (:pointer :unsigned-char)
              (claylib/wrap::comp-data (:pointer :unsigned-char))
              (claylib/wrap::comp-data-size :int)
              (claylib/wrap::data-size (:pointer :int)))

(declaim (inline claylib/wrap::detach-audio-mixed-processor))

(cffi:defcfun ("DetachAudioMixedProcessor"
               claylib/wrap::detach-audio-mixed-processor)
              :void
              (claylib/wrap::processor claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::detach-audio-stream-processor))

(cffi:defcfun ("__claw__DetachAudioStreamProcessor"
               claylib/wrap::detach-audio-stream-processor)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::processor claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::directory-exists))

(cffi:defcfun ("DirectoryExists" claylib/wrap::directory-exists)
              :bool
              (claylib/wrap::dir-path :string))

(declaim (inline claylib/wrap::disable-cursor))

(cffi:defcfun ("DisableCursor" claylib/wrap::disable-cursor) :void)

(declaim (inline claylib/wrap::disable-event-waiting))

(cffi:defcfun ("DisableEventWaiting"
               claylib/wrap::disable-event-waiting)
              :void)

(cffi:defctype claylib/wrap::texture-2d
               (:struct claylib/wrap::texture))

(declaim (inline claylib/wrap::draw-billboard))

(cffi:defcfun ("__claw__DrawBillboard" claylib/wrap::draw-billboard)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-billboard-pro))

(cffi:defcfun ("__claw__DrawBillboardPro"
               claylib/wrap::draw-billboard-pro)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::up (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-billboard-rec))

(cffi:defcfun ("__claw__DrawBillboardRec"
               claylib/wrap::draw-billboard-rec)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-bounding-box))

(cffi:defcfun ("__claw__DrawBoundingBox"
               claylib/wrap::draw-bounding-box)
              :void
              (claylib/wrap::box
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-capsule))

(cffi:defcfun ("__claw__DrawCapsule" claylib/wrap::draw-capsule)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::slices :int)
              (claylib/wrap::rings :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-capsule-wires))

(cffi:defcfun ("__claw__DrawCapsuleWires"
               claylib/wrap::draw-capsule-wires)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::slices :int)
              (claylib/wrap::rings :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle))

(cffi:defcfun ("__claw__DrawCircle" claylib/wrap::draw-circle)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-3d))

(cffi:defcfun ("__claw__DrawCircle3D" claylib/wrap::draw-circle-3d)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-angle :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-gradient))

(cffi:defcfun ("__claw__DrawCircleGradient"
               claylib/wrap::draw-circle-gradient)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::color1 (:pointer claylib/wrap::color))
              (claylib/wrap::color2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-lines))

(cffi:defcfun ("__claw__DrawCircleLines"
               claylib/wrap::draw-circle-lines)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-sector))

(cffi:defcfun ("__claw__DrawCircleSector"
               claylib/wrap::draw-circle-sector)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-sector-lines))

(cffi:defcfun ("__claw__DrawCircleSectorLines"
               claylib/wrap::draw-circle-sector-lines)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-v))

(cffi:defcfun ("__claw__DrawCircleV" claylib/wrap::draw-circle-v)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube))

(cffi:defcfun ("__claw__DrawCube" claylib/wrap::draw-cube)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-v))

(cffi:defcfun ("__claw__DrawCubeV" claylib/wrap::draw-cube-v)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-wires))

(cffi:defcfun ("__claw__DrawCubeWires" claylib/wrap::draw-cube-wires)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-wires-v))

(cffi:defcfun ("__claw__DrawCubeWiresV"
               claylib/wrap::draw-cube-wires-v)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder))

(cffi:defcfun ("__claw__DrawCylinder" claylib/wrap::draw-cylinder)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius-top :float)
              (claylib/wrap::radius-bottom :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder-ex))

(cffi:defcfun ("__claw__DrawCylinderEx"
               claylib/wrap::draw-cylinder-ex)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::start-radius :float)
              (claylib/wrap::end-radius :float)
              (claylib/wrap::sides :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder-wires))

(cffi:defcfun ("__claw__DrawCylinderWires"
               claylib/wrap::draw-cylinder-wires)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius-top :float)
              (claylib/wrap::radius-bottom :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder-wires-ex))

(cffi:defcfun ("__claw__DrawCylinderWiresEx"
               claylib/wrap::draw-cylinder-wires-ex)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::start-radius :float)
              (claylib/wrap::end-radius :float)
              (claylib/wrap::sides :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ellipse))

(cffi:defcfun ("__claw__DrawEllipse" claylib/wrap::draw-ellipse)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius-h :float)
              (claylib/wrap::radius-v :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ellipse-lines))

(cffi:defcfun ("__claw__DrawEllipseLines"
               claylib/wrap::draw-ellipse-lines)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius-h :float)
              (claylib/wrap::radius-v :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-fps))

(cffi:defcfun ("DrawFPS" claylib/wrap::draw-fps)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int))

(declaim (inline claylib/wrap::draw-grid))

(cffi:defcfun ("DrawGrid" claylib/wrap::draw-grid)
              :void
              (claylib/wrap::slices :int)
              (claylib/wrap::spacing :float))

(declaim (inline claylib/wrap::draw-line))

(cffi:defcfun ("__claw__DrawLine" claylib/wrap::draw-line)
              :void
              (claylib/wrap::start-pos-x :int)
              (claylib/wrap::start-pos-y :int)
              (claylib/wrap::end-pos-x :int)
              (claylib/wrap::end-pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-3d))

(cffi:defcfun ("__claw__DrawLine3D" claylib/wrap::draw-line-3d)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-bezier))

(cffi:defcfun ("__claw__DrawLineBezier"
               claylib/wrap::draw-line-bezier)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-bezier-cubic))

(cffi:defcfun ("__claw__DrawLineBezierCubic"
               claylib/wrap::draw-line-bezier-cubic)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::start-control-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-control-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-bezier-quad))

(cffi:defcfun ("__claw__DrawLineBezierQuad"
               claylib/wrap::draw-line-bezier-quad)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::control-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-ex))

(cffi:defcfun ("__claw__DrawLineEx" claylib/wrap::draw-line-ex)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-strip))

(cffi:defcfun ("__claw__DrawLineStrip" claylib/wrap::draw-line-strip)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-v))

(cffi:defcfun ("__claw__DrawLineV" claylib/wrap::draw-line-v)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::mesh :size 60)
                 (claylib/wrap::vertex-count :int :offset 0)
                 (claylib/wrap::triangle-count :int :offset 4)
                 (claylib/wrap::vertices (:pointer :float) :offset 8)
                 (claylib/wrap::texcoords (:pointer :float) :offset
                  12)
                 (claylib/wrap::texcoords2 (:pointer :float) :offset
                  16)
                 (claylib/wrap::normals (:pointer :float) :offset 20)
                 (claylib/wrap::tangents (:pointer :float) :offset
                  24)
                 (claylib/wrap::colors (:pointer :unsigned-char)
                  :offset 28)
                 (claylib/wrap::indices (:pointer :unsigned-short)
                  :offset 32)
                 (claylib/wrap::anim-vertices (:pointer :float)
                  :offset 36)
                 (claylib/wrap::anim-normals (:pointer :float)
                  :offset 40)
                 (claylib/wrap::bone-ids (:pointer :unsigned-char)
                  :offset 44)
                 (claylib/wrap::bone-weights (:pointer :float)
                  :offset 48)
                 (claylib/wrap::vao-id :unsigned-int :offset 52)
                 (claylib/wrap::vbo-id (:pointer :unsigned-int)
                  :offset 56))

(cffi:defctype claylib/wrap::mesh (:struct claylib/wrap::mesh))

(cffi:defcstruct (claylib/wrap::material-map :size 28)
                 (claylib/wrap::texture claylib/wrap::texture-2d
                  :offset 0)
                 (claylib/wrap::color claylib/wrap::color :offset 20)
                 (claylib/wrap::value :float :offset 24))

(cffi:defctype claylib/wrap::material-map
               (:struct claylib/wrap::material-map))

(cffi:defcstruct (claylib/wrap::material :size 28)
                 (claylib/wrap::shader claylib/wrap::shader :offset
                  0)
                 (claylib/wrap::maps
                  (:pointer claylib/wrap::material-map) :offset 8)
                 (claylib/wrap::params :float :count 4 :offset 12))

(cffi:defctype claylib/wrap::material
               (:struct claylib/wrap::material))

(declaim (inline claylib/wrap::draw-mesh))

(cffi:defcfun ("__claw__DrawMesh" claylib/wrap::draw-mesh)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::material
               (:pointer claylib/wrap::material))
              (claylib/wrap::transform
               (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::draw-mesh-instanced))

(cffi:defcfun ("__claw__DrawMeshInstanced"
               claylib/wrap::draw-mesh-instanced)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::material
               (:pointer claylib/wrap::material))
              (claylib/wrap::transforms
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::instances :int))

(cffi:defcstruct (claylib/wrap::bone-info :size 36)
                 (claylib/wrap::name :char :count 32 :offset 0)
                 (claylib/wrap::parent :int :offset 32))

(cffi:defctype claylib/wrap::bone-info
               (:struct claylib/wrap::bone-info))

(cffi:defctype claylib/wrap::quaternion
               (:struct claylib/wrap::vector4))

(cffi:defcstruct (claylib/wrap::transform :size 40)
                 (claylib/wrap::translation claylib/wrap::vector3
                  :offset 0)
                 (claylib/wrap::rotation claylib/wrap::quaternion
                  :offset 12)
                 (claylib/wrap::scale claylib/wrap::vector3 :offset
                  28))

(cffi:defctype claylib/wrap::transform
               (:struct claylib/wrap::transform))

(cffi:defcstruct (claylib/wrap::model :size 96)
                 (claylib/wrap::transform claylib/wrap::matrix
                  :offset 0)
                 (claylib/wrap::mesh-count :int :offset 64)
                 (claylib/wrap::material-count :int :offset 68)
                 (claylib/wrap::meshes (:pointer claylib/wrap::mesh)
                  :offset 72)
                 (claylib/wrap::materials
                  (:pointer claylib/wrap::material) :offset 76)
                 (claylib/wrap::mesh-material (:pointer :int) :offset
                  80)
                 (claylib/wrap::bone-count :int :offset 84)
                 (claylib/wrap::bones
                  (:pointer claylib/wrap::bone-info) :offset 88)
                 (claylib/wrap::bind-pose
                  (:pointer claylib/wrap::transform) :offset 92))

(cffi:defctype claylib/wrap::model (:struct claylib/wrap::model))

(declaim (inline claylib/wrap::draw-model))

(cffi:defcfun ("__claw__DrawModel" claylib/wrap::draw-model)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-model-ex))

(cffi:defcfun ("__claw__DrawModelEx" claylib/wrap::draw-model-ex)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-angle :float)
              (claylib/wrap::scale (:pointer claylib/wrap::vector3))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-model-wires))

(cffi:defcfun ("__claw__DrawModelWires"
               claylib/wrap::draw-model-wires)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-model-wires-ex))

(cffi:defcfun ("__claw__DrawModelWiresEx"
               claylib/wrap::draw-model-wires-ex)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-angle :float)
              (claylib/wrap::scale (:pointer claylib/wrap::vector3))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-pixel))

(cffi:defcfun ("__claw__DrawPixel" claylib/wrap::draw-pixel)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-pixel-v))

(cffi:defcfun ("__claw__DrawPixelV" claylib/wrap::draw-pixel-v)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-plane))

(cffi:defcfun ("__claw__DrawPlane" claylib/wrap::draw-plane)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-point-3d))

(cffi:defcfun ("__claw__DrawPoint3D" claylib/wrap::draw-point-3d)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-poly))

(cffi:defcfun ("__claw__DrawPoly" claylib/wrap::draw-poly)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-poly-lines))

(cffi:defcfun ("__claw__DrawPolyLines" claylib/wrap::draw-poly-lines)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-poly-lines-ex))

(cffi:defcfun ("__claw__DrawPolyLinesEx"
               claylib/wrap::draw-poly-lines-ex)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation :float)
              (claylib/wrap::line-thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::ray :size 24)
                 (claylib/wrap::position claylib/wrap::vector3
                  :offset 0)
                 (claylib/wrap::direction claylib/wrap::vector3
                  :offset 12))

(cffi:defctype claylib/wrap::ray (:struct claylib/wrap::ray))

(declaim (inline claylib/wrap::draw-ray))

(cffi:defcfun ("__claw__DrawRay" claylib/wrap::draw-ray)
              :void
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle))

(cffi:defcfun ("__claw__DrawRectangle" claylib/wrap::draw-rectangle)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-gradient-ex))

(cffi:defcfun ("__claw__DrawRectangleGradientEx"
               claylib/wrap::draw-rectangle-gradient-ex)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::col1 (:pointer claylib/wrap::color))
              (claylib/wrap::col2 (:pointer claylib/wrap::color))
              (claylib/wrap::col3 (:pointer claylib/wrap::color))
              (claylib/wrap::col4 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-gradient-h))

(cffi:defcfun ("__claw__DrawRectangleGradientH"
               claylib/wrap::draw-rectangle-gradient-h)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color1 (:pointer claylib/wrap::color))
              (claylib/wrap::color2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-gradient-v))

(cffi:defcfun ("__claw__DrawRectangleGradientV"
               claylib/wrap::draw-rectangle-gradient-v)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color1 (:pointer claylib/wrap::color))
              (claylib/wrap::color2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-lines))

(cffi:defcfun ("__claw__DrawRectangleLines"
               claylib/wrap::draw-rectangle-lines)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-lines-ex))

(cffi:defcfun ("__claw__DrawRectangleLinesEx"
               claylib/wrap::draw-rectangle-lines-ex)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::line-thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-pro))

(cffi:defcfun ("__claw__DrawRectanglePro"
               claylib/wrap::draw-rectangle-pro)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-rec))

(cffi:defcfun ("__claw__DrawRectangleRec"
               claylib/wrap::draw-rectangle-rec)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-rounded))

(cffi:defcfun ("__claw__DrawRectangleRounded"
               claylib/wrap::draw-rectangle-rounded)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::roundness :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-rounded-lines))

(cffi:defcfun ("__claw__DrawRectangleRoundedLines"
               claylib/wrap::draw-rectangle-rounded-lines)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::roundness :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::line-thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-v))

(cffi:defcfun ("__claw__DrawRectangleV"
               claylib/wrap::draw-rectangle-v)
              :void
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ring))

(cffi:defcfun ("__claw__DrawRing" claylib/wrap::draw-ring)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::inner-radius :float)
              (claylib/wrap::outer-radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ring-lines))

(cffi:defcfun ("__claw__DrawRingLines" claylib/wrap::draw-ring-lines)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::inner-radius :float)
              (claylib/wrap::outer-radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-sphere))

(cffi:defcfun ("__claw__DrawSphere" claylib/wrap::draw-sphere)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-sphere-ex))

(cffi:defcfun ("__claw__DrawSphereEx" claylib/wrap::draw-sphere-ex)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-sphere-wires))

(cffi:defcfun ("__claw__DrawSphereWires"
               claylib/wrap::draw-sphere-wires)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text))

(cffi:defcfun ("__claw__DrawText" claylib/wrap::draw-text)
              :void
              (claylib/wrap::text :string)
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::image :size 20)
                 (claylib/wrap::data (:pointer :void) :offset 0)
                 (claylib/wrap::width :int :offset 4)
                 (claylib/wrap::height :int :offset 8)
                 (claylib/wrap::mipmaps :int :offset 12)
                 (claylib/wrap::format :int :offset 16))

(cffi:defctype claylib/wrap::image (:struct claylib/wrap::image))

(cffi:defcstruct (claylib/wrap::glyph-info :size 36)
                 (claylib/wrap::value :int :offset 0)
                 (claylib/wrap::offset-x :int :offset 4)
                 (claylib/wrap::offset-y :int :offset 8)
                 (claylib/wrap::advance-x :int :offset 12)
                 (claylib/wrap::image claylib/wrap::image :offset 16))

(cffi:defctype claylib/wrap::glyph-info
               (:struct claylib/wrap::glyph-info))

(cffi:defcstruct (claylib/wrap::font :size 40)
                 (claylib/wrap::base-size :int :offset 0)
                 (claylib/wrap::glyph-count :int :offset 4)
                 (claylib/wrap::glyph-padding :int :offset 8)
                 (claylib/wrap::texture claylib/wrap::texture-2d
                  :offset 12)
                 (claylib/wrap::recs
                  (:pointer claylib/wrap::rectangle) :offset 32)
                 (claylib/wrap::glyphs
                  (:pointer claylib/wrap::glyph-info) :offset 36))

(cffi:defctype claylib/wrap::font (:struct claylib/wrap::font))

(declaim (inline claylib/wrap::draw-text-codepoint))

(cffi:defcfun ("__claw__DrawTextCodepoint"
               claylib/wrap::draw-text-codepoint)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int)
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text-codepoints))

(cffi:defcfun ("__claw__DrawTextCodepoints"
               claylib/wrap::draw-text-codepoints)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoints (:pointer :int))
              (claylib/wrap::count :int)
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text-ex))

(cffi:defcfun ("__claw__DrawTextEx" claylib/wrap::draw-text-ex)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text-pro))

(cffi:defcfun ("__claw__DrawTextPro" claylib/wrap::draw-text-pro)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture))

(cffi:defcfun ("__claw__DrawTexture" claylib/wrap::draw-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-ex))

(cffi:defcfun ("__claw__DrawTextureEx" claylib/wrap::draw-texture-ex)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::n-patch-info :size 36)
                 (claylib/wrap::source claylib/wrap::rectangle
                  :offset 0)
                 (claylib/wrap::left :int :offset 16)
                 (claylib/wrap::top :int :offset 20)
                 (claylib/wrap::right :int :offset 24)
                 (claylib/wrap::bottom :int :offset 28)
                 (claylib/wrap::layout :int :offset 32))

(cffi:defctype claylib/wrap::n-patch-info
               (:struct claylib/wrap::n-patch-info))

(declaim (inline claylib/wrap::draw-texture-n-patch))

(cffi:defcfun ("__claw__DrawTextureNPatch"
               claylib/wrap::draw-texture-n-patch)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::n-patch-info
               (:pointer claylib/wrap::n-patch-info))
              (claylib/wrap::dest (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-pro))

(cffi:defcfun ("__claw__DrawTexturePro"
               claylib/wrap::draw-texture-pro)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::dest (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-rec))

(cffi:defcfun ("__claw__DrawTextureRec"
               claylib/wrap::draw-texture-rec)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-v))

(cffi:defcfun ("__claw__DrawTextureV" claylib/wrap::draw-texture-v)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle))

(cffi:defcfun ("__claw__DrawTriangle" claylib/wrap::draw-triangle)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v3 (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-3d))

(cffi:defcfun ("__claw__DrawTriangle3D"
               claylib/wrap::draw-triangle-3d)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v3 (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-fan))

(cffi:defcfun ("__claw__DrawTriangleFan"
               claylib/wrap::draw-triangle-fan)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-lines))

(cffi:defcfun ("__claw__DrawTriangleLines"
               claylib/wrap::draw-triangle-lines)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v3 (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-strip))

(cffi:defcfun ("__claw__DrawTriangleStrip"
               claylib/wrap::draw-triangle-strip)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-strip-3d))

(cffi:defcfun ("__claw__DrawTriangleStrip3D"
               claylib/wrap::draw-triangle-strip-3d)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector3))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::enable-cursor))

(cffi:defcfun ("EnableCursor" claylib/wrap::enable-cursor) :void)

(declaim (inline claylib/wrap::enable-event-waiting))

(cffi:defcfun ("EnableEventWaiting"
               claylib/wrap::enable-event-waiting)
              :void)

(declaim (inline claylib/wrap::encode-data-base64))

(cffi:defcfun ("EncodeDataBase64" claylib/wrap::encode-data-base64)
              :string
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::output-size (:pointer :int)))

(declaim (inline claylib/wrap::end-blend-mode))

(cffi:defcfun ("EndBlendMode" claylib/wrap::end-blend-mode) :void)

(declaim (inline claylib/wrap::end-drawing))

(cffi:defcfun ("EndDrawing" claylib/wrap::end-drawing) :void)

(declaim (inline claylib/wrap::end-mode-2d))

(cffi:defcfun ("EndMode2D" claylib/wrap::end-mode-2d) :void)

(declaim (inline claylib/wrap::end-mode-3d))

(cffi:defcfun ("EndMode3D" claylib/wrap::end-mode-3d) :void)

(declaim (inline claylib/wrap::end-scissor-mode))

(cffi:defcfun ("EndScissorMode" claylib/wrap::end-scissor-mode) :void)

(declaim (inline claylib/wrap::end-shader-mode))

(cffi:defcfun ("EndShaderMode" claylib/wrap::end-shader-mode) :void)

(declaim (inline claylib/wrap::end-texture-mode))

(cffi:defcfun ("EndTextureMode" claylib/wrap::end-texture-mode) :void)

(declaim (inline claylib/wrap::end-vr-stereo-mode))

(cffi:defcfun ("EndVrStereoMode" claylib/wrap::end-vr-stereo-mode)
              :void)

(declaim (inline claylib/wrap::export-data-as-code))

(cffi:defcfun ("ExportDataAsCode" claylib/wrap::export-data-as-code)
              :bool
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::size :unsigned-int)
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-font-as-code))

(cffi:defcfun ("__claw__ExportFontAsCode"
               claylib/wrap::export-font-as-code)
              :bool
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-image))

(cffi:defcfun ("__claw__ExportImage" claylib/wrap::export-image)
              :bool
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-image-as-code))

(cffi:defcfun ("__claw__ExportImageAsCode"
               claylib/wrap::export-image-as-code)
              :bool
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-mesh))

(cffi:defcfun ("__claw__ExportMesh" claylib/wrap::export-mesh)
              :bool
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::file-name :string))

(cffi:defcstruct (claylib/wrap::wave :size 20)
                 (claylib/wrap::frame-count :unsigned-int :offset 0)
                 (claylib/wrap::sample-rate :unsigned-int :offset 4)
                 (claylib/wrap::sample-size :unsigned-int :offset 8)
                 (claylib/wrap::channels :unsigned-int :offset 12)
                 (claylib/wrap::data (:pointer :void) :offset 16))

(cffi:defctype claylib/wrap::wave (:struct claylib/wrap::wave))

(declaim (inline claylib/wrap::export-wave))

(cffi:defcfun ("__claw__ExportWave" claylib/wrap::export-wave)
              :bool
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-wave-as-code))

(cffi:defcfun ("__claw__ExportWaveAsCode"
               claylib/wrap::export-wave-as-code)
              :bool
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::fade))

(cffi:defcfun ("__claw__Fade" claylib/wrap::fade)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::file-exists))

(cffi:defcfun ("FileExists" claylib/wrap::file-exists)
              :bool
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::float-equals))

(cffi:defcfun ("__claw__FloatEquals" claylib/wrap::float-equals)
              :int
              (claylib/wrap::x :float)
              (claylib/wrap::y :float))

(declaim (inline claylib/wrap::gen-image-cellular))

(cffi:defcfun ("__claw__GenImageCellular"
               claylib/wrap::gen-image-cellular)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::tile-size :int))

(declaim (inline claylib/wrap::gen-image-checked))

(cffi:defcfun ("__claw__GenImageChecked"
               claylib/wrap::gen-image-checked)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::checks-x :int)
              (claylib/wrap::checks-y :int)
              (claylib/wrap::col1 (:pointer claylib/wrap::color))
              (claylib/wrap::col2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-color))

(cffi:defcfun ("__claw__GenImageColor" claylib/wrap::gen-image-color)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-font-atlas))

(cffi:defcfun ("__claw__GenImageFontAtlas"
               claylib/wrap::gen-image-font-atlas)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::chars
               (:pointer claylib/wrap::glyph-info))
              (claylib/wrap::recs
               (:pointer (:pointer claylib/wrap::rectangle)))
              (claylib/wrap::glyph-count :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::padding :int)
              (claylib/wrap::pack-method :int))

(declaim (inline claylib/wrap::gen-image-gradient-h))

(cffi:defcfun ("__claw__GenImageGradientH"
               claylib/wrap::gen-image-gradient-h)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::left (:pointer claylib/wrap::color))
              (claylib/wrap::right (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-gradient-radial))

(cffi:defcfun ("__claw__GenImageGradientRadial"
               claylib/wrap::gen-image-gradient-radial)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::density :float)
              (claylib/wrap::inner (:pointer claylib/wrap::color))
              (claylib/wrap::outer (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-gradient-v))

(cffi:defcfun ("__claw__GenImageGradientV"
               claylib/wrap::gen-image-gradient-v)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::top (:pointer claylib/wrap::color))
              (claylib/wrap::bottom (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-perlin-noise))

(cffi:defcfun ("__claw__GenImagePerlinNoise"
               claylib/wrap::gen-image-perlin-noise)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::offset-x :int)
              (claylib/wrap::offset-y :int)
              (claylib/wrap::scale :float))

(declaim (inline claylib/wrap::gen-image-text))

(cffi:defcfun ("__claw__GenImageText" claylib/wrap::gen-image-text)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gen-image-white-noise))

(cffi:defcfun ("__claw__GenImageWhiteNoise"
               claylib/wrap::gen-image-white-noise)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::factor :float))

(declaim (inline claylib/wrap::gen-mesh-cone))

(cffi:defcfun ("__claw__GenMeshCone" claylib/wrap::gen-mesh-cone)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-cube))

(cffi:defcfun ("__claw__GenMeshCube" claylib/wrap::gen-mesh-cube)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float))

(declaim (inline claylib/wrap::gen-mesh-cubicmap))

(cffi:defcfun ("__claw__GenMeshCubicmap"
               claylib/wrap::gen-mesh-cubicmap)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::cubicmap (:pointer claylib/wrap::image))
              (claylib/wrap::cube-size
               (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::gen-mesh-cylinder))

(cffi:defcfun ("__claw__GenMeshCylinder"
               claylib/wrap::gen-mesh-cylinder)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-heightmap))

(cffi:defcfun ("__claw__GenMeshHeightmap"
               claylib/wrap::gen-mesh-heightmap)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::heightmap
               (:pointer claylib/wrap::image))
              (claylib/wrap::size (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::gen-mesh-hemi-sphere))

(cffi:defcfun ("__claw__GenMeshHemiSphere"
               claylib/wrap::gen-mesh-hemi-sphere)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-knot))

(cffi:defcfun ("__claw__GenMeshKnot" claylib/wrap::gen-mesh-knot)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::size :float)
              (claylib/wrap::rad-seg :int)
              (claylib/wrap::sides :int))

(declaim (inline claylib/wrap::gen-mesh-plane))

(cffi:defcfun ("__claw__GenMeshPlane" claylib/wrap::gen-mesh-plane)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::width :float)
              (claylib/wrap::length :float)
              (claylib/wrap::res-x :int)
              (claylib/wrap::res-z :int))

(declaim (inline claylib/wrap::gen-mesh-poly))

(cffi:defcfun ("__claw__GenMeshPoly" claylib/wrap::gen-mesh-poly)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::gen-mesh-sphere))

(cffi:defcfun ("__claw__GenMeshSphere" claylib/wrap::gen-mesh-sphere)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-tangents))

(cffi:defcfun ("GenMeshTangents" claylib/wrap::gen-mesh-tangents)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::gen-mesh-torus))

(cffi:defcfun ("__claw__GenMeshTorus" claylib/wrap::gen-mesh-torus)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::result (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::size :float)
              (claylib/wrap::rad-seg :int)
              (claylib/wrap::sides :int))

(declaim (inline claylib/wrap::gen-texture-mipmaps))

(cffi:defcfun ("GenTextureMipmaps" claylib/wrap::gen-texture-mipmaps)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d)))

(declaim (inline claylib/wrap::get-application-directory))

(cffi:defcfun ("GetApplicationDirectory"
               claylib/wrap::get-application-directory)
              :string)

(declaim (inline claylib/wrap::get-camera-forward))

(cffi:defcfun ("__claw__GetCameraForward"
               claylib/wrap::get-camera-forward)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-camera-matrix))

(cffi:defcfun ("__claw__GetCameraMatrix"
               claylib/wrap::get-camera-matrix)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-camera-matrix-2d))

(cffi:defcfun ("__claw__GetCameraMatrix2D"
               claylib/wrap::get-camera-matrix-2d)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera-2d)))

(declaim (inline claylib/wrap::get-camera-projection-matrix))

(cffi:defcfun ("__claw__GetCameraProjectionMatrix"
               claylib/wrap::get-camera-projection-matrix)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::aspect :float))

(declaim (inline claylib/wrap::get-camera-right))

(cffi:defcfun ("__claw__GetCameraRight"
               claylib/wrap::get-camera-right)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-camera-up))

(cffi:defcfun ("__claw__GetCameraUp" claylib/wrap::get-camera-up)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-camera-view-matrix))

(cffi:defcfun ("__claw__GetCameraViewMatrix"
               claylib/wrap::get-camera-view-matrix)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-char-pressed))

(cffi:defcfun ("GetCharPressed" claylib/wrap::get-char-pressed) :int)

(declaim (inline claylib/wrap::get-clipboard-text))

(cffi:defcfun ("GetClipboardText" claylib/wrap::get-clipboard-text)
              :string)

(declaim (inline claylib/wrap::get-codepoint))

(cffi:defcfun ("GetCodepoint" claylib/wrap::get-codepoint)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::codepoint-size (:pointer :int)))

(declaim (inline claylib/wrap::get-codepoint-count))

(cffi:defcfun ("GetCodepointCount" claylib/wrap::get-codepoint-count)
              :int
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::get-codepoint-next))

(cffi:defcfun ("GetCodepointNext" claylib/wrap::get-codepoint-next)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::codepoint-size (:pointer :int)))

(declaim (inline claylib/wrap::get-codepoint-previous))

(cffi:defcfun ("GetCodepointPrevious"
               claylib/wrap::get-codepoint-previous)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::codepoint-size (:pointer :int)))

(declaim (inline claylib/wrap::get-collision-rec))

(cffi:defcfun ("__claw__GetCollisionRec"
               claylib/wrap::get-collision-rec)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::result
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::rec1 (:pointer claylib/wrap::rectangle))
              (claylib/wrap::rec2 (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::get-color))

(cffi:defcfun ("__claw__GetColor" claylib/wrap::get-color)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::hex-value :unsigned-int))

(declaim (inline claylib/wrap::get-current-monitor))

(cffi:defcfun ("GetCurrentMonitor" claylib/wrap::get-current-monitor)
              :int)

(declaim (inline claylib/wrap::get-directory-path))

(cffi:defcfun ("GetDirectoryPath" claylib/wrap::get-directory-path)
              :string
              (claylib/wrap::file-path :string))

(declaim (inline claylib/wrap::get-fps))

(cffi:defcfun ("GetFPS" claylib/wrap::get-fps) :int)

(declaim (inline claylib/wrap::get-file-extension))

(cffi:defcfun ("GetFileExtension" claylib/wrap::get-file-extension)
              :string
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::get-file-length))

(cffi:defcfun ("GetFileLength" claylib/wrap::get-file-length)
              :int
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::get-file-mod-time))

(cffi:defcfun ("GetFileModTime" claylib/wrap::get-file-mod-time)
              :long
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::get-file-name))

(cffi:defcfun ("GetFileName" claylib/wrap::get-file-name)
              :string
              (claylib/wrap::file-path :string))

(declaim (inline claylib/wrap::get-file-name-without-ext))

(cffi:defcfun ("GetFileNameWithoutExt"
               claylib/wrap::get-file-name-without-ext)
              :string
              (claylib/wrap::file-path :string))

(declaim (inline claylib/wrap::get-font-default))

(cffi:defcfun ("__claw__GetFontDefault"
               claylib/wrap::get-font-default)
              (:pointer claylib/wrap::font)
              (claylib/wrap::result (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::get-frame-time))

(cffi:defcfun ("GetFrameTime" claylib/wrap::get-frame-time) :float)

(declaim (inline claylib/wrap::get-gamepad-axis-count))

(cffi:defcfun ("GetGamepadAxisCount"
               claylib/wrap::get-gamepad-axis-count)
              :int
              (claylib/wrap::gamepad :int))

(declaim (inline claylib/wrap::get-gamepad-axis-movement))

(cffi:defcfun ("GetGamepadAxisMovement"
               claylib/wrap::get-gamepad-axis-movement)
              :float
              (claylib/wrap::gamepad :int)
              (claylib/wrap::axis :int))

(declaim (inline claylib/wrap::get-gamepad-button-pressed))

(cffi:defcfun ("GetGamepadButtonPressed"
               claylib/wrap::get-gamepad-button-pressed)
              :int)

(declaim (inline claylib/wrap::get-gamepad-name))

(cffi:defcfun ("GetGamepadName" claylib/wrap::get-gamepad-name)
              :string
              (claylib/wrap::gamepad :int))

(declaim (inline claylib/wrap::get-gesture-detected))

(cffi:defcfun ("GetGestureDetected"
               claylib/wrap::get-gesture-detected)
              :int)

(declaim (inline claylib/wrap::get-gesture-drag-angle))

(cffi:defcfun ("GetGestureDragAngle"
               claylib/wrap::get-gesture-drag-angle)
              :float)

(declaim (inline claylib/wrap::get-gesture-drag-vector))

(cffi:defcfun ("__claw__GetGestureDragVector"
               claylib/wrap::get-gesture-drag-vector)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-gesture-hold-duration))

(cffi:defcfun ("GetGestureHoldDuration"
               claylib/wrap::get-gesture-hold-duration)
              :float)

(declaim (inline claylib/wrap::get-gesture-pinch-angle))

(cffi:defcfun ("GetGesturePinchAngle"
               claylib/wrap::get-gesture-pinch-angle)
              :float)

(declaim (inline claylib/wrap::get-gesture-pinch-vector))

(cffi:defcfun ("__claw__GetGesturePinchVector"
               claylib/wrap::get-gesture-pinch-vector)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-glyph-atlas-rec))

(cffi:defcfun ("__claw__GetGlyphAtlasRec"
               claylib/wrap::get-glyph-atlas-rec)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::result
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int))

(declaim (inline claylib/wrap::get-glyph-index))

(cffi:defcfun ("__claw__GetGlyphIndex" claylib/wrap::get-glyph-index)
              :int
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int))

(declaim (inline claylib/wrap::get-glyph-info))

(cffi:defcfun ("__claw__GetGlyphInfo" claylib/wrap::get-glyph-info)
              (:pointer claylib/wrap::glyph-info)
              (claylib/wrap::result
               (:pointer claylib/wrap::glyph-info))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int))

(declaim (inline claylib/wrap::get-image-alpha-border))

(cffi:defcfun ("__claw__GetImageAlphaBorder"
               claylib/wrap::get-image-alpha-border)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::result
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::threshold :float))

(declaim (inline claylib/wrap::get-image-color))

(cffi:defcfun ("__claw__GetImageColor" claylib/wrap::get-image-color)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::get-key-pressed))

(cffi:defcfun ("GetKeyPressed" claylib/wrap::get-key-pressed) :int)

(declaim (inline claylib/wrap::get-mesh-bounding-box))

(cffi:defcfun ("__claw__GetMeshBoundingBox"
               claylib/wrap::get-mesh-bounding-box)
              (:pointer claylib/wrap::bounding-box)
              (claylib/wrap::result
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::get-model-bounding-box))

(cffi:defcfun ("__claw__GetModelBoundingBox"
               claylib/wrap::get-model-bounding-box)
              (:pointer claylib/wrap::bounding-box)
              (claylib/wrap::result
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::model (:pointer claylib/wrap::model)))

(declaim (inline claylib/wrap::get-monitor-count))

(cffi:defcfun ("GetMonitorCount" claylib/wrap::get-monitor-count)
              :int)

(declaim (inline claylib/wrap::get-monitor-height))

(cffi:defcfun ("GetMonitorHeight" claylib/wrap::get-monitor-height)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-name))

(cffi:defcfun ("GetMonitorName" claylib/wrap::get-monitor-name)
              :string
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-physical-height))

(cffi:defcfun ("GetMonitorPhysicalHeight"
               claylib/wrap::get-monitor-physical-height)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-physical-width))

(cffi:defcfun ("GetMonitorPhysicalWidth"
               claylib/wrap::get-monitor-physical-width)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-position))

(cffi:defcfun ("__claw__GetMonitorPosition"
               claylib/wrap::get-monitor-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-refresh-rate))

(cffi:defcfun ("GetMonitorRefreshRate"
               claylib/wrap::get-monitor-refresh-rate)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-width))

(cffi:defcfun ("GetMonitorWidth" claylib/wrap::get-monitor-width)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-mouse-delta))

(cffi:defcfun ("__claw__GetMouseDelta" claylib/wrap::get-mouse-delta)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-mouse-position))

(cffi:defcfun ("__claw__GetMousePosition"
               claylib/wrap::get-mouse-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-mouse-ray))

(cffi:defcfun ("__claw__GetMouseRay" claylib/wrap::get-mouse-ray)
              (:pointer claylib/wrap::ray)
              (claylib/wrap::result (:pointer claylib/wrap::ray))
              (claylib/wrap::mouse-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-mouse-wheel-move))

(cffi:defcfun ("GetMouseWheelMove"
               claylib/wrap::get-mouse-wheel-move)
              :float)

(declaim (inline claylib/wrap::get-mouse-wheel-move-v))

(cffi:defcfun ("__claw__GetMouseWheelMoveV"
               claylib/wrap::get-mouse-wheel-move-v)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-mouse-x))

(cffi:defcfun ("GetMouseX" claylib/wrap::get-mouse-x) :int)

(declaim (inline claylib/wrap::get-mouse-y))

(cffi:defcfun ("GetMouseY" claylib/wrap::get-mouse-y) :int)

(cffi:defcstruct (claylib/wrap::music :size 36)
                 (claylib/wrap::stream claylib/wrap::audio-stream
                  :offset 0)
                 (claylib/wrap::frame-count :unsigned-int :offset 20)
                 (claylib/wrap::looping :bool :offset 24)
                 (claylib/wrap::ctx-type :int :offset 28)
                 (claylib/wrap::ctx-data (:pointer :void) :offset 32))

(cffi:defctype claylib/wrap::music (:struct claylib/wrap::music))

(declaim (inline claylib/wrap::get-music-time-length))

(cffi:defcfun ("__claw__GetMusicTimeLength"
               claylib/wrap::get-music-time-length)
              :float
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::get-music-time-played))

(cffi:defcfun ("__claw__GetMusicTimePlayed"
               claylib/wrap::get-music-time-played)
              :float
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::get-pixel-color))

(cffi:defcfun ("__claw__GetPixelColor" claylib/wrap::get-pixel-color)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::src-ptr (:pointer :void))
              (claylib/wrap::format :int))

(declaim (inline claylib/wrap::get-pixel-data-size))

(cffi:defcfun ("GetPixelDataSize" claylib/wrap::get-pixel-data-size)
              :int
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::format :int))

(declaim (inline claylib/wrap::get-prev-directory-path))

(cffi:defcfun ("GetPrevDirectoryPath"
               claylib/wrap::get-prev-directory-path)
              :string
              (claylib/wrap::dir-path :string))

(declaim (inline claylib/wrap::get-random-value))

(cffi:defcfun ("GetRandomValue" claylib/wrap::get-random-value)
              :int
              (claylib/wrap::min :int)
              (claylib/wrap::max :int))

(cffi:defcstruct (claylib/wrap::ray-collision :size 32)
                 (claylib/wrap::hit :bool :offset 0)
                 (claylib/wrap::distance :float :offset 4)
                 (claylib/wrap::point claylib/wrap::vector3 :offset
                  8)
                 (claylib/wrap::normal claylib/wrap::vector3 :offset
                  20))

(cffi:defctype claylib/wrap::ray-collision
               (:struct claylib/wrap::ray-collision))

(declaim (inline claylib/wrap::get-ray-collision-box))

(cffi:defcfun ("__claw__GetRayCollisionBox"
               claylib/wrap::get-ray-collision-box)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::result
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::box
               (:pointer claylib/wrap::bounding-box)))

(declaim (inline claylib/wrap::get-ray-collision-mesh))

(cffi:defcfun ("__claw__GetRayCollisionMesh"
               claylib/wrap::get-ray-collision-mesh)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::result
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::transform
               (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::get-ray-collision-quad))

(cffi:defcfun ("__claw__GetRayCollisionQuad"
               claylib/wrap::get-ray-collision-quad)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::result
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p3 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p4 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::get-ray-collision-sphere))

(cffi:defcfun ("__claw__GetRayCollisionSphere"
               claylib/wrap::get-ray-collision-sphere)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::result
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::center (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::get-ray-collision-triangle))

(cffi:defcfun ("__claw__GetRayCollisionTriangle"
               claylib/wrap::get-ray-collision-triangle)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::result
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p3 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::get-render-height))

(cffi:defcfun ("GetRenderHeight" claylib/wrap::get-render-height)
              :int)

(declaim (inline claylib/wrap::get-render-width))

(cffi:defcfun ("GetRenderWidth" claylib/wrap::get-render-width) :int)

(declaim (inline claylib/wrap::get-screen-height))

(cffi:defcfun ("GetScreenHeight" claylib/wrap::get-screen-height)
              :int)

(declaim (inline claylib/wrap::get-screen-to-world-2d))

(cffi:defcfun ("__claw__GetScreenToWorld2D"
               claylib/wrap::get-screen-to-world-2d)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera-2d)))

(declaim (inline claylib/wrap::get-screen-width))

(cffi:defcfun ("GetScreenWidth" claylib/wrap::get-screen-width) :int)

(declaim (inline claylib/wrap::get-shader-location))

(cffi:defcfun ("__claw__GetShaderLocation"
               claylib/wrap::get-shader-location)
              :int
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::uniform-name :string))

(declaim (inline claylib/wrap::get-shader-location-attrib))

(cffi:defcfun ("__claw__GetShaderLocationAttrib"
               claylib/wrap::get-shader-location-attrib)
              :int
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::attrib-name :string))

(declaim (inline claylib/wrap::get-text-lines))

(cffi:defcfun ("GetTextLines" claylib/wrap::get-text-lines)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::count (:pointer :int)))

(declaim (inline claylib/wrap::get-time))

(cffi:defcfun ("GetTime" claylib/wrap::get-time) :double)

(declaim (inline claylib/wrap::get-touch-point-count))

(cffi:defcfun ("GetTouchPointCount"
               claylib/wrap::get-touch-point-count)
              :int)

(declaim (inline claylib/wrap::get-touch-point-id))

(cffi:defcfun ("GetTouchPointId" claylib/wrap::get-touch-point-id)
              :int
              (claylib/wrap::index :int))

(declaim (inline claylib/wrap::get-touch-position))

(cffi:defcfun ("__claw__GetTouchPosition"
               claylib/wrap::get-touch-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::index :int))

(declaim (inline claylib/wrap::get-touch-x))

(cffi:defcfun ("GetTouchX" claylib/wrap::get-touch-x) :int)

(declaim (inline claylib/wrap::get-touch-y))

(cffi:defcfun ("GetTouchY" claylib/wrap::get-touch-y) :int)

(declaim (inline claylib/wrap::get-window-handle))

(cffi:defcfun ("GetWindowHandle" claylib/wrap::get-window-handle)
              (:pointer :void))

(declaim (inline claylib/wrap::get-window-position))

(cffi:defcfun ("__claw__GetWindowPosition"
               claylib/wrap::get-window-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-window-scale-dpi))

(cffi:defcfun ("__claw__GetWindowScaleDPI"
               claylib/wrap::get-window-scale-dpi)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-working-directory))

(cffi:defcfun ("GetWorkingDirectory"
               claylib/wrap::get-working-directory)
              :string)

(declaim (inline claylib/wrap::get-world-to-screen))

(cffi:defcfun ("__claw__GetWorldToScreen"
               claylib/wrap::get-world-to-screen)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-world-to-screen-2d))

(cffi:defcfun ("__claw__GetWorldToScreen2D"
               claylib/wrap::get-world-to-screen-2d)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera-2d)))

(declaim (inline claylib/wrap::get-world-to-screen-ex))

(cffi:defcfun ("__claw__GetWorldToScreenEx"
               claylib/wrap::get-world-to-screen-ex)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::gui-button))

(cffi:defcfun ("__claw__GuiButton" claylib/wrap::gui-button)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-check-box))

(cffi:defcfun ("__claw__GuiCheckBox" claylib/wrap::gui-check-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::checked :bool))

(declaim (inline claylib/wrap::gui-color-bar-alpha))

(cffi:defcfun ("__claw__GuiColorBarAlpha"
               claylib/wrap::gui-color-bar-alpha)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::gui-color-bar-hue))

(cffi:defcfun ("__claw__GuiColorBarHue"
               claylib/wrap::gui-color-bar-hue)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::value :float))

(declaim (inline claylib/wrap::gui-color-panel))

(cffi:defcfun ("__claw__GuiColorPanel" claylib/wrap::gui-color-panel)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gui-color-picker))

(cffi:defcfun ("__claw__GuiColorPicker"
               claylib/wrap::gui-color-picker)
              (:pointer claylib/wrap::color)
              (claylib/wrap::result (:pointer claylib/wrap::color))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gui-combo-box))

(cffi:defcfun ("__claw__GuiComboBox" claylib/wrap::gui-combo-box)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-disable))

(cffi:defcfun ("GuiDisable" claylib/wrap::gui-disable) :void)

(declaim (inline claylib/wrap::gui-disable-tooltip))

(cffi:defcfun ("GuiDisableTooltip" claylib/wrap::gui-disable-tooltip)
              :void)

(declaim (inline claylib/wrap::gui-draw-icon))

(cffi:defcfun ("__claw__GuiDrawIcon" claylib/wrap::gui-draw-icon)
              :void
              (claylib/wrap::icon-id :int)
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::pixel-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gui-dropdown-box))

(cffi:defcfun ("__claw__GuiDropdownBox"
               claylib/wrap::gui-dropdown-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active (:pointer :int))
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-dummy-rec))

(cffi:defcfun ("__claw__GuiDummyRec" claylib/wrap::gui-dummy-rec)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-enable))

(cffi:defcfun ("GuiEnable" claylib/wrap::gui-enable) :void)

(declaim (inline claylib/wrap::gui-enable-tooltip))

(cffi:defcfun ("GuiEnableTooltip" claylib/wrap::gui-enable-tooltip)
              :void)

(declaim (inline claylib/wrap::gui-fade))

(cffi:defcfun ("GuiFade" claylib/wrap::gui-fade)
              :void
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::gui-get-font))

(cffi:defcfun ("__claw__GuiGetFont" claylib/wrap::gui-get-font)
              (:pointer claylib/wrap::font)
              (claylib/wrap::result (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::gui-get-icons))

(cffi:defcfun ("GuiGetIcons" claylib/wrap::gui-get-icons)
              (:pointer :unsigned-int))

(declaim (inline claylib/wrap::gui-get-state))

(cffi:defcfun ("GuiGetState" claylib/wrap::gui-get-state) :int)

(declaim (inline claylib/wrap::gui-get-style))

(cffi:defcfun ("GuiGetStyle" claylib/wrap::gui-get-style)
              :int
              (claylib/wrap::control :int)
              (claylib/wrap::property :int))

(declaim (inline claylib/wrap::gui-grid))

(cffi:defcfun ("__claw__GuiGrid" claylib/wrap::gui-grid)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::spacing :float)
              (claylib/wrap::subdivs :int))

(declaim (inline claylib/wrap::gui-group-box))

(cffi:defcfun ("__claw__GuiGroupBox" claylib/wrap::gui-group-box)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-icon-text))

(cffi:defcfun ("GuiIconText" claylib/wrap::gui-icon-text)
              :string
              (claylib/wrap::icon-id :int)
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-is-locked))

(cffi:defcfun ("GuiIsLocked" claylib/wrap::gui-is-locked) :bool)

(declaim (inline claylib/wrap::gui-label))

(cffi:defcfun ("__claw__GuiLabel" claylib/wrap::gui-label)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-label-button))

(cffi:defcfun ("__claw__GuiLabelButton"
               claylib/wrap::gui-label-button)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-line))

(cffi:defcfun ("__claw__GuiLine" claylib/wrap::gui-line)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-list-view))

(cffi:defcfun ("__claw__GuiListView" claylib/wrap::gui-list-view)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::scroll-index (:pointer :int))
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-list-view-ex))

(cffi:defcfun ("__claw__GuiListViewEx"
               claylib/wrap::gui-list-view-ex)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::count :int)
              (claylib/wrap::focus (:pointer :int))
              (claylib/wrap::scroll-index (:pointer :int))
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-load-icons))

(cffi:defcfun ("GuiLoadIcons" claylib/wrap::gui-load-icons)
              :string
              (claylib/wrap::file-name :string)
              (claylib/wrap::load-icons-name :bool))

(declaim (inline claylib/wrap::gui-load-style))

(cffi:defcfun ("GuiLoadStyle" claylib/wrap::gui-load-style)
              :void
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::gui-load-style-default))

(cffi:defcfun ("GuiLoadStyleDefault"
               claylib/wrap::gui-load-style-default)
              :void)

(declaim (inline claylib/wrap::gui-lock))

(cffi:defcfun ("GuiLock" claylib/wrap::gui-lock) :void)

(declaim (inline claylib/wrap::gui-message-box))

(cffi:defcfun ("__claw__GuiMessageBox" claylib/wrap::gui-message-box)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::title :string)
              (claylib/wrap::message :string)
              (claylib/wrap::buttons :string))

(declaim (inline claylib/wrap::gui-panel))

(cffi:defcfun ("__claw__GuiPanel" claylib/wrap::gui-panel)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-progress-bar))

(cffi:defcfun ("__claw__GuiProgressBar"
               claylib/wrap::gui-progress-bar)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float))

(declaim (inline claylib/wrap::gui-scroll-panel))

(cffi:defcfun ("__claw__GuiScrollPanel"
               claylib/wrap::gui-scroll-panel)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::result
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::content
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::scroll (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::gui-set-font))

(cffi:defcfun ("__claw__GuiSetFont" claylib/wrap::gui-set-font)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::gui-set-icon-scale))

(cffi:defcfun ("GuiSetIconScale" claylib/wrap::gui-set-icon-scale)
              :void
              (claylib/wrap::scale :int))

(declaim (inline claylib/wrap::gui-set-state))

(cffi:defcfun ("GuiSetState" claylib/wrap::gui-set-state)
              :void
              (claylib/wrap::state :int))

(declaim (inline claylib/wrap::gui-set-style))

(cffi:defcfun ("GuiSetStyle" claylib/wrap::gui-set-style)
              :void
              (claylib/wrap::control :int)
              (claylib/wrap::property :int)
              (claylib/wrap::value :int))

(declaim (inline claylib/wrap::gui-set-tooltip))

(cffi:defcfun ("GuiSetTooltip" claylib/wrap::gui-set-tooltip)
              :void
              (claylib/wrap::tooltip :string))

(declaim (inline claylib/wrap::gui-slider))

(cffi:defcfun ("__claw__GuiSlider" claylib/wrap::gui-slider)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float))

(declaim (inline claylib/wrap::gui-slider-bar))

(cffi:defcfun ("__claw__GuiSliderBar" claylib/wrap::gui-slider-bar)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float))

(declaim (inline claylib/wrap::gui-slider-pro))

(cffi:defcfun ("__claw__GuiSliderPro" claylib/wrap::gui-slider-pro)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float)
              (claylib/wrap::slider-width :int))

(declaim (inline claylib/wrap::gui-spinner))

(cffi:defcfun ("__claw__GuiSpinner" claylib/wrap::gui-spinner)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::value (:pointer :int))
              (claylib/wrap::min-value :int)
              (claylib/wrap::max-value :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-status-bar))

(cffi:defcfun ("__claw__GuiStatusBar" claylib/wrap::gui-status-bar)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-tab-bar))

(cffi:defcfun ("__claw__GuiTabBar" claylib/wrap::gui-tab-bar)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::count :int)
              (claylib/wrap::active (:pointer :int)))

(declaim (inline claylib/wrap::gui-text-box))

(cffi:defcfun ("__claw__GuiTextBox" claylib/wrap::gui-text-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::text-size :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-text-input-box))

(cffi:defcfun ("__claw__GuiTextInputBox"
               claylib/wrap::gui-text-input-box)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::title :string)
              (claylib/wrap::message :string)
              (claylib/wrap::buttons :string)
              (claylib/wrap::text :string)
              (claylib/wrap::text-max-size :int)
              (claylib/wrap::secret-view-active (:pointer :int)))

(declaim (inline claylib/wrap::gui-toggle))

(cffi:defcfun ("__claw__GuiToggle" claylib/wrap::gui-toggle)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active :bool))

(declaim (inline claylib/wrap::gui-toggle-group))

(cffi:defcfun ("__claw__GuiToggleGroup"
               claylib/wrap::gui-toggle-group)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-unlock))

(cffi:defcfun ("GuiUnlock" claylib/wrap::gui-unlock) :void)

(declaim (inline claylib/wrap::gui-value-box))

(cffi:defcfun ("__claw__GuiValueBox" claylib/wrap::gui-value-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::value (:pointer :int))
              (claylib/wrap::min-value :int)
              (claylib/wrap::max-value :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-window-box))

(cffi:defcfun ("__claw__GuiWindowBox" claylib/wrap::gui-window-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::title :string))

(declaim (inline claylib/wrap::hide-cursor))

(cffi:defcfun ("HideCursor" claylib/wrap::hide-cursor) :void)

(declaim (inline claylib/wrap::image-alpha-clear))

(cffi:defcfun ("__claw__ImageAlphaClear"
               claylib/wrap::image-alpha-clear)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::threshold :float))

(declaim (inline claylib/wrap::image-alpha-crop))

(cffi:defcfun ("ImageAlphaCrop" claylib/wrap::image-alpha-crop)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::threshold :float))

(declaim (inline claylib/wrap::image-alpha-mask))

(cffi:defcfun ("__claw__ImageAlphaMask"
               claylib/wrap::image-alpha-mask)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::alpha-mask
               (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-alpha-premultiply))

(cffi:defcfun ("ImageAlphaPremultiply"
               claylib/wrap::image-alpha-premultiply)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-blur-gaussian))

(cffi:defcfun ("ImageBlurGaussian" claylib/wrap::image-blur-gaussian)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::blur-size :int))

(declaim (inline claylib/wrap::image-clear-background))

(cffi:defcfun ("__claw__ImageClearBackground"
               claylib/wrap::image-clear-background)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-color-brightness))

(cffi:defcfun ("ImageColorBrightness"
               claylib/wrap::image-color-brightness)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::brightness :int))

(declaim (inline claylib/wrap::image-color-contrast))

(cffi:defcfun ("ImageColorContrast"
               claylib/wrap::image-color-contrast)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::contrast :float))

(declaim (inline claylib/wrap::image-color-grayscale))

(cffi:defcfun ("ImageColorGrayscale"
               claylib/wrap::image-color-grayscale)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-color-invert))

(cffi:defcfun ("ImageColorInvert" claylib/wrap::image-color-invert)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-color-replace))

(cffi:defcfun ("__claw__ImageColorReplace"
               claylib/wrap::image-color-replace)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::replace (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-color-tint))

(cffi:defcfun ("__claw__ImageColorTint"
               claylib/wrap::image-color-tint)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-copy))

(cffi:defcfun ("__claw__ImageCopy" claylib/wrap::image-copy)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-crop))

(cffi:defcfun ("__claw__ImageCrop" claylib/wrap::image-crop)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::crop (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::image-dither))

(cffi:defcfun ("ImageDither" claylib/wrap::image-dither)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::r-bpp :int)
              (claylib/wrap::g-bpp :int)
              (claylib/wrap::b-bpp :int)
              (claylib/wrap::a-bpp :int))

(declaim (inline claylib/wrap::image-draw))

(cffi:defcfun ("__claw__ImageDraw" claylib/wrap::image-draw)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::src (:pointer claylib/wrap::image))
              (claylib/wrap::src-rec
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::dst-rec
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-circle))

(cffi:defcfun ("__claw__ImageDrawCircle"
               claylib/wrap::image-draw-circle)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-circle-lines))

(cffi:defcfun ("__claw__ImageDrawCircleLines"
               claylib/wrap::image-draw-circle-lines)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-circle-lines-v))

(cffi:defcfun ("__claw__ImageDrawCircleLinesV"
               claylib/wrap::image-draw-circle-lines-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-circle-v))

(cffi:defcfun ("__claw__ImageDrawCircleV"
               claylib/wrap::image-draw-circle-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-line))

(cffi:defcfun ("__claw__ImageDrawLine" claylib/wrap::image-draw-line)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::start-pos-x :int)
              (claylib/wrap::start-pos-y :int)
              (claylib/wrap::end-pos-x :int)
              (claylib/wrap::end-pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-line-v))

(cffi:defcfun ("__claw__ImageDrawLineV"
               claylib/wrap::image-draw-line-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::start (:pointer claylib/wrap::vector2))
              (claylib/wrap::end (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-pixel))

(cffi:defcfun ("__claw__ImageDrawPixel"
               claylib/wrap::image-draw-pixel)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-pixel-v))

(cffi:defcfun ("__claw__ImageDrawPixelV"
               claylib/wrap::image-draw-pixel-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle))

(cffi:defcfun ("__claw__ImageDrawRectangle"
               claylib/wrap::image-draw-rectangle)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle-lines))

(cffi:defcfun ("__claw__ImageDrawRectangleLines"
               claylib/wrap::image-draw-rectangle-lines)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::thick :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle-rec))

(cffi:defcfun ("__claw__ImageDrawRectangleRec"
               claylib/wrap::image-draw-rectangle-rec)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle-v))

(cffi:defcfun ("__claw__ImageDrawRectangleV"
               claylib/wrap::image-draw-rectangle-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-text))

(cffi:defcfun ("__claw__ImageDrawText" claylib/wrap::image-draw-text)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::text :string)
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-text-ex))

(cffi:defcfun ("__claw__ImageDrawTextEx"
               claylib/wrap::image-draw-text-ex)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-flip-horizontal))

(cffi:defcfun ("ImageFlipHorizontal"
               claylib/wrap::image-flip-horizontal)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-flip-vertical))

(cffi:defcfun ("ImageFlipVertical" claylib/wrap::image-flip-vertical)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-format))

(cffi:defcfun ("ImageFormat" claylib/wrap::image-format)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-format :int))

(declaim (inline claylib/wrap::image-from-image))

(cffi:defcfun ("__claw__ImageFromImage"
               claylib/wrap::image-from-image)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::image-mipmaps))

(cffi:defcfun ("ImageMipmaps" claylib/wrap::image-mipmaps)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-resize))

(cffi:defcfun ("ImageResize" claylib/wrap::image-resize)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-width :int)
              (claylib/wrap::new-height :int))

(declaim (inline claylib/wrap::image-resize-canvas))

(cffi:defcfun ("__claw__ImageResizeCanvas"
               claylib/wrap::image-resize-canvas)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-width :int)
              (claylib/wrap::new-height :int)
              (claylib/wrap::offset-x :int)
              (claylib/wrap::offset-y :int)
              (claylib/wrap::fill (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-resize-nn))

(cffi:defcfun ("ImageResizeNN" claylib/wrap::image-resize-nn)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-width :int)
              (claylib/wrap::new-height :int))

(declaim (inline claylib/wrap::image-rotate-ccw))

(cffi:defcfun ("ImageRotateCCW" claylib/wrap::image-rotate-ccw)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-rotate-cw))

(cffi:defcfun ("ImageRotateCW" claylib/wrap::image-rotate-cw)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-text))

(cffi:defcfun ("__claw__ImageText" claylib/wrap::image-text)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-text-ex))

(cffi:defcfun ("__claw__ImageTextEx" claylib/wrap::image-text-ex)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-to-pot))

(cffi:defcfun ("__claw__ImageToPOT" claylib/wrap::image-to-pot)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::fill (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::init-audio-device))

(cffi:defcfun ("InitAudioDevice" claylib/wrap::init-audio-device)
              :void)

(declaim (inline claylib/wrap::init-window))

(cffi:defcfun ("InitWindow" claylib/wrap::init-window)
              :void
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::title :string))

(declaim (inline claylib/wrap::is-audio-device-ready))

(cffi:defcfun ("IsAudioDeviceReady"
               claylib/wrap::is-audio-device-ready)
              :bool)

(declaim (inline claylib/wrap::is-audio-stream-playing))

(cffi:defcfun ("__claw__IsAudioStreamPlaying"
               claylib/wrap::is-audio-stream-playing)
              :bool
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::is-audio-stream-processed))

(cffi:defcfun ("__claw__IsAudioStreamProcessed"
               claylib/wrap::is-audio-stream-processed)
              :bool
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::is-audio-stream-ready))

(cffi:defcfun ("__claw__IsAudioStreamReady"
               claylib/wrap::is-audio-stream-ready)
              :bool
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::is-cursor-hidden))

(cffi:defcfun ("IsCursorHidden" claylib/wrap::is-cursor-hidden) :bool)

(declaim (inline claylib/wrap::is-cursor-on-screen))

(cffi:defcfun ("IsCursorOnScreen" claylib/wrap::is-cursor-on-screen)
              :bool)

(declaim (inline claylib/wrap::is-file-dropped))

(cffi:defcfun ("IsFileDropped" claylib/wrap::is-file-dropped) :bool)

(declaim (inline claylib/wrap::is-file-extension))

(cffi:defcfun ("IsFileExtension" claylib/wrap::is-file-extension)
              :bool
              (claylib/wrap::file-name :string)
              (claylib/wrap::ext :string))

(declaim (inline claylib/wrap::is-font-ready))

(cffi:defcfun ("__claw__IsFontReady" claylib/wrap::is-font-ready)
              :bool
              (claylib/wrap::font (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::is-gamepad-available))

(cffi:defcfun ("IsGamepadAvailable"
               claylib/wrap::is-gamepad-available)
              :bool
              (claylib/wrap::gamepad :int))

(declaim (inline claylib/wrap::is-gamepad-button-down))

(cffi:defcfun ("IsGamepadButtonDown"
               claylib/wrap::is-gamepad-button-down)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gamepad-button-pressed))

(cffi:defcfun ("IsGamepadButtonPressed"
               claylib/wrap::is-gamepad-button-pressed)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gamepad-button-released))

(cffi:defcfun ("IsGamepadButtonReleased"
               claylib/wrap::is-gamepad-button-released)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gamepad-button-up))

(cffi:defcfun ("IsGamepadButtonUp"
               claylib/wrap::is-gamepad-button-up)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gesture-detected))

(cffi:defcfun ("IsGestureDetected" claylib/wrap::is-gesture-detected)
              :bool
              (claylib/wrap::gesture :int))

(declaim (inline claylib/wrap::is-image-ready))

(cffi:defcfun ("__claw__IsImageReady" claylib/wrap::is-image-ready)
              :bool
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::is-key-down))

(cffi:defcfun ("IsKeyDown" claylib/wrap::is-key-down)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-key-pressed))

(cffi:defcfun ("IsKeyPressed" claylib/wrap::is-key-pressed)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-key-released))

(cffi:defcfun ("IsKeyReleased" claylib/wrap::is-key-released)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-key-up))

(cffi:defcfun ("IsKeyUp" claylib/wrap::is-key-up)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-material-ready))

(cffi:defcfun ("__claw__IsMaterialReady"
               claylib/wrap::is-material-ready)
              :bool
              (claylib/wrap::material
               (:pointer claylib/wrap::material)))

(cffi:defcstruct (claylib/wrap::model-animation :size 16)
                 (claylib/wrap::bone-count :int :offset 0)
                 (claylib/wrap::frame-count :int :offset 4)
                 (claylib/wrap::bones
                  (:pointer claylib/wrap::bone-info) :offset 8)
                 (claylib/wrap::frame-poses
                  (:pointer (:pointer claylib/wrap::transform))
                  :offset 12))

(cffi:defctype claylib/wrap::model-animation
               (:struct claylib/wrap::model-animation))

(declaim (inline claylib/wrap::is-model-animation-valid))

(cffi:defcfun ("__claw__IsModelAnimationValid"
               claylib/wrap::is-model-animation-valid)
              :bool
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::anim
               (:pointer claylib/wrap::model-animation)))

(declaim (inline claylib/wrap::is-model-ready))

(cffi:defcfun ("__claw__IsModelReady" claylib/wrap::is-model-ready)
              :bool
              (claylib/wrap::model (:pointer claylib/wrap::model)))

(declaim (inline claylib/wrap::is-mouse-button-down))

(cffi:defcfun ("IsMouseButtonDown"
               claylib/wrap::is-mouse-button-down)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-mouse-button-pressed))

(cffi:defcfun ("IsMouseButtonPressed"
               claylib/wrap::is-mouse-button-pressed)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-mouse-button-released))

(cffi:defcfun ("IsMouseButtonReleased"
               claylib/wrap::is-mouse-button-released)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-mouse-button-up))

(cffi:defcfun ("IsMouseButtonUp" claylib/wrap::is-mouse-button-up)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-music-ready))

(cffi:defcfun ("__claw__IsMusicReady" claylib/wrap::is-music-ready)
              :bool
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::is-music-stream-playing))

(cffi:defcfun ("__claw__IsMusicStreamPlaying"
               claylib/wrap::is-music-stream-playing)
              :bool
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::is-path-file))

(cffi:defcfun ("IsPathFile" claylib/wrap::is-path-file)
              :bool
              (claylib/wrap::path :string))

(declaim (inline claylib/wrap::is-render-texture-ready))

(cffi:defcfun ("__claw__IsRenderTextureReady"
               claylib/wrap::is-render-texture-ready)
              :bool
              (claylib/wrap::target
               (:pointer claylib/wrap::render-texture-2d)))

(declaim (inline claylib/wrap::is-shader-ready))

(cffi:defcfun ("__claw__IsShaderReady" claylib/wrap::is-shader-ready)
              :bool
              (claylib/wrap::shader (:pointer claylib/wrap::shader)))

(cffi:defcstruct (claylib/wrap::sound :size 24)
                 (claylib/wrap::stream claylib/wrap::audio-stream
                  :offset 0)
                 (claylib/wrap::frame-count :unsigned-int :offset 20))

(cffi:defctype claylib/wrap::sound (:struct claylib/wrap::sound))

(declaim (inline claylib/wrap::is-sound-playing))

(cffi:defcfun ("__claw__IsSoundPlaying"
               claylib/wrap::is-sound-playing)
              :bool
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::is-sound-ready))

(cffi:defcfun ("__claw__IsSoundReady" claylib/wrap::is-sound-ready)
              :bool
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::is-texture-ready))

(cffi:defcfun ("__claw__IsTextureReady"
               claylib/wrap::is-texture-ready)
              :bool
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d)))

(declaim (inline claylib/wrap::is-wave-ready))

(cffi:defcfun ("__claw__IsWaveReady" claylib/wrap::is-wave-ready)
              :bool
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::is-window-focused))

(cffi:defcfun ("IsWindowFocused" claylib/wrap::is-window-focused)
              :bool)

(declaim (inline claylib/wrap::is-window-fullscreen))

(cffi:defcfun ("IsWindowFullscreen"
               claylib/wrap::is-window-fullscreen)
              :bool)

(declaim (inline claylib/wrap::is-window-hidden))

(cffi:defcfun ("IsWindowHidden" claylib/wrap::is-window-hidden) :bool)

(declaim (inline claylib/wrap::is-window-maximized))

(cffi:defcfun ("IsWindowMaximized" claylib/wrap::is-window-maximized)
              :bool)

(declaim (inline claylib/wrap::is-window-minimized))

(cffi:defcfun ("IsWindowMinimized" claylib/wrap::is-window-minimized)
              :bool)

(declaim (inline claylib/wrap::is-window-ready))

(cffi:defcfun ("IsWindowReady" claylib/wrap::is-window-ready) :bool)

(declaim (inline claylib/wrap::is-window-resized))

(cffi:defcfun ("IsWindowResized" claylib/wrap::is-window-resized)
              :bool)

(declaim (inline claylib/wrap::is-window-state))

(cffi:defcfun ("IsWindowState" claylib/wrap::is-window-state)
              :bool
              (claylib/wrap::flag :unsigned-int))

(declaim (inline claylib/wrap::lerp))

(cffi:defcfun ("__claw__Lerp" claylib/wrap::lerp)
              :float
              (claylib/wrap::start :float)
              (claylib/wrap::end :float)
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::load-audio-stream))

(cffi:defcfun ("__claw__LoadAudioStream"
               claylib/wrap::load-audio-stream)
              (:pointer claylib/wrap::audio-stream)
              (claylib/wrap::result
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::sample-rate :unsigned-int)
              (claylib/wrap::sample-size :unsigned-int)
              (claylib/wrap::channels :unsigned-int))

(declaim (inline claylib/wrap::load-codepoints))

(cffi:defcfun ("LoadCodepoints" claylib/wrap::load-codepoints)
              (:pointer :int)
              (claylib/wrap::text :string)
              (claylib/wrap::count (:pointer :int)))

(cffi:defcstruct (claylib/wrap::file-path-list :size 12)
                 (claylib/wrap::capacity :unsigned-int :offset 0)
                 (claylib/wrap::count :unsigned-int :offset 4)
                 (claylib/wrap::paths :string :offset 8))

(cffi:defctype claylib/wrap::file-path-list
               (:struct claylib/wrap::file-path-list))

(declaim (inline claylib/wrap::load-directory-files))

(cffi:defcfun ("__claw__LoadDirectoryFiles"
               claylib/wrap::load-directory-files)
              (:pointer claylib/wrap::file-path-list)
              (claylib/wrap::result
               (:pointer claylib/wrap::file-path-list))
              (claylib/wrap::dir-path :string))

(declaim (inline claylib/wrap::load-directory-files-ex))

(cffi:defcfun ("__claw__LoadDirectoryFilesEx"
               claylib/wrap::load-directory-files-ex)
              (:pointer claylib/wrap::file-path-list)
              (claylib/wrap::result
               (:pointer claylib/wrap::file-path-list))
              (claylib/wrap::base-path :string)
              (claylib/wrap::filter :string)
              (claylib/wrap::scan-subdirs :bool))

(declaim (inline claylib/wrap::load-dropped-files))

(cffi:defcfun ("__claw__LoadDroppedFiles"
               claylib/wrap::load-dropped-files)
              (:pointer claylib/wrap::file-path-list)
              (claylib/wrap::result
               (:pointer claylib/wrap::file-path-list)))

(declaim (inline claylib/wrap::load-file-data))

(cffi:defcfun ("LoadFileData" claylib/wrap::load-file-data)
              (:pointer :unsigned-char)
              (claylib/wrap::file-name :string)
              (claylib/wrap::bytes-read (:pointer :unsigned-int)))

(declaim (inline claylib/wrap::load-file-text))

(cffi:defcfun ("LoadFileText" claylib/wrap::load-file-text)
              :string
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-font))

(cffi:defcfun ("__claw__LoadFont" claylib/wrap::load-font)
              (:pointer claylib/wrap::font)
              (claylib/wrap::result (:pointer claylib/wrap::font))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-font-data))

(cffi:defcfun ("LoadFontData" claylib/wrap::load-font-data)
              (:pointer claylib/wrap::glyph-info)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::font-chars (:pointer :int))
              (claylib/wrap::glyph-count :int)
              (claylib/wrap::type :int))

(declaim (inline claylib/wrap::load-font-ex))

(cffi:defcfun ("__claw__LoadFontEx" claylib/wrap::load-font-ex)
              (:pointer claylib/wrap::font)
              (claylib/wrap::result (:pointer claylib/wrap::font))
              (claylib/wrap::file-name :string)
              (claylib/wrap::font-size :int)
              (claylib/wrap::font-chars (:pointer :int))
              (claylib/wrap::glyph-count :int))

(declaim (inline claylib/wrap::load-font-from-image))

(cffi:defcfun ("__claw__LoadFontFromImage"
               claylib/wrap::load-font-from-image)
              (:pointer claylib/wrap::font)
              (claylib/wrap::result (:pointer claylib/wrap::font))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::key (:pointer claylib/wrap::color))
              (claylib/wrap::first-char :int))

(declaim (inline claylib/wrap::load-font-from-memory))

(cffi:defcfun ("__claw__LoadFontFromMemory"
               claylib/wrap::load-font-from-memory)
              (:pointer claylib/wrap::font)
              (claylib/wrap::result (:pointer claylib/wrap::font))
              (claylib/wrap::file-type :string)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::font-chars (:pointer :int))
              (claylib/wrap::glyph-count :int))

(declaim (inline claylib/wrap::load-image))

(cffi:defcfun ("__claw__LoadImage" claylib/wrap::load-image)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-image-anim))

(cffi:defcfun ("__claw__LoadImageAnim" claylib/wrap::load-image-anim)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string)
              (claylib/wrap::frames (:pointer :int)))

(declaim (inline claylib/wrap::load-image-colors))

(cffi:defcfun ("__claw__LoadImageColors"
               claylib/wrap::load-image-colors)
              (:pointer claylib/wrap::color)
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::load-image-from-memory))

(cffi:defcfun ("__claw__LoadImageFromMemory"
               claylib/wrap::load-image-from-memory)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::file-type :string)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int))

(declaim (inline claylib/wrap::load-image-from-screen))

(cffi:defcfun ("__claw__LoadImageFromScreen"
               claylib/wrap::load-image-from-screen)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::load-image-from-texture))

(cffi:defcfun ("__claw__LoadImageFromTexture"
               claylib/wrap::load-image-from-texture)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d)))

(declaim (inline claylib/wrap::load-image-palette))

(cffi:defcfun ("__claw__LoadImagePalette"
               claylib/wrap::load-image-palette)
              (:pointer claylib/wrap::color)
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::max-palette-size :int)
              (claylib/wrap::color-count (:pointer :int)))

(declaim (inline claylib/wrap::load-image-raw))

(cffi:defcfun ("__claw__LoadImageRaw" claylib/wrap::load-image-raw)
              (:pointer claylib/wrap::image)
              (claylib/wrap::result (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::format :int)
              (claylib/wrap::header-size :int))

(declaim (inline claylib/wrap::load-material-default))

(cffi:defcfun ("__claw__LoadMaterialDefault"
               claylib/wrap::load-material-default)
              (:pointer claylib/wrap::material)
              (claylib/wrap::result
               (:pointer claylib/wrap::material)))

(declaim (inline claylib/wrap::load-materials))

(cffi:defcfun ("LoadMaterials" claylib/wrap::load-materials)
              (:pointer claylib/wrap::material)
              (claylib/wrap::file-name :string)
              (claylib/wrap::material-count (:pointer :int)))

(declaim (inline claylib/wrap::load-model))

(cffi:defcfun ("__claw__LoadModel" claylib/wrap::load-model)
              (:pointer claylib/wrap::model)
              (claylib/wrap::result (:pointer claylib/wrap::model))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-model-animations))

(cffi:defcfun ("LoadModelAnimations"
               claylib/wrap::load-model-animations)
              (:pointer claylib/wrap::model-animation)
              (claylib/wrap::file-name :string)
              (claylib/wrap::anim-count (:pointer :unsigned-int)))

(declaim (inline claylib/wrap::load-model-from-mesh))

(cffi:defcfun ("__claw__LoadModelFromMesh"
               claylib/wrap::load-model-from-mesh)
              (:pointer claylib/wrap::model)
              (claylib/wrap::result (:pointer claylib/wrap::model))
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::load-music-stream))

(cffi:defcfun ("__claw__LoadMusicStream"
               claylib/wrap::load-music-stream)
              (:pointer claylib/wrap::music)
              (claylib/wrap::result (:pointer claylib/wrap::music))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-music-stream-from-memory))

(cffi:defcfun ("__claw__LoadMusicStreamFromMemory"
               claylib/wrap::load-music-stream-from-memory)
              (:pointer claylib/wrap::music)
              (claylib/wrap::result (:pointer claylib/wrap::music))
              (claylib/wrap::file-type :string)
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int))

(declaim (inline claylib/wrap::load-render-texture))

(cffi:defcfun ("__claw__LoadRenderTexture"
               claylib/wrap::load-render-texture)
              (:pointer claylib/wrap::render-texture-2d)
              (claylib/wrap::result
               (:pointer claylib/wrap::render-texture-2d))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::load-shader))

(cffi:defcfun ("__claw__LoadShader" claylib/wrap::load-shader)
              (:pointer claylib/wrap::shader)
              (claylib/wrap::result (:pointer claylib/wrap::shader))
              (claylib/wrap::vs-file-name :string)
              (claylib/wrap::fs-file-name :string))

(declaim (inline claylib/wrap::load-shader-from-memory))

(cffi:defcfun ("__claw__LoadShaderFromMemory"
               claylib/wrap::load-shader-from-memory)
              (:pointer claylib/wrap::shader)
              (claylib/wrap::result (:pointer claylib/wrap::shader))
              (claylib/wrap::vs-code :string)
              (claylib/wrap::fs-code :string))

(declaim (inline claylib/wrap::load-sound))

(cffi:defcfun ("__claw__LoadSound" claylib/wrap::load-sound)
              (:pointer claylib/wrap::sound)
              (claylib/wrap::result (:pointer claylib/wrap::sound))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-sound-from-wave))

(cffi:defcfun ("__claw__LoadSoundFromWave"
               claylib/wrap::load-sound-from-wave)
              (:pointer claylib/wrap::sound)
              (claylib/wrap::result (:pointer claylib/wrap::sound))
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::load-texture))

(cffi:defcfun ("__claw__LoadTexture" claylib/wrap::load-texture)
              (:pointer claylib/wrap::texture-2d)
              (claylib/wrap::result
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::file-name :string))

(cffi:defctype claylib/wrap::texture-cubemap
               (:struct claylib/wrap::texture))

(declaim (inline claylib/wrap::load-texture-cubemap))

(cffi:defcfun ("__claw__LoadTextureCubemap"
               claylib/wrap::load-texture-cubemap)
              (:pointer claylib/wrap::texture-cubemap)
              (claylib/wrap::result
               (:pointer claylib/wrap::texture-cubemap))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::layout :int))

(declaim (inline claylib/wrap::load-texture-from-image))

(cffi:defcfun ("__claw__LoadTextureFromImage"
               claylib/wrap::load-texture-from-image)
              (:pointer claylib/wrap::texture-2d)
              (claylib/wrap::result
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::load-utf8))

(cffi:defcfun ("LoadUTF8" claylib/wrap::load-utf8)
              :string
              (claylib/wrap::codepoints (:pointer :int))
              (claylib/wrap::length :int))

(cffi:defcstruct (claylib/wrap::vr-device-info :size 64)
                 (claylib/wrap::h-resolution :int :offset 0)
                 (claylib/wrap::v-resolution :int :offset 4)
                 (claylib/wrap::h-screen-size :float :offset 8)
                 (claylib/wrap::v-screen-size :float :offset 12)
                 (claylib/wrap::v-screen-center :float :offset 16)
                 (claylib/wrap::eye-to-screen-distance :float :offset
                  20)
                 (claylib/wrap::lens-separation-distance :float
                  :offset 24)
                 (claylib/wrap::interpupillary-distance :float
                  :offset 28)
                 (claylib/wrap::lens-distortion-values :float :count
                  4 :offset 32)
                 (claylib/wrap::chroma-ab-correction :float :count 4
                  :offset 48))

(cffi:defctype claylib/wrap::vr-device-info
               (:struct claylib/wrap::vr-device-info))

(declaim (inline claylib/wrap::load-vr-stereo-config))

(cffi:defcfun ("__claw__LoadVrStereoConfig"
               claylib/wrap::load-vr-stereo-config)
              (:pointer claylib/wrap::vr-stereo-config)
              (claylib/wrap::result
               (:pointer claylib/wrap::vr-stereo-config))
              (claylib/wrap::device
               (:pointer claylib/wrap::vr-device-info)))

(declaim (inline claylib/wrap::load-wave))

(cffi:defcfun ("__claw__LoadWave" claylib/wrap::load-wave)
              (:pointer claylib/wrap::wave)
              (claylib/wrap::result (:pointer claylib/wrap::wave))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-wave-from-memory))

(cffi:defcfun ("__claw__LoadWaveFromMemory"
               claylib/wrap::load-wave-from-memory)
              (:pointer claylib/wrap::wave)
              (claylib/wrap::result (:pointer claylib/wrap::wave))
              (claylib/wrap::file-type :string)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int))

(declaim (inline claylib/wrap::load-wave-samples))

(cffi:defcfun ("__claw__LoadWaveSamples"
               claylib/wrap::load-wave-samples)
              (:pointer :float)
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::matrix-add))

(cffi:defcfun ("__claw__MatrixAdd" claylib/wrap::matrix-add)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::left (:pointer claylib/wrap::matrix))
              (claylib/wrap::right (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-determinant))

(cffi:defcfun ("__claw__MatrixDeterminant"
               claylib/wrap::matrix-determinant)
              :float
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-frustum))

(cffi:defcfun ("__claw__MatrixFrustum" claylib/wrap::matrix-frustum)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::left :double)
              (claylib/wrap::right :double)
              (claylib/wrap::bottom :double)
              (claylib/wrap::top :double)
              (claylib/wrap::near :double)
              (claylib/wrap::far :double))

(declaim (inline claylib/wrap::matrix-identity))

(cffi:defcfun ("__claw__MatrixIdentity"
               claylib/wrap::matrix-identity)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-invert))

(cffi:defcfun ("__claw__MatrixInvert" claylib/wrap::matrix-invert)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-look-at))

(cffi:defcfun ("__claw__MatrixLookAt" claylib/wrap::matrix-look-at)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::eye (:pointer claylib/wrap::vector3))
              (claylib/wrap::target (:pointer claylib/wrap::vector3))
              (claylib/wrap::up (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::matrix-multiply))

(cffi:defcfun ("__claw__MatrixMultiply"
               claylib/wrap::matrix-multiply)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::left (:pointer claylib/wrap::matrix))
              (claylib/wrap::right (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-ortho))

(cffi:defcfun ("__claw__MatrixOrtho" claylib/wrap::matrix-ortho)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::left :double)
              (claylib/wrap::right :double)
              (claylib/wrap::bottom :double)
              (claylib/wrap::top :double)
              (claylib/wrap::near :double)
              (claylib/wrap::far :double))

(declaim (inline claylib/wrap::matrix-perspective))

(cffi:defcfun ("__claw__MatrixPerspective"
               claylib/wrap::matrix-perspective)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::fovy :double)
              (claylib/wrap::aspect :double)
              (claylib/wrap::near :double)
              (claylib/wrap::far :double))

(declaim (inline claylib/wrap::matrix-rotate))

(cffi:defcfun ("__claw__MatrixRotate" claylib/wrap::matrix-rotate)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::axis (:pointer claylib/wrap::vector3))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-x))

(cffi:defcfun ("__claw__MatrixRotateX" claylib/wrap::matrix-rotate-x)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-xyz))

(cffi:defcfun ("__claw__MatrixRotateXYZ"
               claylib/wrap::matrix-rotate-xyz)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::matrix-rotate-y))

(cffi:defcfun ("__claw__MatrixRotateY" claylib/wrap::matrix-rotate-y)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-z))

(cffi:defcfun ("__claw__MatrixRotateZ" claylib/wrap::matrix-rotate-z)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-zyx))

(cffi:defcfun ("__claw__MatrixRotateZYX"
               claylib/wrap::matrix-rotate-zyx)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::matrix-scale))

(cffi:defcfun ("__claw__MatrixScale" claylib/wrap::matrix-scale)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::x :float)
              (claylib/wrap::y :float)
              (claylib/wrap::z :float))

(declaim (inline claylib/wrap::matrix-subtract))

(cffi:defcfun ("__claw__MatrixSubtract"
               claylib/wrap::matrix-subtract)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::left (:pointer claylib/wrap::matrix))
              (claylib/wrap::right (:pointer claylib/wrap::matrix)))

(cffi:defcstruct (claylib/wrap::float16 :size 64)
                 (claylib/wrap::v :float :count 16 :offset 0))

(cffi:defctype claylib/wrap::float16 (:struct claylib/wrap::float16))

(declaim (inline claylib/wrap::matrix-to-float-v))

(cffi:defcfun ("__claw__MatrixToFloatV"
               claylib/wrap::matrix-to-float-v)
              (:pointer claylib/wrap::float16)
              (claylib/wrap::result (:pointer claylib/wrap::float16))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-trace))

(cffi:defcfun ("__claw__MatrixTrace" claylib/wrap::matrix-trace)
              :float
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-translate))

(cffi:defcfun ("__claw__MatrixTranslate"
               claylib/wrap::matrix-translate)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::x :float)
              (claylib/wrap::y :float)
              (claylib/wrap::z :float))

(declaim (inline claylib/wrap::matrix-transpose))

(cffi:defcfun ("__claw__MatrixTranspose"
               claylib/wrap::matrix-transpose)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::maximize-window))

(cffi:defcfun ("MaximizeWindow" claylib/wrap::maximize-window) :void)

(declaim (inline claylib/wrap::measure-text))

(cffi:defcfun ("MeasureText" claylib/wrap::measure-text)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :int))

(declaim (inline claylib/wrap::measure-text-ex))

(cffi:defcfun ("__claw__MeasureTextEx" claylib/wrap::measure-text-ex)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float))

(declaim (inline claylib/wrap::mem-alloc))

(cffi:defcfun ("MemAlloc" claylib/wrap::mem-alloc)
              (:pointer :void)
              (claylib/wrap::size :unsigned-int))

(declaim (inline claylib/wrap::mem-free))

(cffi:defcfun ("MemFree" claylib/wrap::mem-free)
              :void
              (claylib/wrap::ptr (:pointer :void)))

(declaim (inline claylib/wrap::mem-realloc))

(cffi:defcfun ("MemRealloc" claylib/wrap::mem-realloc)
              (:pointer :void)
              (claylib/wrap::ptr (:pointer :void))
              (claylib/wrap::size :unsigned-int))

(declaim (inline claylib/wrap::minimize-window))

(cffi:defcfun ("MinimizeWindow" claylib/wrap::minimize-window) :void)

(declaim (inline claylib/wrap::normalize))

(cffi:defcfun ("__claw__Normalize" claylib/wrap::normalize)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::start :float)
              (claylib/wrap::end :float))

(declaim (inline claylib/wrap::open-url))

(cffi:defcfun ("OpenURL" claylib/wrap::open-url)
              :void
              (claylib/wrap::url :string))

(declaim (inline claylib/wrap::pause-audio-stream))

(cffi:defcfun ("__claw__PauseAudioStream"
               claylib/wrap::pause-audio-stream)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::pause-music-stream))

(cffi:defcfun ("__claw__PauseMusicStream"
               claylib/wrap::pause-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::pause-sound))

(cffi:defcfun ("__claw__PauseSound" claylib/wrap::pause-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::play-audio-stream))

(cffi:defcfun ("__claw__PlayAudioStream"
               claylib/wrap::play-audio-stream)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::play-music-stream))

(cffi:defcfun ("__claw__PlayMusicStream"
               claylib/wrap::play-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::play-sound))

(cffi:defcfun ("__claw__PlaySound" claylib/wrap::play-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::poll-input-events))

(cffi:defcfun ("PollInputEvents" claylib/wrap::poll-input-events)
              :void)

(declaim (inline claylib/wrap::quaternion-add))

(cffi:defcfun ("__claw__QuaternionAdd" claylib/wrap::quaternion-add)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-add-value))

(cffi:defcfun ("__claw__QuaternionAddValue"
               claylib/wrap::quaternion-add-value)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::add :float))

(declaim (inline claylib/wrap::quaternion-divide))

(cffi:defcfun ("__claw__QuaternionDivide"
               claylib/wrap::quaternion-divide)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-equals))

(cffi:defcfun ("__claw__QuaternionEquals"
               claylib/wrap::quaternion-equals)
              :int
              (claylib/wrap::p (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-from-axis-angle))

(cffi:defcfun ("__claw__QuaternionFromAxisAngle"
               claylib/wrap::quaternion-from-axis-angle)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::axis (:pointer claylib/wrap::vector3))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::quaternion-from-euler))

(cffi:defcfun ("__claw__QuaternionFromEuler"
               claylib/wrap::quaternion-from-euler)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::pitch :float)
              (claylib/wrap::yaw :float)
              (claylib/wrap::roll :float))

(declaim (inline claylib/wrap::quaternion-from-matrix))

(cffi:defcfun ("__claw__QuaternionFromMatrix"
               claylib/wrap::quaternion-from-matrix)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::quaternion-from-vector3to-vector3))

(cffi:defcfun ("__claw__QuaternionFromVector3ToVector3"
               claylib/wrap::quaternion-from-vector3to-vector3)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::from (:pointer claylib/wrap::vector3))
              (claylib/wrap::to (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::quaternion-identity))

(cffi:defcfun ("__claw__QuaternionIdentity"
               claylib/wrap::quaternion-identity)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-invert))

(cffi:defcfun ("__claw__QuaternionInvert"
               claylib/wrap::quaternion-invert)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-length))

(cffi:defcfun ("__claw__QuaternionLength"
               claylib/wrap::quaternion-length)
              :float
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-lerp))

(cffi:defcfun ("__claw__QuaternionLerp"
               claylib/wrap::quaternion-lerp)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::quaternion-multiply))

(cffi:defcfun ("__claw__QuaternionMultiply"
               claylib/wrap::quaternion-multiply)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-nlerp))

(cffi:defcfun ("__claw__QuaternionNlerp"
               claylib/wrap::quaternion-nlerp)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::quaternion-normalize))

(cffi:defcfun ("__claw__QuaternionNormalize"
               claylib/wrap::quaternion-normalize)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-scale))

(cffi:defcfun ("__claw__QuaternionScale"
               claylib/wrap::quaternion-scale)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::mul :float))

(declaim (inline claylib/wrap::quaternion-slerp))

(cffi:defcfun ("__claw__QuaternionSlerp"
               claylib/wrap::quaternion-slerp)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::quaternion-subtract))

(cffi:defcfun ("__claw__QuaternionSubtract"
               claylib/wrap::quaternion-subtract)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-subtract-value))

(cffi:defcfun ("__claw__QuaternionSubtractValue"
               claylib/wrap::quaternion-subtract-value)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::sub :float))

(declaim (inline claylib/wrap::quaternion-to-axis-angle))

(cffi:defcfun ("__claw__QuaternionToAxisAngle"
               claylib/wrap::quaternion-to-axis-angle)
              :void
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::out-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::out-angle (:pointer :float)))

(declaim (inline claylib/wrap::quaternion-to-euler))

(cffi:defcfun ("__claw__QuaternionToEuler"
               claylib/wrap::quaternion-to-euler)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-to-matrix))

(cffi:defcfun ("__claw__QuaternionToMatrix"
               claylib/wrap::quaternion-to-matrix)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::result (:pointer claylib/wrap::matrix))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-transform))

(cffi:defcfun ("__claw__QuaternionTransform"
               claylib/wrap::quaternion-transform)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::result
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::remap))

(cffi:defcfun ("__claw__Remap" claylib/wrap::remap)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::input-start :float)
              (claylib/wrap::input-end :float)
              (claylib/wrap::output-start :float)
              (claylib/wrap::output-end :float))

(declaim (inline claylib/wrap::restore-window))

(cffi:defcfun ("RestoreWindow" claylib/wrap::restore-window) :void)

(declaim (inline claylib/wrap::resume-audio-stream))

(cffi:defcfun ("__claw__ResumeAudioStream"
               claylib/wrap::resume-audio-stream)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::resume-music-stream))

(cffi:defcfun ("__claw__ResumeMusicStream"
               claylib/wrap::resume-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::resume-sound))

(cffi:defcfun ("__claw__ResumeSound" claylib/wrap::resume-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::save-file-data))

(cffi:defcfun ("SaveFileData" claylib/wrap::save-file-data)
              :bool
              (claylib/wrap::file-name :string)
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::bytes-to-write :unsigned-int))

(declaim (inline claylib/wrap::save-file-text))

(cffi:defcfun ("SaveFileText" claylib/wrap::save-file-text)
              :bool
              (claylib/wrap::file-name :string)
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::seek-music-stream))

(cffi:defcfun ("__claw__SeekMusicStream"
               claylib/wrap::seek-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::position :float))

(declaim (inline claylib/wrap::set-audio-stream-buffer-size-default))

(cffi:defcfun ("SetAudioStreamBufferSizeDefault"
               claylib/wrap::set-audio-stream-buffer-size-default)
              :void
              (claylib/wrap::size :int))

(declaim (inline claylib/wrap::set-audio-stream-callback))

(cffi:defcfun ("__claw__SetAudioStreamCallback"
               claylib/wrap::set-audio-stream-callback)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::callback claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::set-audio-stream-pan))

(cffi:defcfun ("__claw__SetAudioStreamPan"
               claylib/wrap::set-audio-stream-pan)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::pan :float))

(declaim (inline claylib/wrap::set-audio-stream-pitch))

(cffi:defcfun ("__claw__SetAudioStreamPitch"
               claylib/wrap::set-audio-stream-pitch)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::pitch :float))

(declaim (inline claylib/wrap::set-audio-stream-volume))

(cffi:defcfun ("__claw__SetAudioStreamVolume"
               claylib/wrap::set-audio-stream-volume)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-clipboard-text))

(cffi:defcfun ("SetClipboardText" claylib/wrap::set-clipboard-text)
              :void
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::set-config-flags))

(cffi:defcfun ("SetConfigFlags" claylib/wrap::set-config-flags)
              :void
              (claylib/wrap::flags :unsigned-int))

(declaim (inline claylib/wrap::set-exit-key))

(cffi:defcfun ("SetExitKey" claylib/wrap::set-exit-key)
              :void
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::set-gamepad-mappings))

(cffi:defcfun ("SetGamepadMappings"
               claylib/wrap::set-gamepad-mappings)
              :int
              (claylib/wrap::mappings :string))

(declaim (inline claylib/wrap::set-gestures-enabled))

(cffi:defcfun ("SetGesturesEnabled"
               claylib/wrap::set-gestures-enabled)
              :void
              (claylib/wrap::flags :unsigned-int))

(cffi:defctype claylib/wrap::load-file-data-callback (:pointer :void))

(declaim (inline claylib/wrap::set-load-file-data-callback))

(cffi:defcfun ("SetLoadFileDataCallback"
               claylib/wrap::set-load-file-data-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::load-file-data-callback))

(cffi:defctype claylib/wrap::load-file-text-callback (:pointer :void))

(declaim (inline claylib/wrap::set-load-file-text-callback))

(cffi:defcfun ("SetLoadFileTextCallback"
               claylib/wrap::set-load-file-text-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::load-file-text-callback))

(declaim (inline claylib/wrap::set-master-volume))

(cffi:defcfun ("SetMasterVolume" claylib/wrap::set-master-volume)
              :void
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-material-texture))

(cffi:defcfun ("__claw__SetMaterialTexture"
               claylib/wrap::set-material-texture)
              :void
              (claylib/wrap::material
               (:pointer claylib/wrap::material))
              (claylib/wrap::map-type :int)
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d)))

(declaim (inline claylib/wrap::set-model-mesh-material))

(cffi:defcfun ("SetModelMeshMaterial"
               claylib/wrap::set-model-mesh-material)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::mesh-id :int)
              (claylib/wrap::material-id :int))

(declaim (inline claylib/wrap::set-mouse-cursor))

(cffi:defcfun ("SetMouseCursor" claylib/wrap::set-mouse-cursor)
              :void
              (claylib/wrap::cursor :int))

(declaim (inline claylib/wrap::set-mouse-offset))

(cffi:defcfun ("SetMouseOffset" claylib/wrap::set-mouse-offset)
              :void
              (claylib/wrap::offset-x :int)
              (claylib/wrap::offset-y :int))

(declaim (inline claylib/wrap::set-mouse-position))

(cffi:defcfun ("SetMousePosition" claylib/wrap::set-mouse-position)
              :void
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::set-mouse-scale))

(cffi:defcfun ("SetMouseScale" claylib/wrap::set-mouse-scale)
              :void
              (claylib/wrap::scale-x :float)
              (claylib/wrap::scale-y :float))

(declaim (inline claylib/wrap::set-music-pan))

(cffi:defcfun ("__claw__SetMusicPan" claylib/wrap::set-music-pan)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::pan :float))

(declaim (inline claylib/wrap::set-music-pitch))

(cffi:defcfun ("__claw__SetMusicPitch" claylib/wrap::set-music-pitch)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::pitch :float))

(declaim (inline claylib/wrap::set-music-volume))

(cffi:defcfun ("__claw__SetMusicVolume"
               claylib/wrap::set-music-volume)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-pixel-color))

(cffi:defcfun ("__claw__SetPixelColor" claylib/wrap::set-pixel-color)
              :void
              (claylib/wrap::dst-ptr (:pointer :void))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::format :int))

(declaim (inline claylib/wrap::set-random-seed))

(cffi:defcfun ("SetRandomSeed" claylib/wrap::set-random-seed)
              :void
              (claylib/wrap::seed :unsigned-int))

(cffi:defctype claylib/wrap::save-file-data-callback (:pointer :void))

(declaim (inline claylib/wrap::set-save-file-data-callback))

(cffi:defcfun ("SetSaveFileDataCallback"
               claylib/wrap::set-save-file-data-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::save-file-data-callback))

(cffi:defctype claylib/wrap::save-file-text-callback (:pointer :void))

(declaim (inline claylib/wrap::set-save-file-text-callback))

(cffi:defcfun ("SetSaveFileTextCallback"
               claylib/wrap::set-save-file-text-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::save-file-text-callback))

(declaim (inline claylib/wrap::set-shader-value))

(cffi:defcfun ("__claw__SetShaderValue"
               claylib/wrap::set-shader-value)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::value (:pointer :void))
              (claylib/wrap::uniform-type :int))

(declaim (inline claylib/wrap::set-shader-value-matrix))

(cffi:defcfun ("__claw__SetShaderValueMatrix"
               claylib/wrap::set-shader-value-matrix)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::set-shader-value-texture))

(cffi:defcfun ("__claw__SetShaderValueTexture"
               claylib/wrap::set-shader-value-texture)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d)))

(declaim (inline claylib/wrap::set-shader-value-v))

(cffi:defcfun ("__claw__SetShaderValueV"
               claylib/wrap::set-shader-value-v)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::value (:pointer :void))
              (claylib/wrap::uniform-type :int)
              (claylib/wrap::count :int))

(declaim (inline claylib/wrap::set-shapes-texture))

(cffi:defcfun ("__claw__SetShapesTexture"
               claylib/wrap::set-shapes-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::set-sound-pan))

(cffi:defcfun ("__claw__SetSoundPan" claylib/wrap::set-sound-pan)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::pan :float))

(declaim (inline claylib/wrap::set-sound-pitch))

(cffi:defcfun ("__claw__SetSoundPitch" claylib/wrap::set-sound-pitch)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::pitch :float))

(declaim (inline claylib/wrap::set-sound-volume))

(cffi:defcfun ("__claw__SetSoundVolume"
               claylib/wrap::set-sound-volume)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-target-fps))

(cffi:defcfun ("SetTargetFPS" claylib/wrap::set-target-fps)
              :void
              (claylib/wrap::fps :int))

(declaim (inline claylib/wrap::set-texture-filter))

(cffi:defcfun ("__claw__SetTextureFilter"
               claylib/wrap::set-texture-filter)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::filter :int))

(declaim (inline claylib/wrap::set-texture-wrap))

(cffi:defcfun ("__claw__SetTextureWrap"
               claylib/wrap::set-texture-wrap)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::wrap :int))

(cffi:defctype claylib/wrap::trace-log-callback (:pointer :void))

(declaim (inline claylib/wrap::set-trace-log-callback))

(cffi:defcfun ("SetTraceLogCallback"
               claylib/wrap::set-trace-log-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::trace-log-callback))

(declaim (inline claylib/wrap::set-trace-log-level))

(cffi:defcfun ("SetTraceLogLevel" claylib/wrap::set-trace-log-level)
              :void
              (claylib/wrap::log-level :int))

(declaim (inline claylib/wrap::set-window-icon))

(cffi:defcfun ("__claw__SetWindowIcon" claylib/wrap::set-window-icon)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::set-window-icons))

(cffi:defcfun ("SetWindowIcons" claylib/wrap::set-window-icons)
              :void
              (claylib/wrap::images (:pointer claylib/wrap::image))
              (claylib/wrap::count :int))

(declaim (inline claylib/wrap::set-window-min-size))

(cffi:defcfun ("SetWindowMinSize" claylib/wrap::set-window-min-size)
              :void
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::set-window-monitor))

(cffi:defcfun ("SetWindowMonitor" claylib/wrap::set-window-monitor)
              :void
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::set-window-opacity))

(cffi:defcfun ("SetWindowOpacity" claylib/wrap::set-window-opacity)
              :void
              (claylib/wrap::opacity :float))

(declaim (inline claylib/wrap::set-window-position))

(cffi:defcfun ("SetWindowPosition" claylib/wrap::set-window-position)
              :void
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::set-window-size))

(cffi:defcfun ("SetWindowSize" claylib/wrap::set-window-size)
              :void
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::set-window-state))

(cffi:defcfun ("SetWindowState" claylib/wrap::set-window-state)
              :void
              (claylib/wrap::flags :unsigned-int))

(declaim (inline claylib/wrap::set-window-title))

(cffi:defcfun ("SetWindowTitle" claylib/wrap::set-window-title)
              :void
              (claylib/wrap::title :string))

(declaim (inline claylib/wrap::show-cursor))

(cffi:defcfun ("ShowCursor" claylib/wrap::show-cursor) :void)

(declaim (inline claylib/wrap::stop-audio-stream))

(cffi:defcfun ("__claw__StopAudioStream"
               claylib/wrap::stop-audio-stream)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::stop-music-stream))

(cffi:defcfun ("__claw__StopMusicStream"
               claylib/wrap::stop-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::stop-sound))

(cffi:defcfun ("__claw__StopSound" claylib/wrap::stop-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::swap-screen-buffer))

(cffi:defcfun ("SwapScreenBuffer" claylib/wrap::swap-screen-buffer)
              :void)

(declaim (inline claylib/wrap::take-screenshot))

(cffi:defcfun ("TakeScreenshot" claylib/wrap::take-screenshot)
              :void
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::text-append))

(cffi:defcfun ("TextAppend" claylib/wrap::text-append)
              :void
              (claylib/wrap::text :string)
              (claylib/wrap::append :string)
              (claylib/wrap::position (:pointer :int)))

(declaim (inline claylib/wrap::text-copy))

(cffi:defcfun ("TextCopy" claylib/wrap::text-copy)
              :int
              (claylib/wrap::dst :string)
              (claylib/wrap::src :string))

(declaim (inline claylib/wrap::text-find-index))

(cffi:defcfun ("TextFindIndex" claylib/wrap::text-find-index)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::find :string))

(declaim (inline claylib/wrap::text-format))

(cffi:defcfun ("TextFormat" claylib/wrap::text-format)
              :string
              (claylib/wrap::text :string)
              &rest)

(declaim (inline claylib/wrap::text-insert))

(cffi:defcfun ("TextInsert" claylib/wrap::text-insert)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::insert :string)
              (claylib/wrap::position :int))

(declaim (inline claylib/wrap::text-is-equal))

(cffi:defcfun ("TextIsEqual" claylib/wrap::text-is-equal)
              :bool
              (claylib/wrap::text1 :string)
              (claylib/wrap::text2 :string))

(declaim (inline claylib/wrap::text-join))

(cffi:defcfun ("TextJoin" claylib/wrap::text-join)
              :string
              (claylib/wrap::text-list :string)
              (claylib/wrap::count :int)
              (claylib/wrap::delimiter :string))

(declaim (inline claylib/wrap::text-length))

(cffi:defcfun ("TextLength" claylib/wrap::text-length)
              :unsigned-int
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-replace))

(cffi:defcfun ("TextReplace" claylib/wrap::text-replace)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::replace :string)
              (claylib/wrap::by :string))

(declaim (inline claylib/wrap::text-split))

(cffi:defcfun ("TextSplit" claylib/wrap::text-split)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::delimiter :char)
              (claylib/wrap::count (:pointer :int)))

(declaim (inline claylib/wrap::text-subtext))

(cffi:defcfun ("TextSubtext" claylib/wrap::text-subtext)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::position :int)
              (claylib/wrap::length :int))

(declaim (inline claylib/wrap::text-to-integer))

(cffi:defcfun ("TextToInteger" claylib/wrap::text-to-integer)
              :int
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-to-lower))

(cffi:defcfun ("TextToLower" claylib/wrap::text-to-lower)
              :string
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-to-pascal))

(cffi:defcfun ("TextToPascal" claylib/wrap::text-to-pascal)
              :string
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-to-upper))

(cffi:defcfun ("TextToUpper" claylib/wrap::text-to-upper)
              :string
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::toggle-fullscreen))

(cffi:defcfun ("ToggleFullscreen" claylib/wrap::toggle-fullscreen)
              :void)

(declaim (inline claylib/wrap::trace-log))

(cffi:defcfun ("TraceLog" claylib/wrap::trace-log)
              :void
              (claylib/wrap::log-level :int)
              (claylib/wrap::text :string)
              &rest)

(declaim (inline claylib/wrap::unload-audio-stream))

(cffi:defcfun ("__claw__UnloadAudioStream"
               claylib/wrap::unload-audio-stream)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::unload-codepoints))

(cffi:defcfun ("UnloadCodepoints" claylib/wrap::unload-codepoints)
              :void
              (claylib/wrap::codepoints (:pointer :int)))

(declaim (inline claylib/wrap::unload-directory-files))

(cffi:defcfun ("__claw__UnloadDirectoryFiles"
               claylib/wrap::unload-directory-files)
              :void
              (claylib/wrap::files
               (:pointer claylib/wrap::file-path-list)))

(declaim (inline claylib/wrap::unload-dropped-files))

(cffi:defcfun ("__claw__UnloadDroppedFiles"
               claylib/wrap::unload-dropped-files)
              :void
              (claylib/wrap::files
               (:pointer claylib/wrap::file-path-list)))

(declaim (inline claylib/wrap::unload-file-data))

(cffi:defcfun ("UnloadFileData" claylib/wrap::unload-file-data)
              :void
              (claylib/wrap::data (:pointer :unsigned-char)))

(declaim (inline claylib/wrap::unload-file-text))

(cffi:defcfun ("UnloadFileText" claylib/wrap::unload-file-text)
              :void
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::unload-font))

(cffi:defcfun ("__claw__UnloadFont" claylib/wrap::unload-font)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::unload-font-data))

(cffi:defcfun ("UnloadFontData" claylib/wrap::unload-font-data)
              :void
              (claylib/wrap::chars
               (:pointer claylib/wrap::glyph-info))
              (claylib/wrap::glyph-count :int))

(declaim (inline claylib/wrap::unload-image))

(cffi:defcfun ("__claw__UnloadImage" claylib/wrap::unload-image)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::unload-image-colors))

(cffi:defcfun ("UnloadImageColors" claylib/wrap::unload-image-colors)
              :void
              (claylib/wrap::colors (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::unload-image-palette))

(cffi:defcfun ("UnloadImagePalette"
               claylib/wrap::unload-image-palette)
              :void
              (claylib/wrap::colors (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::unload-material))

(cffi:defcfun ("__claw__UnloadMaterial"
               claylib/wrap::unload-material)
              :void
              (claylib/wrap::material
               (:pointer claylib/wrap::material)))

(declaim (inline claylib/wrap::unload-mesh))

(cffi:defcfun ("__claw__UnloadMesh" claylib/wrap::unload-mesh)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::unload-model))

(cffi:defcfun ("__claw__UnloadModel" claylib/wrap::unload-model)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model)))

(declaim (inline claylib/wrap::unload-model-animation))

(cffi:defcfun ("__claw__UnloadModelAnimation"
               claylib/wrap::unload-model-animation)
              :void
              (claylib/wrap::anim
               (:pointer claylib/wrap::model-animation)))

(declaim (inline claylib/wrap::unload-model-animations))

(cffi:defcfun ("UnloadModelAnimations"
               claylib/wrap::unload-model-animations)
              :void
              (claylib/wrap::animations
               (:pointer claylib/wrap::model-animation))
              (claylib/wrap::count :unsigned-int))

(declaim (inline claylib/wrap::unload-music-stream))

(cffi:defcfun ("__claw__UnloadMusicStream"
               claylib/wrap::unload-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::unload-render-texture))

(cffi:defcfun ("__claw__UnloadRenderTexture"
               claylib/wrap::unload-render-texture)
              :void
              (claylib/wrap::target
               (:pointer claylib/wrap::render-texture-2d)))

(declaim (inline claylib/wrap::unload-shader))

(cffi:defcfun ("__claw__UnloadShader" claylib/wrap::unload-shader)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader)))

(declaim (inline claylib/wrap::unload-sound))

(cffi:defcfun ("__claw__UnloadSound" claylib/wrap::unload-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::unload-texture))

(cffi:defcfun ("__claw__UnloadTexture" claylib/wrap::unload-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d)))

(declaim (inline claylib/wrap::unload-utf8))

(cffi:defcfun ("UnloadUTF8" claylib/wrap::unload-utf8)
              :void
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::unload-vr-stereo-config))

(cffi:defcfun ("__claw__UnloadVrStereoConfig"
               claylib/wrap::unload-vr-stereo-config)
              :void
              (claylib/wrap::config
               (:pointer claylib/wrap::vr-stereo-config)))

(declaim (inline claylib/wrap::unload-wave))

(cffi:defcfun ("__claw__UnloadWave" claylib/wrap::unload-wave)
              :void
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::unload-wave-samples))

(cffi:defcfun ("UnloadWaveSamples" claylib/wrap::unload-wave-samples)
              :void
              (claylib/wrap::samples (:pointer :float)))

(declaim (inline claylib/wrap::update-audio-stream))

(cffi:defcfun ("__claw__UpdateAudioStream"
               claylib/wrap::update-audio-stream)
              :void
              (claylib/wrap::stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::frame-count :int))

(declaim (inline claylib/wrap::update-camera))

(cffi:defcfun ("UpdateCamera" claylib/wrap::update-camera)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::mode :int))

(declaim (inline claylib/wrap::update-camera-pro))

(cffi:defcfun ("__claw__UpdateCameraPro"
               claylib/wrap::update-camera-pro)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::movement
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::zoom :float))

(declaim (inline claylib/wrap::update-mesh-buffer))

(cffi:defcfun ("__claw__UpdateMeshBuffer"
               claylib/wrap::update-mesh-buffer)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::index :int)
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::data-size :int)
              (claylib/wrap::offset :int))

(declaim (inline claylib/wrap::update-model-animation))

(cffi:defcfun ("__claw__UpdateModelAnimation"
               claylib/wrap::update-model-animation)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::anim
               (:pointer claylib/wrap::model-animation))
              (claylib/wrap::frame :int))

(declaim (inline claylib/wrap::update-music-stream))

(cffi:defcfun ("__claw__UpdateMusicStream"
               claylib/wrap::update-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::update-sound))

(cffi:defcfun ("__claw__UpdateSound" claylib/wrap::update-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::sample-count :int))

(declaim (inline claylib/wrap::update-texture))

(cffi:defcfun ("__claw__UpdateTexture" claylib/wrap::update-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::pixels (:pointer :void)))

(declaim (inline claylib/wrap::update-texture-rec))

(cffi:defcfun ("__claw__UpdateTextureRec"
               claylib/wrap::update-texture-rec)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture-2d))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::pixels (:pointer :void)))

(declaim (inline claylib/wrap::upload-mesh))

(cffi:defcfun ("UploadMesh" claylib/wrap::upload-mesh)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::dynamic :bool))

(declaim (inline claylib/wrap::vector2-add))

(cffi:defcfun ("__claw__Vector2Add" claylib/wrap::vector2-add)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-add-value))

(cffi:defcfun ("__claw__Vector2AddValue"
               claylib/wrap::vector2-add-value)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::add :float))

(declaim (inline claylib/wrap::vector2-angle))

(cffi:defcfun ("__claw__Vector2Angle" claylib/wrap::vector2-angle)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-clamp))

(cffi:defcfun ("__claw__Vector2Clamp" claylib/wrap::vector2-clamp)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::min (:pointer claylib/wrap::vector2))
              (claylib/wrap::max (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-clamp-value))

(cffi:defcfun ("__claw__Vector2ClampValue"
               claylib/wrap::vector2-clamp-value)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::min :float)
              (claylib/wrap::max :float))

(declaim (inline claylib/wrap::vector2-distance))

(cffi:defcfun ("__claw__Vector2Distance"
               claylib/wrap::vector2-distance)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-distance-sqr))

(cffi:defcfun ("__claw__Vector2DistanceSqr"
               claylib/wrap::vector2-distance-sqr)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-divide))

(cffi:defcfun ("__claw__Vector2Divide" claylib/wrap::vector2-divide)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-dot-product))

(cffi:defcfun ("__claw__Vector2DotProduct"
               claylib/wrap::vector2-dot-product)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-equals))

(cffi:defcfun ("__claw__Vector2Equals" claylib/wrap::vector2-equals)
              :int
              (claylib/wrap::p (:pointer claylib/wrap::vector2))
              (claylib/wrap::q (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-invert))

(cffi:defcfun ("__claw__Vector2Invert" claylib/wrap::vector2-invert)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-length))

(cffi:defcfun ("__claw__Vector2Length" claylib/wrap::vector2-length)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-length-sqr))

(cffi:defcfun ("__claw__Vector2LengthSqr"
               claylib/wrap::vector2-length-sqr)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-lerp))

(cffi:defcfun ("__claw__Vector2Lerp" claylib/wrap::vector2-lerp)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::vector2-line-angle))

(cffi:defcfun ("__claw__Vector2LineAngle"
               claylib/wrap::vector2-line-angle)
              :float
              (claylib/wrap::start (:pointer claylib/wrap::vector2))
              (claylib/wrap::end (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-move-towards))

(cffi:defcfun ("__claw__Vector2MoveTowards"
               claylib/wrap::vector2-move-towards)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::target (:pointer claylib/wrap::vector2))
              (claylib/wrap::max-distance :float))

(declaim (inline claylib/wrap::vector2-multiply))

(cffi:defcfun ("__claw__Vector2Multiply"
               claylib/wrap::vector2-multiply)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-negate))

(cffi:defcfun ("__claw__Vector2Negate" claylib/wrap::vector2-negate)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-normalize))

(cffi:defcfun ("__claw__Vector2Normalize"
               claylib/wrap::vector2-normalize)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-one))

(cffi:defcfun ("__claw__Vector2One" claylib/wrap::vector2-one)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-reflect))

(cffi:defcfun ("__claw__Vector2Reflect"
               claylib/wrap::vector2-reflect)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::normal (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-rotate))

(cffi:defcfun ("__claw__Vector2Rotate" claylib/wrap::vector2-rotate)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::vector2-scale))

(cffi:defcfun ("__claw__Vector2Scale" claylib/wrap::vector2-scale)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::scale :float))

(declaim (inline claylib/wrap::vector2-subtract))

(cffi:defcfun ("__claw__Vector2Subtract"
               claylib/wrap::vector2-subtract)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2-subtract-value))

(cffi:defcfun ("__claw__Vector2SubtractValue"
               claylib/wrap::vector2-subtract-value)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::sub :float))

(declaim (inline claylib/wrap::vector2-transform))

(cffi:defcfun ("__claw__Vector2Transform"
               claylib/wrap::vector2-transform)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::vector2-zero))

(cffi:defcfun ("__claw__Vector2Zero" claylib/wrap::vector2-zero)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::result (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector3-add))

(cffi:defcfun ("__claw__Vector3Add" claylib/wrap::vector3-add)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-add-value))

(cffi:defcfun ("__claw__Vector3AddValue"
               claylib/wrap::vector3-add-value)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::add :float))

(declaim (inline claylib/wrap::vector3-angle))

(cffi:defcfun ("__claw__Vector3Angle" claylib/wrap::vector3-angle)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-barycenter))

(cffi:defcfun ("__claw__Vector3Barycenter"
               claylib/wrap::vector3-barycenter)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::p (:pointer claylib/wrap::vector3))
              (claylib/wrap::a (:pointer claylib/wrap::vector3))
              (claylib/wrap::b (:pointer claylib/wrap::vector3))
              (claylib/wrap::c (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-clamp))

(cffi:defcfun ("__claw__Vector3Clamp" claylib/wrap::vector3-clamp)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::min (:pointer claylib/wrap::vector3))
              (claylib/wrap::max (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-clamp-value))

(cffi:defcfun ("__claw__Vector3ClampValue"
               claylib/wrap::vector3-clamp-value)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::min :float)
              (claylib/wrap::max :float))

(declaim (inline claylib/wrap::vector3-cross-product))

(cffi:defcfun ("__claw__Vector3CrossProduct"
               claylib/wrap::vector3-cross-product)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-distance))

(cffi:defcfun ("__claw__Vector3Distance"
               claylib/wrap::vector3-distance)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-distance-sqr))

(cffi:defcfun ("__claw__Vector3DistanceSqr"
               claylib/wrap::vector3-distance-sqr)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-divide))

(cffi:defcfun ("__claw__Vector3Divide" claylib/wrap::vector3-divide)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-dot-product))

(cffi:defcfun ("__claw__Vector3DotProduct"
               claylib/wrap::vector3-dot-product)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-equals))

(cffi:defcfun ("__claw__Vector3Equals" claylib/wrap::vector3-equals)
              :int
              (claylib/wrap::p (:pointer claylib/wrap::vector3))
              (claylib/wrap::q (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-invert))

(cffi:defcfun ("__claw__Vector3Invert" claylib/wrap::vector3-invert)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-length))

(cffi:defcfun ("__claw__Vector3Length" claylib/wrap::vector3-length)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-length-sqr))

(cffi:defcfun ("__claw__Vector3LengthSqr"
               claylib/wrap::vector3-length-sqr)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-lerp))

(cffi:defcfun ("__claw__Vector3Lerp" claylib/wrap::vector3-lerp)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::vector3-max))

(cffi:defcfun ("__claw__Vector3Max" claylib/wrap::vector3-max)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-min))

(cffi:defcfun ("__claw__Vector3Min" claylib/wrap::vector3-min)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-multiply))

(cffi:defcfun ("__claw__Vector3Multiply"
               claylib/wrap::vector3-multiply)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-negate))

(cffi:defcfun ("__claw__Vector3Negate" claylib/wrap::vector3-negate)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-normalize))

(cffi:defcfun ("__claw__Vector3Normalize"
               claylib/wrap::vector3-normalize)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-one))

(cffi:defcfun ("__claw__Vector3One" claylib/wrap::vector3-one)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-ortho-normalize))

(cffi:defcfun ("__claw__Vector3OrthoNormalize"
               claylib/wrap::vector3-ortho-normalize)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-perpendicular))

(cffi:defcfun ("__claw__Vector3Perpendicular"
               claylib/wrap::vector3-perpendicular)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-reflect))

(cffi:defcfun ("__claw__Vector3Reflect"
               claylib/wrap::vector3-reflect)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::normal (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-refract))

(cffi:defcfun ("__claw__Vector3Refract"
               claylib/wrap::vector3-refract)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::n (:pointer claylib/wrap::vector3))
              (claylib/wrap::r :float))

(declaim (inline claylib/wrap::vector3-rotate-by-axis-angle))

(cffi:defcfun ("__claw__Vector3RotateByAxisAngle"
               claylib/wrap::vector3-rotate-by-axis-angle)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::axis (:pointer claylib/wrap::vector3))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::vector3-rotate-by-quaternion))

(cffi:defcfun ("__claw__Vector3RotateByQuaternion"
               claylib/wrap::vector3-rotate-by-quaternion)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::vector3-scale))

(cffi:defcfun ("__claw__Vector3Scale" claylib/wrap::vector3-scale)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::scalar :float))

(declaim (inline claylib/wrap::vector3-subtract))

(cffi:defcfun ("__claw__Vector3Subtract"
               claylib/wrap::vector3-subtract)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-subtract-value))

(cffi:defcfun ("__claw__Vector3SubtractValue"
               claylib/wrap::vector3-subtract-value)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::sub :float))

(cffi:defcstruct (claylib/wrap::float3 :size 12)
                 (claylib/wrap::v :float :count 3 :offset 0))

(cffi:defctype claylib/wrap::float3 (:struct claylib/wrap::float3))

(declaim (inline claylib/wrap::vector3-to-float-v))

(cffi:defcfun ("__claw__Vector3ToFloatV"
               claylib/wrap::vector3-to-float-v)
              (:pointer claylib/wrap::float3)
              (claylib/wrap::result (:pointer claylib/wrap::float3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3-transform))

(cffi:defcfun ("__claw__Vector3Transform"
               claylib/wrap::vector3-transform)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::vector3-unproject))

(cffi:defcfun ("__claw__Vector3Unproject"
               claylib/wrap::vector3-unproject)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3))
              (claylib/wrap::source (:pointer claylib/wrap::vector3))
              (claylib/wrap::projection
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::view (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::vector3-zero))

(cffi:defcfun ("__claw__Vector3Zero" claylib/wrap::vector3-zero)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::result (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::wait-time))

(cffi:defcfun ("WaitTime" claylib/wrap::wait-time)
              :void
              (claylib/wrap::seconds :double))

(declaim (inline claylib/wrap::wave-copy))

(cffi:defcfun ("__claw__WaveCopy" claylib/wrap::wave-copy)
              (:pointer claylib/wrap::wave)
              (claylib/wrap::result (:pointer claylib/wrap::wave))
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::wave-crop))

(cffi:defcfun ("WaveCrop" claylib/wrap::wave-crop)
              :void
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::init-sample :int)
              (claylib/wrap::final-sample :int))

(declaim (inline claylib/wrap::wave-format))

(cffi:defcfun ("WaveFormat" claylib/wrap::wave-format)
              :void
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::sample-rate :int)
              (claylib/wrap::sample-size :int)
              (claylib/wrap::channels :int))

(declaim (inline claylib/wrap::window-should-close))

(cffi:defcfun ("WindowShouldClose" claylib/wrap::window-should-close)
              :bool)

(declaim (inline claylib/wrap::wrap))

(cffi:defcfun ("__claw__Wrap" claylib/wrap::wrap)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::min :float)
              (claylib/wrap::max :float))

(declaim (inline claylib/wrap::%exit))

(cffi:defcfun ("_Exit" claylib/wrap::%exit)
              :void
              (claylib/wrap::%%status :int))

(declaim (inline claylib/wrap::a64l))

(cffi:defcfun ("a64l" claylib/wrap::a64l)
              :long
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::c-abort))

(cffi:defcfun ("abort" claylib/wrap::c-abort) :void)

(declaim (inline claylib/wrap::c-abs))

(cffi:defcfun ("abs" claylib/wrap::c-abs)
              :int
              (claylib/wrap::%%x :int))

(declaim (inline claylib/wrap::c-acos))

(cffi:defcfun ("acos" claylib/wrap::c-acos)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::acosf))

(cffi:defcfun ("acosf" claylib/wrap::acosf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-acosh))

(cffi:defcfun ("acosh" claylib/wrap::c-acosh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::acoshf))

(cffi:defcfun ("acoshf" claylib/wrap::acoshf)
              :float
              (claylib/wrap::%%x :float))

(cffi:defcstruct (claylib/wrap::long-double :class
                  claylib/wrap::emulated$long-double :size 16)
                 (claylib/wrap::data :unsigned-char :count 16))

(defmethod cffi:foreign-type-alignment ((claylib/wrap::this
                                         claylib/wrap::emulated$long-double))
  (declare (ignore claylib/wrap::this))
  16)

(cffi:defctype claylib/wrap::long-double
               (:struct claylib/wrap::long-double))

(declaim (inline claylib/wrap::acoshl))

(cffi:defcfun ("__claw__acoshl" claylib/wrap::acoshl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::acosl))

(cffi:defcfun ("__claw__acosl" claylib/wrap::acosl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-asin))

(cffi:defcfun ("asin" claylib/wrap::c-asin)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::asinf))

(cffi:defcfun ("asinf" claylib/wrap::asinf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-asinh))

(cffi:defcfun ("asinh" claylib/wrap::c-asinh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::asinhf))

(cffi:defcfun ("asinhf" claylib/wrap::asinhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::asinhl))

(cffi:defcfun ("__claw__asinhl" claylib/wrap::asinhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::asinl))

(cffi:defcfun ("__claw__asinl" claylib/wrap::asinl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::at-quick-exit))

(cffi:defcfun ("at_quick_exit" claylib/wrap::at-quick-exit)
              :int
              (claylib/wrap::%%func (:pointer :void)))

(declaim (inline claylib/wrap::c-atan))

(cffi:defcfun ("atan" claylib/wrap::c-atan)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::atan2))

(cffi:defcfun ("atan2" claylib/wrap::atan2)
              :double
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::atan2f))

(cffi:defcfun ("atan2f" claylib/wrap::atan2f)
              :float
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::atan2l))

(cffi:defcfun ("__claw__atan2l" claylib/wrap::atan2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::atanf))

(cffi:defcfun ("atanf" claylib/wrap::atanf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-atanh))

(cffi:defcfun ("atanh" claylib/wrap::c-atanh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::atanhf))

(cffi:defcfun ("atanhf" claylib/wrap::atanhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::atanhl))

(cffi:defcfun ("__claw__atanhl" claylib/wrap::atanhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::atanl))

(cffi:defcfun ("__claw__atanl" claylib/wrap::atanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::atexit))

(cffi:defcfun ("atexit" claylib/wrap::atexit)
              :int
              (claylib/wrap::%%func (:pointer :void)))

(declaim (inline claylib/wrap::atof))

(cffi:defcfun ("atof" claylib/wrap::atof)
              :double
              (claylib/wrap::%%nptr :string))

(declaim (inline claylib/wrap::atoi))

(cffi:defcfun ("atoi" claylib/wrap::atoi)
              :int
              (claylib/wrap::%%nptr :string))

(declaim (inline claylib/wrap::atol))

(cffi:defcfun ("atol" claylib/wrap::atol)
              :long
              (claylib/wrap::%%nptr :string))

(declaim (inline claylib/wrap::atoll))

(cffi:defcfun ("atoll" claylib/wrap::atoll)
              :long-long
              (claylib/wrap::%%nptr :string))

(declaim (inline claylib/wrap::cbrt))

(cffi:defcfun ("cbrt" claylib/wrap::cbrt)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::cbrtf))

(cffi:defcfun ("cbrtf" claylib/wrap::cbrtf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::cbrtl))

(cffi:defcfun ("__claw__cbrtl" claylib/wrap::cbrtl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ceil))

(cffi:defcfun ("ceil" claylib/wrap::ceil)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::ceilf))

(cffi:defcfun ("ceilf" claylib/wrap::ceilf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::ceill))

(cffi:defcfun ("__claw__ceill" claylib/wrap::ceill)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::clearenv))

(cffi:defcfun ("clearenv" claylib/wrap::clearenv) :int)

(cffi:defcstruct (claylib/wrap::%io-marker :size 0))

(cffi:defcstruct (claylib/wrap::%io-codecvt :size 0))

(cffi:defcstruct (claylib/wrap::%io-wide-data :size 0))

(cffi:defcstruct (claylib/wrap::%io-file :size 148))

(cffi:defcstruct (claylib/wrap::%io-file :size 148)
                 (claylib/wrap::%flags :int :offset 0)
                 (claylib/wrap::%io-read-ptr :string :offset 4)
                 (claylib/wrap::%io-read-end :string :offset 8)
                 (claylib/wrap::%io-read-base :string :offset 12)
                 (claylib/wrap::%io-write-base :string :offset 16)
                 (claylib/wrap::%io-write-ptr :string :offset 20)
                 (claylib/wrap::%io-write-end :string :offset 24)
                 (claylib/wrap::%io-buf-base :string :offset 28)
                 (claylib/wrap::%io-buf-end :string :offset 32)
                 (claylib/wrap::%io-save-base :string :offset 36)
                 (claylib/wrap::%io-backup-base :string :offset 40)
                 (claylib/wrap::%io-save-end :string :offset 44)
                 (claylib/wrap::%markers
                  (:pointer (:struct claylib/wrap::%io-marker))
                  :offset 48)
                 (claylib/wrap::%chain
                  (:pointer (:struct claylib/wrap::%io-file)) :offset
                  52)
                 (claylib/wrap::%fileno :int :offset 56)
                 (claylib/wrap::%flags2 :int :offset 60)
                 (claylib/wrap::%cur-column :unsigned-short :offset
                  68)
                 (claylib/wrap::%vtable-offset :char :offset 70)
                 (claylib/wrap::%shortbuf :char :count 1 :offset 71)
                 (claylib/wrap::%codecvt
                  (:pointer (:struct claylib/wrap::%io-codecvt))
                  :offset 84)
                 (claylib/wrap::%wide-data
                  (:pointer (:struct claylib/wrap::%io-wide-data))
                  :offset 88)
                 (claylib/wrap::%freeres-list
                  (:pointer (:struct claylib/wrap::%io-file)) :offset
                  92)
                 (claylib/wrap::%freeres-buf (:pointer :void) :offset
                  96)
                 (claylib/wrap::%mode :int :offset 104)
                 (claylib/wrap::%unused2 :char :count 40 :offset 108))

(cffi:defctype claylib/wrap::file (:struct claylib/wrap::%io-file))

(declaim (inline claylib/wrap::clearerr))

(cffi:defcfun ("clearerr" claylib/wrap::clearerr)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::clearerr-unlocked))

(cffi:defcfun ("clearerr_unlocked" claylib/wrap::clearerr-unlocked)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::copysign))

(cffi:defcfun ("copysign" claylib/wrap::copysign)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::copysignf))

(cffi:defcfun ("copysignf" claylib/wrap::copysignf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::copysignl))

(cffi:defcfun ("__claw__copysignl" claylib/wrap::copysignl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-cos))

(cffi:defcfun ("cos" claylib/wrap::c-cos)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::cosf))

(cffi:defcfun ("cosf" claylib/wrap::cosf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-cosh))

(cffi:defcfun ("cosh" claylib/wrap::c-cosh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::coshf))

(cffi:defcfun ("coshf" claylib/wrap::coshf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::coshl))

(cffi:defcfun ("__claw__coshl" claylib/wrap::coshl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::cosl))

(cffi:defcfun ("__claw__cosl" claylib/wrap::cosl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ctermid))

(cffi:defcfun ("ctermid" claylib/wrap::ctermid)
              :string
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::dprintf))

(cffi:defcfun ("dprintf" claylib/wrap::dprintf)
              :int
              (claylib/wrap::%%fd :int)
              (claylib/wrap::%%fmt :string)
              &rest)

(declaim (inline claylib/wrap::drand48))

(cffi:defcfun ("drand48" claylib/wrap::drand48) :double)

(cffi:defcstruct (claylib/wrap::drand48-data :size 24)
                 (claylib/wrap::%%x :unsigned-short :count 3 :offset
                  0)
                 (claylib/wrap::%%old-x :unsigned-short :count 3
                  :offset 6)
                 (claylib/wrap::%%c :unsigned-short :offset 12)
                 (claylib/wrap::%%init :unsigned-short :offset 14)
                 (claylib/wrap::%%a :unsigned-long-long :offset 16))

(declaim (inline claylib/wrap::drand48-r))

(cffi:defcfun ("drand48_r" claylib/wrap::drand48-r)
              :int
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data)))
              (claylib/wrap::%%result (:pointer :double)))

(declaim (inline claylib/wrap::drem))

(cffi:defcfun ("drem" claylib/wrap::drem)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::dremf))

(cffi:defcfun ("dremf" claylib/wrap::dremf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::dreml))

(cffi:defcfun ("__claw__dreml" claylib/wrap::dreml)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ecvt))

(cffi:defcfun ("ecvt" claylib/wrap::ecvt)
              :string
              (claylib/wrap::%%value :double)
              (claylib/wrap::%%ndigit :int)
              (claylib/wrap::%%decpt (:pointer :int))
              (claylib/wrap::%%sign (:pointer :int)))

(declaim (inline claylib/wrap::erand48))

(cffi:defcfun ("erand48" claylib/wrap::erand48)
              :double
              (claylib/wrap::%%xsubi (:array :unsigned-short 3)))

(declaim (inline claylib/wrap::erand48-r))

(cffi:defcfun ("erand48_r" claylib/wrap::erand48-r)
              :int
              (claylib/wrap::%%xsubi (:array :unsigned-short 3))
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data)))
              (claylib/wrap::%%result (:pointer :double)))

(declaim (inline claylib/wrap::erf))

(cffi:defcfun ("erf" claylib/wrap::erf)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::erfc))

(cffi:defcfun ("erfc" claylib/wrap::erfc)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::erfcf))

(cffi:defcfun ("erfcf" claylib/wrap::erfcf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::erfcl))

(cffi:defcfun ("__claw__erfcl" claylib/wrap::erfcl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::erff))

(cffi:defcfun ("erff" claylib/wrap::erff)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::erfl))

(cffi:defcfun ("__claw__erfl" claylib/wrap::erfl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::exit))

(cffi:defcfun ("exit" claylib/wrap::exit)
              :void
              (claylib/wrap::%%status :int))

(declaim (inline claylib/wrap::c-exp))

(cffi:defcfun ("exp" claylib/wrap::c-exp)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::exp2))

(cffi:defcfun ("exp2" claylib/wrap::exp2)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::exp2f))

(cffi:defcfun ("exp2f" claylib/wrap::exp2f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::exp2l))

(cffi:defcfun ("__claw__exp2l" claylib/wrap::exp2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::expf))

(cffi:defcfun ("expf" claylib/wrap::expf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::expl))

(cffi:defcfun ("__claw__expl" claylib/wrap::expl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::expm1))

(cffi:defcfun ("expm1" claylib/wrap::expm1)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::expm1f))

(cffi:defcfun ("expm1f" claylib/wrap::expm1f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::expm1l))

(cffi:defcfun ("__claw__expm1l" claylib/wrap::expm1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fabs))

(cffi:defcfun ("fabs" claylib/wrap::fabs)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::fabsf))

(cffi:defcfun ("fabsf" claylib/wrap::fabsf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::fabsl))

(cffi:defcfun ("__claw__fabsl" claylib/wrap::fabsl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fclose))

(cffi:defcfun ("fclose" claylib/wrap::fclose)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fcvt))

(cffi:defcfun ("fcvt" claylib/wrap::fcvt)
              :string
              (claylib/wrap::%%value :double)
              (claylib/wrap::%%ndigit :int)
              (claylib/wrap::%%decpt (:pointer :int))
              (claylib/wrap::%%sign (:pointer :int)))

(declaim (inline claylib/wrap::fdim))

(cffi:defcfun ("fdim" claylib/wrap::fdim)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fdimf))

(cffi:defcfun ("fdimf" claylib/wrap::fdimf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fdiml))

(cffi:defcfun ("__claw__fdiml" claylib/wrap::fdiml)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fdopen))

(cffi:defcfun ("fdopen" claylib/wrap::fdopen)
              (:pointer claylib/wrap::file)
              (claylib/wrap::%%fd :int)
              (claylib/wrap::%%modes :string))

(declaim (inline claylib/wrap::feof))

(cffi:defcfun ("feof" claylib/wrap::feof)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::feof-unlocked))

(cffi:defcfun ("feof_unlocked" claylib/wrap::feof-unlocked)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::ferror))

(cffi:defcfun ("ferror" claylib/wrap::ferror)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::ferror-unlocked))

(cffi:defcfun ("ferror_unlocked" claylib/wrap::ferror-unlocked)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fflush))

(cffi:defcfun ("fflush" claylib/wrap::fflush)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fflush-unlocked))

(cffi:defcfun ("fflush_unlocked" claylib/wrap::fflush-unlocked)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::ffs))

(cffi:defcfun ("ffs" claylib/wrap::ffs) :int (claylib/wrap::%%i :int))

(declaim (inline claylib/wrap::ffsl))

(cffi:defcfun ("ffsl" claylib/wrap::ffsl)
              :int
              (claylib/wrap::%%l :long))

(declaim (inline claylib/wrap::ffsll))

(cffi:defcfun ("ffsll" claylib/wrap::ffsll)
              :int
              (claylib/wrap::%%ll :long-long))

(declaim (inline claylib/wrap::fgetc))

(cffi:defcfun ("fgetc" claylib/wrap::fgetc)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fgetc-unlocked))

(cffi:defcfun ("fgetc_unlocked" claylib/wrap::fgetc-unlocked)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fgets))

(cffi:defcfun ("fgets" claylib/wrap::fgets)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%n :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fileno))

(cffi:defcfun ("fileno" claylib/wrap::fileno)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fileno-unlocked))

(cffi:defcfun ("fileno_unlocked" claylib/wrap::fileno-unlocked)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::finite))

(cffi:defcfun ("finite" claylib/wrap::finite)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::finitef))

(cffi:defcfun ("finitef" claylib/wrap::finitef)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::finitel))

(cffi:defcfun ("__claw__finitel" claylib/wrap::finitel)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::flockfile))

(cffi:defcfun ("flockfile" claylib/wrap::flockfile)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::c-floor))

(cffi:defcfun ("floor" claylib/wrap::c-floor)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::floorf))

(cffi:defcfun ("floorf" claylib/wrap::floorf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::floorl))

(cffi:defcfun ("__claw__floorl" claylib/wrap::floorl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fma))

(cffi:defcfun ("fma" claylib/wrap::fma)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%z :double))

(declaim (inline claylib/wrap::fmaf))

(cffi:defcfun ("fmaf" claylib/wrap::fmaf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%z :float))

(declaim (inline claylib/wrap::fmal))

(cffi:defcfun ("__claw__fmal" claylib/wrap::fmal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%z
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fmax))

(cffi:defcfun ("fmax" claylib/wrap::fmax)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fmaxf))

(cffi:defcfun ("fmaxf" claylib/wrap::fmaxf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fmaxl))

(cffi:defcfun ("__claw__fmaxl" claylib/wrap::fmaxl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fmin))

(cffi:defcfun ("fmin" claylib/wrap::fmin)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fminf))

(cffi:defcfun ("fminf" claylib/wrap::fminf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fminl))

(cffi:defcfun ("__claw__fminl" claylib/wrap::fminl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fmod))

(cffi:defcfun ("fmod" claylib/wrap::fmod)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fmodf))

(cffi:defcfun ("fmodf" claylib/wrap::fmodf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fmodl))

(cffi:defcfun ("__claw__fmodl" claylib/wrap::fmodl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fopen))

(cffi:defcfun ("fopen" claylib/wrap::fopen)
              (:pointer claylib/wrap::file)
              (claylib/wrap::%%filename :string)
              (claylib/wrap::%%modes :string))

(declaim (inline claylib/wrap::fprintf))

(cffi:defcfun ("fprintf" claylib/wrap::fprintf)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file))
              (claylib/wrap::%%format :string)
              &rest)

(declaim (inline claylib/wrap::fputc))

(cffi:defcfun ("fputc" claylib/wrap::fputc)
              :int
              (claylib/wrap::%%c :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fputc-unlocked))

(cffi:defcfun ("fputc_unlocked" claylib/wrap::fputc-unlocked)
              :int
              (claylib/wrap::%%c :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::fputs))

(cffi:defcfun ("fputs" claylib/wrap::fputs)
              :int
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::free))

(cffi:defcfun ("free" claylib/wrap::free)
              :void
              (claylib/wrap::%%ptr (:pointer :void)))

(declaim (inline claylib/wrap::freopen))

(cffi:defcfun ("freopen" claylib/wrap::freopen)
              (:pointer claylib/wrap::file)
              (claylib/wrap::%%filename :string)
              (claylib/wrap::%%modes :string)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::frexp))

(cffi:defcfun ("frexp" claylib/wrap::frexp)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::frexpf))

(cffi:defcfun ("frexpf" claylib/wrap::frexpf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::frexpl))

(cffi:defcfun ("__claw__frexpl" claylib/wrap::frexpl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::fscanf))

(cffi:defcfun ("fscanf" claylib/wrap::fscanf)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file))
              (claylib/wrap::%%format :string)
              &rest)

(declaim (inline claylib/wrap::fseek))

(cffi:defcfun ("fseek" claylib/wrap::fseek)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file))
              (claylib/wrap::%%off :long)
              (claylib/wrap::%%whence :int))

(declaim (inline claylib/wrap::ftell))

(cffi:defcfun ("ftell" claylib/wrap::ftell)
              :long
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::ftrylockfile))

(cffi:defcfun ("ftrylockfile" claylib/wrap::ftrylockfile)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::funlockfile))

(cffi:defcfun ("funlockfile" claylib/wrap::funlockfile)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::gamma))

(cffi:defcfun ("gamma" claylib/wrap::gamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::gammaf))

(cffi:defcfun ("gammaf" claylib/wrap::gammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::gammal))

(cffi:defcfun ("__claw__gammal" claylib/wrap::gammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::gcvt))

(cffi:defcfun ("gcvt" claylib/wrap::gcvt)
              :string
              (claylib/wrap::%%value :double)
              (claylib/wrap::%%ndigit :int)
              (claylib/wrap::%%buf :string))

(declaim (inline claylib/wrap::getc))

(cffi:defcfun ("getc" claylib/wrap::getc)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::getc-unlocked))

(cffi:defcfun ("getc_unlocked" claylib/wrap::getc-unlocked)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::getchar))

(cffi:defcfun ("getchar" claylib/wrap::getchar) :int)

(declaim (inline claylib/wrap::getchar-unlocked))

(cffi:defcfun ("getchar_unlocked" claylib/wrap::getchar-unlocked)
              :int)

(declaim (inline claylib/wrap::getenv))

(cffi:defcfun ("getenv" claylib/wrap::getenv)
              :string
              (claylib/wrap::%%name :string))

(declaim (inline claylib/wrap::getloadavg))

(cffi:defcfun ("getloadavg" claylib/wrap::getloadavg)
              :int
              (claylib/wrap::%%loadavg (:pointer :double))
              (claylib/wrap::%%nelem :int))

(declaim (inline claylib/wrap::getsubopt))

(cffi:defcfun ("getsubopt" claylib/wrap::getsubopt)
              :int
              (claylib/wrap::%%optionp :string)
              (claylib/wrap::%%tokens :string)
              (claylib/wrap::%%valuep :string))

(declaim (inline claylib/wrap::getw))

(cffi:defcfun ("getw" claylib/wrap::getw)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::hypot))

(cffi:defcfun ("hypot" claylib/wrap::hypot)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::hypotf))

(cffi:defcfun ("hypotf" claylib/wrap::hypotf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::hypotl))

(cffi:defcfun ("__claw__hypotl" claylib/wrap::hypotl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ilogb))

(cffi:defcfun ("ilogb" claylib/wrap::ilogb)
              :int
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::ilogbf))

(cffi:defcfun ("ilogbf" claylib/wrap::ilogbf)
              :int
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::ilogbl))

(cffi:defcfun ("__claw__ilogbl" claylib/wrap::ilogbl)
              :int
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::index))

(cffi:defcfun ("index" claylib/wrap::index)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%c :int))

(declaim (inline claylib/wrap::isinf))

(cffi:defcfun ("isinf" claylib/wrap::isinf)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::isinff))

(cffi:defcfun ("isinff" claylib/wrap::isinff)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::isinfl))

(cffi:defcfun ("__claw__isinfl" claylib/wrap::isinfl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::isnan))

(cffi:defcfun ("isnan" claylib/wrap::isnan)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::isnanf))

(cffi:defcfun ("isnanf" claylib/wrap::isnanf)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::isnanl))

(cffi:defcfun ("__claw__isnanl" claylib/wrap::isnanl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::j0))

(cffi:defcfun ("j0" claylib/wrap::j0)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::j0f))

(cffi:defcfun ("j0f" claylib/wrap::j0f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::j0l))

(cffi:defcfun ("__claw__j0l" claylib/wrap::j0l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::j1))

(cffi:defcfun ("j1" claylib/wrap::j1)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::j1f))

(cffi:defcfun ("j1f" claylib/wrap::j1f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::j1l))

(cffi:defcfun ("__claw__j1l" claylib/wrap::j1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::jn))

(cffi:defcfun ("jn" claylib/wrap::jn)
              :double
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :double))

(declaim (inline claylib/wrap::jnf))

(cffi:defcfun ("jnf" claylib/wrap::jnf)
              :float
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :float))

(declaim (inline claylib/wrap::jnl))

(cffi:defcfun ("__claw__jnl" claylib/wrap::jnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::jrand48))

(cffi:defcfun ("jrand48" claylib/wrap::jrand48)
              :long
              (claylib/wrap::%%xsubi (:array :unsigned-short 3)))

(declaim (inline claylib/wrap::jrand48-r))

(cffi:defcfun ("jrand48_r" claylib/wrap::jrand48-r)
              :int
              (claylib/wrap::%%xsubi (:array :unsigned-short 3))
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data)))
              (claylib/wrap::%%result (:pointer :long)))

(declaim (inline claylib/wrap::l64a))

(cffi:defcfun ("l64a" claylib/wrap::l64a)
              :string
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::labs))

(cffi:defcfun ("labs" claylib/wrap::labs)
              :long
              (claylib/wrap::%%x :long))

(declaim (inline claylib/wrap::lcong48))

(cffi:defcfun ("lcong48" claylib/wrap::lcong48)
              :void
              (claylib/wrap::%%param (:array :unsigned-short 7)))

(declaim (inline claylib/wrap::lcong48-r))

(cffi:defcfun ("lcong48_r" claylib/wrap::lcong48-r)
              :int
              (claylib/wrap::%%param (:array :unsigned-short 7))
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data))))

(declaim (inline claylib/wrap::ldexp))

(cffi:defcfun ("ldexp" claylib/wrap::ldexp)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::ldexpf))

(cffi:defcfun ("ldexpf" claylib/wrap::ldexpf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::ldexpl))

(cffi:defcfun ("__claw__ldexpl" claylib/wrap::ldexpl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::lgamma))

(cffi:defcfun ("lgamma" claylib/wrap::lgamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::lgamma-r))

(cffi:defcfun ("lgamma_r" claylib/wrap::lgamma-r)
              :double
              (claylib/wrap::arg0 :double)
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::lgammaf))

(cffi:defcfun ("lgammaf" claylib/wrap::lgammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::lgammaf-r))

(cffi:defcfun ("lgammaf_r" claylib/wrap::lgammaf-r)
              :float
              (claylib/wrap::arg0 :float)
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::lgammal))

(cffi:defcfun ("__claw__lgammal" claylib/wrap::lgammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::lgammal-r))

(cffi:defcfun ("__claw__lgammal_r" claylib/wrap::lgammal-r)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::llabs))

(cffi:defcfun ("llabs" claylib/wrap::llabs)
              :long-long
              (claylib/wrap::%%x :long-long))

(declaim (inline claylib/wrap::llrint))

(cffi:defcfun ("llrint" claylib/wrap::llrint)
              :long-long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::llrintf))

(cffi:defcfun ("llrintf" claylib/wrap::llrintf)
              :long-long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::llrintl))

(cffi:defcfun ("__claw__llrintl" claylib/wrap::llrintl)
              :long-long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::llround))

(cffi:defcfun ("llround" claylib/wrap::llround)
              :long-long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::llroundf))

(cffi:defcfun ("llroundf" claylib/wrap::llroundf)
              :long-long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::llroundl))

(cffi:defcfun ("__claw__llroundl" claylib/wrap::llroundl)
              :long-long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-log))

(cffi:defcfun ("log" claylib/wrap::c-log)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log10))

(cffi:defcfun ("log10" claylib/wrap::log10)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log10f))

(cffi:defcfun ("log10f" claylib/wrap::log10f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::log10l))

(cffi:defcfun ("__claw__log10l" claylib/wrap::log10l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::log1p))

(cffi:defcfun ("log1p" claylib/wrap::log1p)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log1pf))

(cffi:defcfun ("log1pf" claylib/wrap::log1pf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::log1pl))

(cffi:defcfun ("__claw__log1pl" claylib/wrap::log1pl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::log2))

(cffi:defcfun ("log2" claylib/wrap::log2)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log2f))

(cffi:defcfun ("log2f" claylib/wrap::log2f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::log2l))

(cffi:defcfun ("__claw__log2l" claylib/wrap::log2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::logb))

(cffi:defcfun ("logb" claylib/wrap::logb)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::logbf))

(cffi:defcfun ("logbf" claylib/wrap::logbf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::logbl))

(cffi:defcfun ("__claw__logbl" claylib/wrap::logbl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::logf))

(cffi:defcfun ("logf" claylib/wrap::logf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::logl))

(cffi:defcfun ("__claw__logl" claylib/wrap::logl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::lrand48))

(cffi:defcfun ("lrand48" claylib/wrap::lrand48) :long)

(declaim (inline claylib/wrap::lrand48-r))

(cffi:defcfun ("lrand48_r" claylib/wrap::lrand48-r)
              :int
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data)))
              (claylib/wrap::%%result (:pointer :long)))

(declaim (inline claylib/wrap::lrint))

(cffi:defcfun ("lrint" claylib/wrap::lrint)
              :long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::lrintf))

(cffi:defcfun ("lrintf" claylib/wrap::lrintf)
              :long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::lrintl))

(cffi:defcfun ("__claw__lrintl" claylib/wrap::lrintl)
              :long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::lround))

(cffi:defcfun ("lround" claylib/wrap::lround)
              :long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::lroundf))

(cffi:defcfun ("lroundf" claylib/wrap::lroundf)
              :long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::lroundl))

(cffi:defcfun ("__claw__lroundl" claylib/wrap::lroundl)
              :long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::mkdtemp))

(cffi:defcfun ("mkdtemp" claylib/wrap::mkdtemp)
              :string
              (claylib/wrap::%%template :string))

(declaim (inline claylib/wrap::mkstemp))

(cffi:defcfun ("mkstemp" claylib/wrap::mkstemp)
              :int
              (claylib/wrap::%%template :string))

(declaim (inline claylib/wrap::mkstemps))

(cffi:defcfun ("mkstemps" claylib/wrap::mkstemps)
              :int
              (claylib/wrap::%%template :string)
              (claylib/wrap::%%suffixlen :int))

(declaim (inline claylib/wrap::mktemp))

(cffi:defcfun ("mktemp" claylib/wrap::mktemp)
              :string
              (claylib/wrap::%%template :string))

(declaim (inline claylib/wrap::modf))

(cffi:defcfun ("modf" claylib/wrap::modf)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%iptr (:pointer :double)))

(declaim (inline claylib/wrap::modff))

(cffi:defcfun ("modff" claylib/wrap::modff)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%iptr (:pointer :float)))

(declaim (inline claylib/wrap::modfl))

(cffi:defcfun ("__claw__modfl" claylib/wrap::modfl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%iptr
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::mrand48))

(cffi:defcfun ("mrand48" claylib/wrap::mrand48) :long)

(declaim (inline claylib/wrap::mrand48-r))

(cffi:defcfun ("mrand48_r" claylib/wrap::mrand48-r)
              :int
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data)))
              (claylib/wrap::%%result (:pointer :long)))

(declaim (inline claylib/wrap::nan))

(cffi:defcfun ("nan" claylib/wrap::nan)
              :double
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::nanf))

(cffi:defcfun ("nanf" claylib/wrap::nanf)
              :float
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::nanl))

(cffi:defcfun ("__claw__nanl" claylib/wrap::nanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::nearbyint))

(cffi:defcfun ("nearbyint" claylib/wrap::nearbyint)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::nearbyintf))

(cffi:defcfun ("nearbyintf" claylib/wrap::nearbyintf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::nearbyintl))

(cffi:defcfun ("__claw__nearbyintl" claylib/wrap::nearbyintl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nextafter))

(cffi:defcfun ("nextafter" claylib/wrap::nextafter)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::nextafterf))

(cffi:defcfun ("nextafterf" claylib/wrap::nextafterf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::nextafterl))

(cffi:defcfun ("__claw__nextafterl" claylib/wrap::nextafterl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nexttoward))

(cffi:defcfun ("__claw__nexttoward" claylib/wrap::nexttoward)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nexttowardf))

(cffi:defcfun ("__claw__nexttowardf" claylib/wrap::nexttowardf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nexttowardl))

(cffi:defcfun ("__claw__nexttowardl" claylib/wrap::nexttowardl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nrand48))

(cffi:defcfun ("nrand48" claylib/wrap::nrand48)
              :long
              (claylib/wrap::%%xsubi (:array :unsigned-short 3)))

(declaim (inline claylib/wrap::nrand48-r))

(cffi:defcfun ("nrand48_r" claylib/wrap::nrand48-r)
              :int
              (claylib/wrap::%%xsubi (:array :unsigned-short 3))
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data)))
              (claylib/wrap::%%result (:pointer :long)))

(declaim (inline claylib/wrap::on-exit))

(cffi:defcfun ("on_exit" claylib/wrap::on-exit)
              :int
              (claylib/wrap::%%func (:pointer :void))
              (claylib/wrap::%%arg (:pointer :void)))

(declaim (inline claylib/wrap::pclose))

(cffi:defcfun ("pclose" claylib/wrap::pclose)
              :int
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::perror))

(cffi:defcfun ("perror" claylib/wrap::perror)
              :void
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::popen))

(cffi:defcfun ("popen" claylib/wrap::popen)
              (:pointer claylib/wrap::file)
              (claylib/wrap::%%command :string)
              (claylib/wrap::%%modes :string))

(declaim (inline claylib/wrap::pow))

(cffi:defcfun ("pow" claylib/wrap::pow)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::powf))

(cffi:defcfun ("powf" claylib/wrap::powf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::powl))

(cffi:defcfun ("__claw__powl" claylib/wrap::powl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::printf))

(cffi:defcfun ("printf" claylib/wrap::printf)
              :int
              (claylib/wrap::%%format :string)
              &rest)

(declaim (inline claylib/wrap::putc))

(cffi:defcfun ("putc" claylib/wrap::putc)
              :int
              (claylib/wrap::%%c :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::putc-unlocked))

(cffi:defcfun ("putc_unlocked" claylib/wrap::putc-unlocked)
              :int
              (claylib/wrap::%%c :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::putchar))

(cffi:defcfun ("putchar" claylib/wrap::putchar)
              :int
              (claylib/wrap::%%c :int))

(declaim (inline claylib/wrap::putchar-unlocked))

(cffi:defcfun ("putchar_unlocked" claylib/wrap::putchar-unlocked)
              :int
              (claylib/wrap::%%c :int))

(declaim (inline claylib/wrap::putenv))

(cffi:defcfun ("putenv" claylib/wrap::putenv)
              :int
              (claylib/wrap::%%string :string))

(declaim (inline claylib/wrap::puts))

(cffi:defcfun ("puts" claylib/wrap::puts)
              :int
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::putw))

(cffi:defcfun ("putw" claylib/wrap::putw)
              :int
              (claylib/wrap::%%w :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::qecvt))

(cffi:defcfun ("__claw__qecvt" claylib/wrap::qecvt)
              :string
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%ndigit :int)
              (claylib/wrap::%%decpt (:pointer :int))
              (claylib/wrap::%%sign (:pointer :int)))

(declaim (inline claylib/wrap::qfcvt))

(cffi:defcfun ("__claw__qfcvt" claylib/wrap::qfcvt)
              :string
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%ndigit :int)
              (claylib/wrap::%%decpt (:pointer :int))
              (claylib/wrap::%%sign (:pointer :int)))

(declaim (inline claylib/wrap::qgcvt))

(cffi:defcfun ("__claw__qgcvt" claylib/wrap::qgcvt)
              :string
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%ndigit :int)
              (claylib/wrap::%%buf :string))

(declaim (inline claylib/wrap::quick-exit))

(cffi:defcfun ("quick_exit" claylib/wrap::quick-exit)
              :void
              (claylib/wrap::%%status :int))

(declaim (inline claylib/wrap::rand))

(cffi:defcfun ("rand" claylib/wrap::rand) :int)

(declaim (inline claylib/wrap::rand-r))

(cffi:defcfun ("rand_r" claylib/wrap::rand-r)
              :int
              (claylib/wrap::%%seed (:pointer :unsigned-int)))

(declaim (inline claylib/wrap::c-random))

(cffi:defcfun ("random" claylib/wrap::c-random) :long)

(declaim (inline claylib/wrap::realpath))

(cffi:defcfun ("realpath" claylib/wrap::realpath)
              :string
              (claylib/wrap::%%name :string)
              (claylib/wrap::%%resolved :string))

(declaim (inline claylib/wrap::remainder))

(cffi:defcfun ("remainder" claylib/wrap::remainder)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::remainderf))

(cffi:defcfun ("remainderf" claylib/wrap::remainderf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::remainderl))

(cffi:defcfun ("__claw__remainderl" claylib/wrap::remainderl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-remove))

(cffi:defcfun ("remove" claylib/wrap::c-remove)
              :int
              (claylib/wrap::%%filename :string))

(declaim (inline claylib/wrap::remquo))

(cffi:defcfun ("remquo" claylib/wrap::remquo)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::remquof))

(cffi:defcfun ("remquof" claylib/wrap::remquof)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::remquol))

(cffi:defcfun ("__claw__remquol" claylib/wrap::remquol)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::rename))

(cffi:defcfun ("rename" claylib/wrap::rename)
              :int
              (claylib/wrap::%%old :string)
              (claylib/wrap::%%new :string))

(declaim (inline claylib/wrap::renameat))

(cffi:defcfun ("renameat" claylib/wrap::renameat)
              :int
              (claylib/wrap::%%oldfd :int)
              (claylib/wrap::%%old :string)
              (claylib/wrap::%%newfd :int)
              (claylib/wrap::%%new :string))

(declaim (inline claylib/wrap::rewind))

(cffi:defcfun ("rewind" claylib/wrap::rewind)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::rindex))

(cffi:defcfun ("rindex" claylib/wrap::rindex)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%c :int))

(declaim (inline claylib/wrap::rint))

(cffi:defcfun ("rint" claylib/wrap::rint)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::rintf))

(cffi:defcfun ("rintf" claylib/wrap::rintf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::rintl))

(cffi:defcfun ("__claw__rintl" claylib/wrap::rintl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-round))

(cffi:defcfun ("round" claylib/wrap::c-round)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::roundf))

(cffi:defcfun ("roundf" claylib/wrap::roundf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::roundl))

(cffi:defcfun ("__claw__roundl" claylib/wrap::roundl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::rpmatch))

(cffi:defcfun ("rpmatch" claylib/wrap::rpmatch)
              :int
              (claylib/wrap::%%response :string))

(declaim (inline claylib/wrap::scalb))

(cffi:defcfun ("scalb" claylib/wrap::scalb)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :double))

(declaim (inline claylib/wrap::scalbf))

(cffi:defcfun ("scalbf" claylib/wrap::scalbf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :float))

(declaim (inline claylib/wrap::scalbl))

(cffi:defcfun ("__claw__scalbl" claylib/wrap::scalbl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::scalbln))

(cffi:defcfun ("scalbln" claylib/wrap::scalbln)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::scalblnf))

(cffi:defcfun ("scalblnf" claylib/wrap::scalblnf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::scalblnl))

(cffi:defcfun ("__claw__scalblnl" claylib/wrap::scalblnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::scalbn))

(cffi:defcfun ("scalbn" claylib/wrap::scalbn)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::scalbnf))

(cffi:defcfun ("scalbnf" claylib/wrap::scalbnf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::scalbnl))

(cffi:defcfun ("__claw__scalbnl" claylib/wrap::scalbnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::scanf))

(cffi:defcfun ("scanf" claylib/wrap::scanf)
              :int
              (claylib/wrap::%%format :string)
              &rest)

(declaim (inline claylib/wrap::seed48))

(cffi:defcfun ("seed48" claylib/wrap::seed48)
              (:pointer :unsigned-short)
              (claylib/wrap::%%seed16v (:array :unsigned-short 3)))

(declaim (inline claylib/wrap::seed48-r))

(cffi:defcfun ("seed48_r" claylib/wrap::seed48-r)
              :int
              (claylib/wrap::%%seed16v (:array :unsigned-short 3))
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data))))

(cffi:defcstruct (claylib/wrap::|C:@SA@FD-SET| :size 128))

(cffi:defctype claylib/wrap::fd-set
               (:struct claylib/wrap::|C:@SA@FD-SET|))

(cffi:defcstruct (claylib/wrap::timeval :size 8))

(declaim (inline claylib/wrap::select))

(cffi:defcfun ("select" claylib/wrap::select)
              :int
              (claylib/wrap::%%nfds :int)
              (claylib/wrap::%%readfds
               (:pointer claylib/wrap::fd-set))
              (claylib/wrap::%%writefds
               (:pointer claylib/wrap::fd-set))
              (claylib/wrap::%%exceptfds
               (:pointer claylib/wrap::fd-set))
              (claylib/wrap::%%timeout
               (:pointer (:struct claylib/wrap::timeval))))

(declaim (inline claylib/wrap::setbuf))

(cffi:defcfun ("setbuf" claylib/wrap::setbuf)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file))
              (claylib/wrap::%%buf :string))

(declaim (inline claylib/wrap::setenv))

(cffi:defcfun ("setenv" claylib/wrap::setenv)
              :int
              (claylib/wrap::%%name :string)
              (claylib/wrap::%%value :string)
              (claylib/wrap::%%replace :int))

(declaim (inline claylib/wrap::setlinebuf))

(cffi:defcfun ("setlinebuf" claylib/wrap::setlinebuf)
              :void
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::setstate))

(cffi:defcfun ("setstate" claylib/wrap::setstate)
              :string
              (claylib/wrap::%%statebuf :string))

(cffi:defcstruct (claylib/wrap::random-data :size 28)
                 (claylib/wrap::rand-type :int :offset 12)
                 (claylib/wrap::rand-deg :int :offset 16)
                 (claylib/wrap::rand-sep :int :offset 20))

(declaim (inline claylib/wrap::setstate-r))

(cffi:defcfun ("setstate_r" claylib/wrap::setstate-r)
              :int
              (claylib/wrap::%%statebuf :string)
              (claylib/wrap::%%buf
               (:pointer (:struct claylib/wrap::random-data))))

(declaim (inline claylib/wrap::significand))

(cffi:defcfun ("significand" claylib/wrap::significand)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::significandf))

(cffi:defcfun ("significandf" claylib/wrap::significandf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::significandl))

(cffi:defcfun ("__claw__significandl" claylib/wrap::significandl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-sin))

(cffi:defcfun ("sin" claylib/wrap::c-sin)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::sinf))

(cffi:defcfun ("sinf" claylib/wrap::sinf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-sinh))

(cffi:defcfun ("sinh" claylib/wrap::c-sinh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::sinhf))

(cffi:defcfun ("sinhf" claylib/wrap::sinhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::sinhl))

(cffi:defcfun ("__claw__sinhl" claylib/wrap::sinhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::sinl))

(cffi:defcfun ("__claw__sinl" claylib/wrap::sinl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::sprintf))

(cffi:defcfun ("sprintf" claylib/wrap::sprintf)
              :int
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%format :string)
              &rest)

(declaim (inline claylib/wrap::c-sqrt))

(cffi:defcfun ("sqrt" claylib/wrap::c-sqrt)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::sqrtf))

(cffi:defcfun ("sqrtf" claylib/wrap::sqrtf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::sqrtl))

(cffi:defcfun ("__claw__sqrtl" claylib/wrap::sqrtl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::srand))

(cffi:defcfun ("srand" claylib/wrap::srand)
              :void
              (claylib/wrap::%%seed :unsigned-int))

(declaim (inline claylib/wrap::srand48))

(cffi:defcfun ("srand48" claylib/wrap::srand48)
              :void
              (claylib/wrap::%%seedval :long))

(declaim (inline claylib/wrap::srand48-r))

(cffi:defcfun ("srand48_r" claylib/wrap::srand48-r)
              :int
              (claylib/wrap::%%seedval :long)
              (claylib/wrap::%%buffer
               (:pointer (:struct claylib/wrap::drand48-data))))

(declaim (inline claylib/wrap::srandom))

(cffi:defcfun ("srandom" claylib/wrap::srandom)
              :void
              (claylib/wrap::%%seed :unsigned-int))

(declaim (inline claylib/wrap::srandom-r))

(cffi:defcfun ("srandom_r" claylib/wrap::srandom-r)
              :int
              (claylib/wrap::%%seed :unsigned-int)
              (claylib/wrap::%%buf
               (:pointer (:struct claylib/wrap::random-data))))

(declaim (inline claylib/wrap::sscanf))

(cffi:defcfun ("sscanf" claylib/wrap::sscanf)
              :int
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%format :string)
              &rest)

(declaim (inline claylib/wrap::stpcpy))

(cffi:defcfun ("stpcpy" claylib/wrap::stpcpy)
              :string
              (claylib/wrap::%%dest :string)
              (claylib/wrap::%%src :string))

(declaim (inline claylib/wrap::strcasecmp))

(cffi:defcfun ("strcasecmp" claylib/wrap::strcasecmp)
              :int
              (claylib/wrap::%%s1 :string)
              (claylib/wrap::%%s2 :string))

(declaim (inline claylib/wrap::strcat))

(cffi:defcfun ("strcat" claylib/wrap::strcat)
              :string
              (claylib/wrap::%%dest :string)
              (claylib/wrap::%%src :string))

(declaim (inline claylib/wrap::strchr))

(cffi:defcfun ("strchr" claylib/wrap::strchr)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%c :int))

(declaim (inline claylib/wrap::strcmp))

(cffi:defcfun ("strcmp" claylib/wrap::strcmp)
              :int
              (claylib/wrap::%%s1 :string)
              (claylib/wrap::%%s2 :string))

(declaim (inline claylib/wrap::strcoll))

(cffi:defcfun ("strcoll" claylib/wrap::strcoll)
              :int
              (claylib/wrap::%%s1 :string)
              (claylib/wrap::%%s2 :string))

(declaim (inline claylib/wrap::strcpy))

(cffi:defcfun ("strcpy" claylib/wrap::strcpy)
              :string
              (claylib/wrap::%%dest :string)
              (claylib/wrap::%%src :string))

(declaim (inline claylib/wrap::strcspn))

(cffi:defcfun ("strcspn" claylib/wrap::strcspn)
              :unsigned-long
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%reject :string))

(declaim (inline claylib/wrap::strdup))

(cffi:defcfun ("strdup" claylib/wrap::strdup)
              :string
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::strerror))

(cffi:defcfun ("strerror" claylib/wrap::strerror)
              :string
              (claylib/wrap::%%errnum :int))

(declaim (inline claylib/wrap::strlen))

(cffi:defcfun ("strlen" claylib/wrap::strlen)
              :unsigned-long
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::strpbrk))

(cffi:defcfun ("strpbrk" claylib/wrap::strpbrk)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%accept :string))

(declaim (inline claylib/wrap::strrchr))

(cffi:defcfun ("strrchr" claylib/wrap::strrchr)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%c :int))

(declaim (inline claylib/wrap::strsep))

(cffi:defcfun ("strsep" claylib/wrap::strsep)
              :string
              (claylib/wrap::%%stringp :string)
              (claylib/wrap::%%delim :string))

(declaim (inline claylib/wrap::strsignal))

(cffi:defcfun ("strsignal" claylib/wrap::strsignal)
              :string
              (claylib/wrap::%%sig :int))

(declaim (inline claylib/wrap::strspn))

(cffi:defcfun ("strspn" claylib/wrap::strspn)
              :unsigned-long
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%accept :string))

(declaim (inline claylib/wrap::strstr))

(cffi:defcfun ("strstr" claylib/wrap::strstr)
              :string
              (claylib/wrap::%%haystack :string)
              (claylib/wrap::%%needle :string))

(declaim (inline claylib/wrap::strtod))

(cffi:defcfun ("strtod" claylib/wrap::strtod)
              :double
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string))

(declaim (inline claylib/wrap::strtof))

(cffi:defcfun ("strtof" claylib/wrap::strtof)
              :float
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string))

(declaim (inline claylib/wrap::strtok))

(cffi:defcfun ("strtok" claylib/wrap::strtok)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%delim :string))

(declaim (inline claylib/wrap::strtok-r))

(cffi:defcfun ("strtok_r" claylib/wrap::strtok-r)
              :string
              (claylib/wrap::%%s :string)
              (claylib/wrap::%%delim :string)
              (claylib/wrap::%%save-ptr :string))

(declaim (inline claylib/wrap::strtol))

(cffi:defcfun ("strtol" claylib/wrap::strtol)
              :long
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string)
              (claylib/wrap::%%base :int))

(declaim (inline claylib/wrap::strtold))

(cffi:defcfun ("__claw__strtold" claylib/wrap::strtold)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string))

(declaim (inline claylib/wrap::strtoll))

(cffi:defcfun ("strtoll" claylib/wrap::strtoll)
              :long-long
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string)
              (claylib/wrap::%%base :int))

(declaim (inline claylib/wrap::strtoq))

(cffi:defcfun ("strtoq" claylib/wrap::strtoq)
              :long-long
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string)
              (claylib/wrap::%%base :int))

(declaim (inline claylib/wrap::strtoul))

(cffi:defcfun ("strtoul" claylib/wrap::strtoul)
              :unsigned-long
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string)
              (claylib/wrap::%%base :int))

(declaim (inline claylib/wrap::strtoull))

(cffi:defcfun ("strtoull" claylib/wrap::strtoull)
              :unsigned-long-long
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string)
              (claylib/wrap::%%base :int))

(declaim (inline claylib/wrap::strtouq))

(cffi:defcfun ("strtouq" claylib/wrap::strtouq)
              :unsigned-long-long
              (claylib/wrap::%%nptr :string)
              (claylib/wrap::%%endptr :string)
              (claylib/wrap::%%base :int))

(declaim (inline claylib/wrap::system))

(cffi:defcfun ("system" claylib/wrap::system)
              :int
              (claylib/wrap::%%command :string))

(declaim (inline claylib/wrap::c-tan))

(cffi:defcfun ("tan" claylib/wrap::c-tan)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::tanf))

(cffi:defcfun ("tanf" claylib/wrap::tanf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-tanh))

(cffi:defcfun ("tanh" claylib/wrap::c-tanh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::tanhf))

(cffi:defcfun ("tanhf" claylib/wrap::tanhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::tanhl))

(cffi:defcfun ("__claw__tanhl" claylib/wrap::tanhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::tanl))

(cffi:defcfun ("__claw__tanl" claylib/wrap::tanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::tempnam))

(cffi:defcfun ("tempnam" claylib/wrap::tempnam)
              :string
              (claylib/wrap::%%dir :string)
              (claylib/wrap::%%pfx :string))

(declaim (inline claylib/wrap::tgamma))

(cffi:defcfun ("tgamma" claylib/wrap::tgamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::tgammaf))

(cffi:defcfun ("tgammaf" claylib/wrap::tgammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::tgammal))

(cffi:defcfun ("__claw__tgammal" claylib/wrap::tgammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::tmpfile))

(cffi:defcfun ("tmpfile" claylib/wrap::tmpfile)
              (:pointer claylib/wrap::file))

(declaim (inline claylib/wrap::tmpnam))

(cffi:defcfun ("tmpnam" claylib/wrap::tmpnam)
              :string
              (claylib/wrap::arg0 :string))

(declaim (inline claylib/wrap::tmpnam-r))

(cffi:defcfun ("tmpnam_r" claylib/wrap::tmpnam-r)
              :string
              (claylib/wrap::%%s :string))

(declaim (inline claylib/wrap::trunc))

(cffi:defcfun ("trunc" claylib/wrap::trunc)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::truncf))

(cffi:defcfun ("truncf" claylib/wrap::truncf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::truncl))

(cffi:defcfun ("__claw__truncl" claylib/wrap::truncl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ungetc))

(cffi:defcfun ("ungetc" claylib/wrap::ungetc)
              :int
              (claylib/wrap::%%c :int)
              (claylib/wrap::%%stream (:pointer claylib/wrap::file)))

(declaim (inline claylib/wrap::unsetenv))

(cffi:defcfun ("unsetenv" claylib/wrap::unsetenv)
              :int
              (claylib/wrap::%%name :string))

(declaim (inline claylib/wrap::y0))

(cffi:defcfun ("y0" claylib/wrap::y0)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::y0f))

(cffi:defcfun ("y0f" claylib/wrap::y0f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::y0l))

(cffi:defcfun ("__claw__y0l" claylib/wrap::y0l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::y1))

(cffi:defcfun ("y1" claylib/wrap::y1)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::y1f))

(cffi:defcfun ("y1f" claylib/wrap::y1f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::y1l))

(cffi:defcfun ("__claw__y1l" claylib/wrap::y1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::yn))

(cffi:defcfun ("yn" claylib/wrap::yn)
              :double
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :double))

(declaim (inline claylib/wrap::ynf))

(cffi:defcfun ("ynf" claylib/wrap::ynf)
              :float
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :float))

(declaim (inline claylib/wrap::ynl))

(cffi:defcfun ("__claw__ynl" claylib/wrap::ynl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::result
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1
               (:pointer claylib/wrap::long-double)))

(cffi:defcstruct (claylib/wrap::gui-style-prop :size 8)
                 (claylib/wrap::control-id :unsigned-short :offset 0)
                 (claylib/wrap::property-id :unsigned-short :offset
                  2)
                 (claylib/wrap::property-value :unsigned-int :offset
                  4))

(cffi:defcstruct (claylib/wrap::timespec :size 8))

(cffi:defcstruct (claylib/wrap::|C:@SA@--FSID-T| :size 8)
                 (claylib/wrap::%%val :int :count 2 :offset 0))

(cffi:defcunion (claylib/wrap::|C:@SA@--MBSTATE-T@U@--MBSTATE-T.H@451|
                 :size 4)
                (claylib/wrap::%%wch :int)
                (claylib/wrap::%%wchb :char :count 4))

(cffi:defcstruct (claylib/wrap::|C:@SA@--MBSTATE-T| :size 8)
                 (claylib/wrap::%%count :int :offset 0)
                 (claylib/wrap::%%value
                  (:union
                   claylib/wrap::|C:@SA@--MBSTATE-T@U@--MBSTATE-T.H@451|)
                  :offset 4))

(cffi:defcstruct (claylib/wrap::|C:@SA@--ONCE-FLAG| :size 4)
                 (claylib/wrap::%%data :int :offset 0))

(cffi:defcstruct (claylib/wrap::|C:@SA@--SIGSET-T| :size 128)
                 (claylib/wrap::%%val :unsigned-long :count 32
                  :offset 0))

(cffi:defcstruct (claylib/wrap::|C:@SA@DIV-T| :size 8)
                 (claylib/wrap::quot :int :offset 0)
                 (claylib/wrap::c-rem :int :offset 4))

(cffi:defcstruct (claylib/wrap::|C:@SA@LDIV-T| :size 8)
                 (claylib/wrap::quot :long :offset 0)
                 (claylib/wrap::c-rem :long :offset 4))

(cffi:defcstruct (claylib/wrap::|C:@SA@LLDIV-T| :size 16)
                 (claylib/wrap::quot :long-long :offset 0)
                 (claylib/wrap::c-rem :long-long :offset 8))

(cffi:defctype claylib/wrap::blend-mode
               claylib/wrap::|C:@EA@BLEND-MODE|)

(cffi:defctype claylib/wrap::camera-mode
               claylib/wrap::|C:@EA@CAMERA-MODE|)

(cffi:defctype claylib/wrap::camera-projection
               claylib/wrap::|C:@EA@CAMERA-PROJECTION|)

(cffi:defctype claylib/wrap::config-flags
               claylib/wrap::|C:@EA@CONFIG-FLAGS|)

(cffi:defctype claylib/wrap::cubemap-layout
               claylib/wrap::|C:@EA@CUBEMAP-LAYOUT|)

(cffi:defctype claylib/wrap::font-type
               claylib/wrap::|C:@EA@FONT-TYPE|)

(cffi:defctype claylib/wrap::gamepad-axis
               claylib/wrap::|C:@EA@GAMEPAD-AXIS|)

(cffi:defctype claylib/wrap::gamepad-button
               claylib/wrap::|C:@EA@GAMEPAD-BUTTON|)

(cffi:defctype claylib/wrap::gesture claylib/wrap::|C:@EA@GESTURE|)

(cffi:defctype claylib/wrap::gui-check-box-property
               claylib/wrap::|C:@EA@GUI-CHECK-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-color-picker-property
               claylib/wrap::|C:@EA@GUI-COLOR-PICKER-PROPERTY|)

(cffi:defctype claylib/wrap::gui-combo-box-property
               claylib/wrap::|C:@EA@GUI-COMBO-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-control
               claylib/wrap::|C:@EA@GUI-CONTROL|)

(cffi:defctype claylib/wrap::gui-control-property
               claylib/wrap::|C:@EA@GUI-CONTROL-PROPERTY|)

(cffi:defctype claylib/wrap::gui-default-property
               claylib/wrap::|C:@EA@GUI-DEFAULT-PROPERTY|)

(cffi:defctype claylib/wrap::gui-dropdown-box-property
               claylib/wrap::|C:@EA@GUI-DROPDOWN-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-icon-name
               claylib/wrap::|C:@EA@GUI-ICON-NAME|)

(cffi:defctype claylib/wrap::gui-list-view-property
               claylib/wrap::|C:@EA@GUI-LIST-VIEW-PROPERTY|)

(cffi:defctype claylib/wrap::gui-progress-bar-property
               claylib/wrap::|C:@EA@GUI-PROGRESS-BAR-PROPERTY|)

(cffi:defctype claylib/wrap::gui-property-element
               claylib/wrap::|C:@EA@GUI-PROPERTY-ELEMENT|)

(cffi:defctype claylib/wrap::gui-scroll-bar-property
               claylib/wrap::|C:@EA@GUI-SCROLL-BAR-PROPERTY|)

(cffi:defctype claylib/wrap::gui-slider-property
               claylib/wrap::|C:@EA@GUI-SLIDER-PROPERTY|)

(cffi:defctype claylib/wrap::gui-spinner-property
               claylib/wrap::|C:@EA@GUI-SPINNER-PROPERTY|)

(cffi:defctype claylib/wrap::gui-state
               claylib/wrap::|C:@EA@GUI-STATE|)

(cffi:defctype claylib/wrap::gui-text-alignment
               claylib/wrap::|C:@EA@GUI-TEXT-ALIGNMENT|)

(cffi:defctype claylib/wrap::gui-text-box-property
               claylib/wrap::|C:@EA@GUI-TEXT-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-toggle-property
               claylib/wrap::|C:@EA@GUI-TOGGLE-PROPERTY|)

(cffi:defctype claylib/wrap::keyboard-key
               claylib/wrap::|C:@EA@KEYBOARD-KEY|)

(cffi:defctype claylib/wrap::material-map-index
               claylib/wrap::|C:@EA@MATERIAL-MAP-INDEX|)

(cffi:defctype claylib/wrap::mouse-button
               claylib/wrap::|C:@EA@MOUSE-BUTTON|)

(cffi:defctype claylib/wrap::mouse-cursor
               claylib/wrap::|C:@EA@MOUSE-CURSOR|)

(cffi:defctype claylib/wrap::n-patch-layout
               claylib/wrap::|C:@EA@N-PATCH-LAYOUT|)

(cffi:defctype claylib/wrap::pixel-format
               claylib/wrap::|C:@EA@PIXEL-FORMAT|)

(cffi:defctype claylib/wrap::shader-attribute-data-type
               claylib/wrap::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|)

(cffi:defctype claylib/wrap::shader-location-index
               claylib/wrap::|C:@EA@SHADER-LOCATION-INDEX|)

(cffi:defctype claylib/wrap::shader-uniform-data-type
               claylib/wrap::|C:@EA@SHADER-UNIFORM-DATA-TYPE|)

(cffi:defctype claylib/wrap::texture-filter
               claylib/wrap::|C:@EA@TEXTURE-FILTER|)

(cffi:defctype claylib/wrap::texture-wrap
               claylib/wrap::|C:@EA@TEXTURE-WRAP|)

(cffi:defctype claylib/wrap::trace-log-level
               claylib/wrap::|C:@EA@TRACE-LOG-LEVEL|)

(cffi:defctype claylib/wrap::%float32 :float)

(cffi:defctype claylib/wrap::%float32x :double)

(cffi:defctype claylib/wrap::%float64 :double)

(cffi:defctype claylib/wrap::%float64x claylib/wrap::long-double)

(cffi:defctype claylib/wrap::fd-mask :long)

(cffi:defctype claylib/wrap::u-char :unsigned-char)

(cffi:defctype claylib/wrap::u-int :unsigned-int)

(cffi:defctype claylib/wrap::u-long :unsigned-long)

(cffi:defctype claylib/wrap::u-short :unsigned-short)

(cffi:defctype claylib/wrap::uint :unsigned-int)

(cffi:defctype claylib/wrap::ulong :unsigned-long)

(cffi:defctype claylib/wrap::ushort :unsigned-short)

(cffi:defcstruct (claylib/wrap::|C:@UA@--ATOMIC-WIDE-COUNTER@S@ATOMIC-WIDE-COUNTER.H@1141|
                  :size 8)
                 (claylib/wrap::%%low :unsigned-int :offset 0)
                 (claylib/wrap::%%high :unsigned-int :offset 4))

(cffi:defcunion (claylib/wrap::|C:@UA@--ATOMIC-WIDE-COUNTER| :size 8)
                (claylib/wrap::%%value64 :unsigned-long-long)
                (claylib/wrap::%%value32
                 (:struct
                  claylib/wrap::|C:@UA@--ATOMIC-WIDE-COUNTER@S@ATOMIC-WIDE-COUNTER.H@1141|)))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-BARRIER-T| :size 20)
                (claylib/wrap::%%size :char :count 20)
                (claylib/wrap::%%align :long))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-BARRIERATTR-T| :size 4)
                (claylib/wrap::%%size :char :count 4)
                (claylib/wrap::%%align :int))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-COND-T| :size 48)
                (claylib/wrap::%%size :char :count 48)
                (claylib/wrap::%%align :long-long))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-CONDATTR-T| :size 4)
                (claylib/wrap::%%size :char :count 4)
                (claylib/wrap::%%align :int))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-MUTEX-T| :size 24)
                (claylib/wrap::%%size :char :count 24)
                (claylib/wrap::%%align :long))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-MUTEXATTR-T| :size 4)
                (claylib/wrap::%%size :char :count 4)
                (claylib/wrap::%%align :int))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-RWLOCK-T| :size 32)
                (claylib/wrap::%%size :char :count 32)
                (claylib/wrap::%%align :long))

(cffi:defcunion (claylib/wrap::|C:@UA@PTHREAD-RWLOCKATTR-T| :size 8)
                (claylib/wrap::%%size :char :count 8)
                (claylib/wrap::%%align :long))

(define-symbol-macro
  claylib/wrap::*signgam*
  (let ((claylib/wrap::ptr (cffi:foreign-symbol-pointer "signgam")))
    (when claylib/wrap::ptr (cffi:mem-ref claylib/wrap::ptr ':int))))

(define-symbol-macro
  claylib/wrap::*stderr*
  (let ((claylib/wrap::ptr (cffi:foreign-symbol-pointer "stderr")))
    (when claylib/wrap::ptr
      (cffi:mem-ref claylib/wrap::ptr
                    '(:pointer claylib/wrap::file)))))

(define-symbol-macro
  claylib/wrap::*stdin*
  (let ((claylib/wrap::ptr (cffi:foreign-symbol-pointer "stdin")))
    (when claylib/wrap::ptr
      (cffi:mem-ref claylib/wrap::ptr
                    '(:pointer claylib/wrap::file)))))

(define-symbol-macro
  claylib/wrap::*stdout*
  (let ((claylib/wrap::ptr (cffi:foreign-symbol-pointer "stdout")))
    (when claylib/wrap::ptr
      (cffi:mem-ref claylib/wrap::ptr
                    '(:pointer claylib/wrap::file)))))

(cffi:defctype claylib/wrap::gui-style-prop
               (:struct claylib/wrap::gui-style-prop))

(cffi:defctype claylib/wrap::render-texture
               (:struct claylib/wrap::render-texture))

(cffi:defctype claylib/wrap::va-list (:pointer :void))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export 'claylib/wrap::|C:@EA@CAMERA-PROJECTION| :claylib/wrap)
  (export 'claylib/wrap::gui-dropdown-box-property :claylib/wrap)
  (export 'claylib/wrap::image-draw-pixel :claylib/wrap)
  (export 'claylib/wrap::float3 :claylib/wrap)
  (export 'claylib/wrap::gammaf :claylib/wrap)
  (export 'claylib/wrap::erfcl :claylib/wrap)
  (export 'claylib/wrap::strstr :claylib/wrap)
  (export 'claylib/wrap::gui-text-box :claylib/wrap)
  (export 'claylib/wrap::srand48 :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-STATE| :claylib/wrap)
  (export 'claylib/wrap::+raygui-groupbox-line-thick+ :claylib/wrap)
  (export 'claylib/wrap::+epsilon+ :claylib/wrap)
  (export 'claylib/wrap::text-find-index :claylib/wrap)
  (export 'claylib/wrap::quaternion-add :claylib/wrap)
  (export 'claylib/wrap::m8 :claylib/wrap)
  (export 'claylib/wrap::%shortbuf :claylib/wrap)
  (export 'claylib/wrap::gui-get-style :claylib/wrap)
  (export 'claylib/wrap::clear-window-state :claylib/wrap)
  (export 'claylib/wrap::parent :claylib/wrap)
  (export 'claylib/wrap::+%features-h+ :claylib/wrap)
  (export 'claylib/wrap::gui-style-prop :claylib/wrap)
  (export 'claylib/wrap::+math-errexcept+ :claylib/wrap)
  (export 'claylib/wrap::projection :claylib/wrap)
  (export 'claylib/wrap::gui-text-input-box :claylib/wrap)
  (export 'claylib/wrap::jnl :claylib/wrap)
  (export 'claylib/wrap::draw-circle-v :claylib/wrap)
  (export 'claylib/wrap::uint :claylib/wrap)
  (export 'claylib/wrap::load-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::update-camera :claylib/wrap)
  (export 'claylib/wrap::+%bits-pthreadtypes-arch-h+ :claylib/wrap)
  (export 'claylib/wrap::%%wchb :claylib/wrap)
  (export 'claylib/wrap::v :claylib/wrap)
  (export 'claylib/wrap::draw-ring :claylib/wrap)
  (export 'claylib/wrap::text-copy :claylib/wrap)
  (export 'claylib/wrap::vector2-distance-sqr :claylib/wrap)
  (export 'claylib/wrap::+exit-failure+ :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-quad :claylib/wrap)
  (export 'claylib/wrap::m15 :claylib/wrap)
  (export 'claylib/wrap::wave-format :claylib/wrap)
  (export 'claylib/wrap::w :claylib/wrap)
  (export 'claylib/wrap::gui-load-style :claylib/wrap)
  (export 'claylib/wrap::cubemap-layout :claylib/wrap)
  (export 'claylib/wrap::qecvt :claylib/wrap)
  (export 'claylib/wrap::+fp-ilogb0+ :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@--SIGSET-T| :claylib/wrap)
  (export 'claylib/wrap::max :claylib/wrap)
  (export 'claylib/wrap::+i386+ :claylib/wrap)
  (export 'claylib/wrap::get-shader-location :claylib/wrap)
  (export 'claylib/wrap::is-window-state :claylib/wrap)
  (export 'claylib/wrap::unload-music-stream :claylib/wrap)
  (export 'claylib/wrap::isinff :claylib/wrap)
  (export 'claylib/wrap::ferror :claylib/wrap)
  (export 'claylib/wrap::+material-map-specular+ :claylib/wrap)
  (export 'claylib/wrap::get-screen-width :claylib/wrap)
  (export 'claylib/wrap::load-render-texture :claylib/wrap)
  (export 'claylib/wrap::gui-load-style-default :claylib/wrap)
  (export 'claylib/wrap::get-prev-directory-path :claylib/wrap)
  (export 'claylib/wrap::check-collision-boxes :claylib/wrap)
  (export 'claylib/wrap::gui-group-box :claylib/wrap)
  (export 'claylib/wrap::%io-buf-end :claylib/wrap)
  (export 'claylib/wrap::remainderf :claylib/wrap)
  (export 'claylib/wrap::image-alpha-mask :claylib/wrap)
  (export 'claylib/wrap::+%va-list+ :claylib/wrap)
  (export 'claylib/wrap::asinhl :claylib/wrap)
  (export 'claylib/wrap::b :claylib/wrap)
  (export 'claylib/wrap::+byte-order+ :claylib/wrap)
  (export 'claylib/wrap::roundl :claylib/wrap)
  (export 'claylib/wrap::vector2-transform :claylib/wrap)
  (export 'claylib/wrap::c-floor :claylib/wrap)
  (export 'claylib/wrap::m12 :claylib/wrap)
  (export 'claylib/wrap::vector3-transform :claylib/wrap)
  (export 'claylib/wrap::is-key-up :claylib/wrap)
  (export 'claylib/wrap::copysignl :claylib/wrap)
  (export 'claylib/wrap::clamp :claylib/wrap)
  (export 'claylib/wrap::sscanf :claylib/wrap)
  (export 'claylib/wrap::gui-enable :claylib/wrap)
  (export 'claylib/wrap::set-pixel-color :claylib/wrap)
  (export 'claylib/wrap::gen-image-gradient-radial :claylib/wrap)
  (export 'claylib/wrap::camera-roll :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-CHECK-BOX-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::+%bits-types-h+ :claylib/wrap)
  (export 'claylib/wrap::normals :claylib/wrap)
  (export 'claylib/wrap::draw-poly :claylib/wrap)
  (export 'claylib/wrap::maps :claylib/wrap)
  (export 'claylib/wrap::vector2-line-angle :claylib/wrap)
  (export 'claylib/wrap::draw-circle :claylib/wrap)
  (export 'claylib/wrap::+%posix-c-source+ :claylib/wrap)
  (export 'claylib/wrap::floorl :claylib/wrap)
  (export 'claylib/wrap::gui-combo-box :claylib/wrap)
  (export 'claylib/wrap::+null+ :claylib/wrap)
  (export 'claylib/wrap::tanhf :claylib/wrap)
  (export 'claylib/wrap::set-target-fps :claylib/wrap)
  (export 'claylib/wrap::is-wave-ready :claylib/wrap)
  (export 'claylib/wrap::vector3-add :claylib/wrap)
  (export 'claylib/wrap::set-window-opacity :claylib/wrap)
  (export 'claylib/wrap::cbrtf :claylib/wrap)
  (export 'claylib/wrap::scanf :claylib/wrap)
  (export 'claylib/wrap::gui-line :claylib/wrap)
  (export 'claylib/wrap::expf :claylib/wrap)
  (export 'claylib/wrap::id :claylib/wrap)
  (export 'claylib/wrap::camera-projection :claylib/wrap)
  (export 'claylib/wrap::c-cos :claylib/wrap)
  (export 'claylib/wrap::finite :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate :claylib/wrap)
  (export 'claylib/wrap::+raymath-h+ :claylib/wrap)
  (export 'claylib/wrap::vbo-id :claylib/wrap)
  (export 'claylib/wrap::%fileno :claylib/wrap)
  (export 'claylib/wrap::end-shader-mode :claylib/wrap)
  (export 'claylib/wrap::render-texture :claylib/wrap)
  (export 'claylib/wrap::+scrollbar-right-side+ :claylib/wrap)
  (export 'claylib/wrap::fputc :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-up :claylib/wrap)
  (export 'claylib/wrap::gen-image-perlin-noise :claylib/wrap)
  (export 'claylib/wrap::is-model-ready :claylib/wrap)
  (export 'claylib/wrap::flockfile :claylib/wrap)
  (export 'claylib/wrap::get-mouse-x :claylib/wrap)
  (export 'claylib/wrap::g :claylib/wrap)
  (export 'claylib/wrap::load-font-from-image :claylib/wrap)
  (export 'claylib/wrap::rand-sep :claylib/wrap)
  (export 'claylib/wrap::fmaxl :claylib/wrap)
  (export 'claylib/wrap::check-collision-spheres :claylib/wrap)
  (export 'claylib/wrap::is-image-ready :claylib/wrap)
  (export 'claylib/wrap::fgetc-unlocked :claylib/wrap)
  (export 'claylib/wrap::camera-yaw :claylib/wrap)
  (export 'claylib/wrap::is-cursor-on-screen :claylib/wrap)
  (export 'claylib/wrap::frame-count :claylib/wrap)
  (export 'claylib/wrap::vector2-angle :claylib/wrap)
  (export 'claylib/wrap::load-image-from-texture :claylib/wrap)
  (export 'claylib/wrap::+%bits-pthreadtypes-common-h+ :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@--ATOMIC-WIDE-COUNTER| :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-down :claylib/wrap)
  (export 'claylib/wrap::update-camera-pro :claylib/wrap)
  (export 'claylib/wrap::tanhl :claylib/wrap)
  (export 'claylib/wrap::+raygui-implementation+ :claylib/wrap)
  (export 'claylib/wrap::gui-label-button :claylib/wrap)
  (export 'claylib/wrap::get-touch-point-count :claylib/wrap)
  (export 'claylib/wrap::+raygui-version+ :claylib/wrap)
  (export 'claylib/wrap::set-window-monitor :claylib/wrap)
  (export 'claylib/wrap::get-model-bounding-box :claylib/wrap)
  (export 'claylib/wrap::%mode :claylib/wrap)
  (export 'claylib/wrap::lroundl :claylib/wrap)
  (export 'claylib/wrap::get-monitor-count :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@--MBSTATE-T| :claylib/wrap)
  (export 'claylib/wrap::draw-texture-pro :claylib/wrap)
  (export 'claylib/wrap::remquol :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@KEYBOARD-KEY| :claylib/wrap)
  (export 'claylib/wrap::y0f :claylib/wrap)
  (export 'claylib/wrap::erf :claylib/wrap)
  (export 'claylib/wrap::set-gestures-enabled :claylib/wrap)
  (export 'claylib/wrap::image-copy :claylib/wrap)
  (export 'claylib/wrap::nanf :claylib/wrap)
  (export 'claylib/wrap::config-flags :claylib/wrap)
  (export 'claylib/wrap::texture-filter :claylib/wrap)
  (export 'claylib/wrap::m2 :claylib/wrap)
  (export 'claylib/wrap::matrix-trace :claylib/wrap)
  (export 'claylib/wrap::+%endian-h+ :claylib/wrap)
  (export 'claylib/wrap::strsep :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-BARRIERATTR-T| :claylib/wrap)
  (export 'claylib/wrap::system :claylib/wrap)
  (export 'claylib/wrap::get-pixel-color :claylib/wrap)
  (export 'claylib/wrap::%%init :claylib/wrap)
  (export 'claylib/wrap::+rl-color-type+ :claylib/wrap)
  (export 'claylib/wrap::end-texture-mode :claylib/wrap)
  (export 'claylib/wrap::atanf :claylib/wrap)
  (export 'claylib/wrap::unsetenv :claylib/wrap)
  (export 'claylib/wrap::rintl :claylib/wrap)
  (export 'claylib/wrap::fmodl :claylib/wrap)
  (export 'claylib/wrap::stop-audio-stream :claylib/wrap)
  (export 'claylib/wrap::j1f :claylib/wrap)
  (export 'claylib/wrap::draw-poly-lines-ex :claylib/wrap)
  (export 'claylib/wrap::strerror :claylib/wrap)
  (export 'claylib/wrap::logb :claylib/wrap)
  (export 'claylib/wrap::gui-set-font :claylib/wrap)
  (export 'claylib/wrap::update-texture :claylib/wrap)
  (export 'claylib/wrap::matrix-ortho :claylib/wrap)
  (export 'claylib/wrap::control-id :claylib/wrap)
  (export 'claylib/wrap::is-key-released :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@--MBSTATE-T@U@--MBSTATE-T.H@451|
          :claylib/wrap)
  (export 'claylib/wrap::+p-tmpdir+ :claylib/wrap)
  (export 'claylib/wrap::gui-progress-bar-property :claylib/wrap)
  (export 'claylib/wrap::left-screen-center :claylib/wrap)
  (export 'claylib/wrap::seek-music-stream :claylib/wrap)
  (export 'claylib/wrap::drand48 :claylib/wrap)
  (export 'claylib/wrap::vector3-lerp :claylib/wrap)
  (export 'claylib/wrap::c-sqrt :claylib/wrap)
  (export 'claylib/wrap::%%a :claylib/wrap)
  (export 'claylib/wrap::+shader-loc-map-specular+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-COLOR-PICKER-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::x :claylib/wrap)
  (export 'claylib/wrap::putc-unlocked :claylib/wrap)
  (export 'claylib/wrap::fabs :claylib/wrap)
  (export 'claylib/wrap::log2l :claylib/wrap)
  (export 'claylib/wrap::index :claylib/wrap)
  (export 'claylib/wrap::show-cursor :claylib/wrap)
  (export 'claylib/wrap::load-font-from-memory :claylib/wrap)
  (export 'claylib/wrap::set-config-flags :claylib/wrap)
  (export 'claylib/wrap::+rand-max+ :claylib/wrap)
  (export 'claylib/wrap::feof-unlocked :claylib/wrap)
  (export 'claylib/wrap::offset-y :claylib/wrap)
  (export 'claylib/wrap::gui-icon-name :claylib/wrap)
  (export 'claylib/wrap::right-screen-center :claylib/wrap)
  (export 'claylib/wrap::z :claylib/wrap)
  (export 'claylib/wrap::is-window-minimized :claylib/wrap)
  (export 'claylib/wrap::%freeres-list :claylib/wrap)
  (export 'claylib/wrap::select :claylib/wrap)
  (export 'claylib/wrap::+seek-set+ :claylib/wrap)
  (export 'claylib/wrap::%io-backup-base :claylib/wrap)
  (export 'claylib/wrap::+huge-valf+ :claylib/wrap)
  (export 'claylib/wrap::+%bits-types-locale-t-h+ :claylib/wrap)
  (export 'claylib/wrap::fmax :claylib/wrap)
  (export 'claylib/wrap::value :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-CONTROL-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::j1 :claylib/wrap)
  (export 'claylib/wrap::top :claylib/wrap)
  (export 'claylib/wrap::atan2l :claylib/wrap)
  (export 'claylib/wrap::+raygui-max-text-lines+ :claylib/wrap)
  (export 'claylib/wrap::get-render-height :claylib/wrap)
  (export 'claylib/wrap::%%size :claylib/wrap)
  (export 'claylib/wrap::mktemp :claylib/wrap)
  (export 'claylib/wrap::j0f :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-torus :claylib/wrap)
  (export 'claylib/wrap::+raygui-icon-size+ :claylib/wrap)
  (export 'claylib/wrap::gui-toggle :claylib/wrap)
  (export 'claylib/wrap::image-draw-circle-lines :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-3d :claylib/wrap)
  (export 'claylib/wrap::set-exit-key :claylib/wrap)
  (export 'claylib/wrap::vector3-one :claylib/wrap)
  (export 'claylib/wrap::%%value :claylib/wrap)
  (export 'claylib/wrap::feof :claylib/wrap)
  (export 'claylib/wrap::property-id :claylib/wrap)
  (export 'claylib/wrap::nextafter :claylib/wrap)
  (export 'claylib/wrap::c-log :claylib/wrap)
  (export 'claylib/wrap::draw-circle-3d :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-hemi-sphere :claylib/wrap)
  (export 'claylib/wrap::unload-image-colors :claylib/wrap)
  (export 'claylib/wrap::unload-dropped-files :claylib/wrap)
  (export 'claylib/wrap::check-collision-circles :claylib/wrap)
  (export 'claylib/wrap::end-scissor-mode :claylib/wrap)
  (export 'claylib/wrap::draw-pixel :claylib/wrap)
  (export 'claylib/wrap::text-join :claylib/wrap)
  (export 'claylib/wrap::nexttowardf :claylib/wrap)
  (export 'claylib/wrap::+%sys-cdefs-h+ :claylib/wrap)
  (export 'claylib/wrap::music :claylib/wrap)
  (export 'claylib/wrap::material-map :claylib/wrap)
  (export 'claylib/wrap::erfcf :claylib/wrap)
  (export 'claylib/wrap::is-audio-stream-playing :claylib/wrap)
  (export 'claylib/wrap::erand48-r :claylib/wrap)
  (export 'claylib/wrap::get-window-scale-dpi :claylib/wrap)
  (export 'claylib/wrap::text-subtext :claylib/wrap)
  (export 'claylib/wrap::measure-text :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-pan :claylib/wrap)
  (export 'claylib/wrap::powl :claylib/wrap)
  (export 'claylib/wrap::unload-sound :claylib/wrap)
  (export 'claylib/wrap::+mouse-right-button+ :claylib/wrap)
  (export 'claylib/wrap::remainderl :claylib/wrap)
  (export 'claylib/wrap::image-text :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-SCROLL-BAR-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::text-insert :claylib/wrap)
  (export 'claylib/wrap::fcvt :claylib/wrap)
  (export 'claylib/wrap::looping :claylib/wrap)
  (export 'claylib/wrap::file :claylib/wrap)
  (export 'claylib/wrap::acosf :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-ICON-NAME| :claylib/wrap)
  (export 'claylib/wrap::set-window-icon :claylib/wrap)
  (export 'claylib/wrap::lrintl :claylib/wrap)
  (export 'claylib/wrap::powf :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-axis-movement :claylib/wrap)
  (export 'claylib/wrap::strtoull :claylib/wrap)
  (export 'claylib/wrap::+rcamera-h+ :claylib/wrap)
  (export 'claylib/wrap::image-alpha-clear :claylib/wrap)
  (export 'claylib/wrap::%io-read-ptr :claylib/wrap)
  (export 'claylib/wrap::audio-callback :claylib/wrap)
  (export 'claylib/wrap::get-mouse-wheel-move-v :claylib/wrap)
  (export 'claylib/wrap::set-random-seed :claylib/wrap)
  (export 'claylib/wrap::u-short :claylib/wrap)
  (export 'claylib/wrap::trunc :claylib/wrap)
  (export 'claylib/wrap::remap :claylib/wrap)
  (export 'claylib/wrap::m0 :claylib/wrap)
  (export 'claylib/wrap::image-draw-pixel-v :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-vector3to-vector3
          :claylib/wrap)
  (export 'claylib/wrap::%io-codecvt :claylib/wrap)
  (export 'claylib/wrap::quaternion-slerp :claylib/wrap)
  (export 'claylib/wrap::vector3-subtract-value :claylib/wrap)
  (export 'claylib/wrap::y :claylib/wrap)
  (export 'claylib/wrap::vector3-min :claylib/wrap)
  (export 'claylib/wrap::glyph-info :claylib/wrap)
  (export 'claylib/wrap::unload-codepoints :claylib/wrap)
  (export 'claylib/wrap::ungetc :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cone :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-matrix :claylib/wrap)
  (export 'claylib/wrap::mem-realloc :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-PROPERTY-ELEMENT| :claylib/wrap)
  (export 'claylib/wrap::count :claylib/wrap)
  (export 'claylib/wrap::close-window :claylib/wrap)
  (export 'claylib/wrap::get-file-extension :claylib/wrap)
  (export 'claylib/wrap::r :claylib/wrap)
  (export 'claylib/wrap::clearerr :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@FONT-TYPE| :claylib/wrap)
  (export 'claylib/wrap::load-sound-from-wave :claylib/wrap)
  (export 'claylib/wrap::gui-slider-pro :claylib/wrap)
  (export 'claylib/wrap::+raygui-version-minor+ :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-zyx :claylib/wrap)
  (export 'claylib/wrap::+rl-rectangle-type+ :claylib/wrap)
  (export 'claylib/wrap::glyph-padding :claylib/wrap)
  (export 'claylib/wrap::frame-poses :claylib/wrap)
  (export 'claylib/wrap::image-draw-text :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-heightmap :claylib/wrap)
  (export 'claylib/wrap::+raygui-version-patch+ :claylib/wrap)
  (export 'claylib/wrap::export-wave-as-code :claylib/wrap)
  (export 'claylib/wrap::format :claylib/wrap)
  (export 'claylib/wrap::gen-image-gradient-v :claylib/wrap)
  (export 'claylib/wrap::image-alpha-crop :claylib/wrap)
  (export 'claylib/wrap::lroundf :claylib/wrap)
  (export 'claylib/wrap::lcong48-r :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-callback :claylib/wrap)
  (export 'claylib/wrap::vector3-multiply :claylib/wrap)
  (export 'claylib/wrap::qgcvt :claylib/wrap)
  (export 'claylib/wrap::gui-scroll-bar-property :claylib/wrap)
  (export 'claylib/wrap::matrix-translate :claylib/wrap)
  (export 'claylib/wrap::lrand48 :claylib/wrap)
  (export 'claylib/wrap::pause-audio-stream :claylib/wrap)
  (export 'claylib/wrap::quaternion-length :claylib/wrap)
  (export 'claylib/wrap::unload-model-animations :claylib/wrap)
  (export 'claylib/wrap::+rl-quaternion-type+ :claylib/wrap)
  (export 'claylib/wrap::strtok-r :claylib/wrap)
  (export 'claylib/wrap::get-file-name-without-ext :claylib/wrap)
  (export 'claylib/wrap::acoshf :claylib/wrap)
  (export 'claylib/wrap::float-equals :claylib/wrap)
  (export 'claylib/wrap::gui-progress-bar :claylib/wrap)
  (export 'claylib/wrap::+raygui-togglegroup-max-items+
          :claylib/wrap)
  (export 'claylib/wrap::vector3-reflect :claylib/wrap)
  (export 'claylib/wrap::+rl-matrix-type+ :claylib/wrap)
  (export 'claylib/wrap::matrix-subtract :claylib/wrap)
  (export 'claylib/wrap::export-mesh :claylib/wrap)
  (export 'claylib/wrap::log1p :claylib/wrap)
  (export 'claylib/wrap::atol :claylib/wrap)
  (export 'claylib/wrap::gui-list-view :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CAMERA-MODE| :claylib/wrap)
  (export 'claylib/wrap::fseek :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-circle :claylib/wrap)
  (export 'claylib/wrap::cbrt :claylib/wrap)
  (export 'claylib/wrap::+m-pi-4+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-normalize :claylib/wrap)
  (export 'claylib/wrap::vector2-dot-product :claylib/wrap)
  (export 'claylib/wrap::gui-control-property :claylib/wrap)
  (export 'claylib/wrap::set-gamepad-mappings :claylib/wrap)
  (export 'claylib/wrap::sinl :claylib/wrap)
  (export 'claylib/wrap::matrix-transpose :claylib/wrap)
  (export 'claylib/wrap::set-trace-log-level :claylib/wrap)
  (export 'claylib/wrap::vector3-zero :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-COND-T| :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cube :claylib/wrap)
  (export 'claylib/wrap::ldexpf :claylib/wrap)
  (export 'claylib/wrap::end-blend-mode :claylib/wrap)
  (export 'claylib/wrap::fmaxf :claylib/wrap)
  (export 'claylib/wrap::up :claylib/wrap)
  (export 'claylib/wrap::strcspn :claylib/wrap)
  (export 'claylib/wrap::begin-shader-mode :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-BARRIER-T| :claylib/wrap)
  (export 'claylib/wrap::scalb :claylib/wrap)
  (export 'claylib/wrap::strpbrk :claylib/wrap)
  (export 'claylib/wrap::gui-toggle-property :claylib/wrap)
  (export 'claylib/wrap::image-rotate-ccw :claylib/wrap)
  (export 'claylib/wrap::strcasecmp :claylib/wrap)
  (export 'claylib/wrap::vector3-max :claylib/wrap)
  (export 'claylib/wrap::%%c :claylib/wrap)
  (export 'claylib/wrap::+fopen-max+ :claylib/wrap)
  (export 'claylib/wrap::mrand48 :claylib/wrap)
  (export 'claylib/wrap::image-draw-circle :claylib/wrap)
  (export 'claylib/wrap::lerp :claylib/wrap)
  (export 'claylib/wrap::ulong :claylib/wrap)
  (export 'claylib/wrap::draw-sphere-wires :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-plane :claylib/wrap)
  (export 'claylib/wrap::rint :claylib/wrap)
  (export 'claylib/wrap::load-file-text :claylib/wrap)
  (export 'claylib/wrap::is-audio-device-ready :claylib/wrap)
  (export 'claylib/wrap::text-to-integer :claylib/wrap)
  (export 'claylib/wrap::enable-cursor :claylib/wrap)
  (export 'claylib/wrap::matrix :claylib/wrap)
  (export 'claylib/wrap::vector2-equals :claylib/wrap)
  (export 'claylib/wrap::indices :claylib/wrap)
  (export 'claylib/wrap::vector3-rotate-by-axis-angle :claylib/wrap)
  (export 'claylib/wrap::putchar-unlocked :claylib/wrap)
  (export 'claylib/wrap::freopen :claylib/wrap)
  (export 'claylib/wrap::tgammaf :claylib/wrap)
  (export 'claylib/wrap::height :claylib/wrap)
  (export 'claylib/wrap::funlockfile :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-up :claylib/wrap)
  (export 'claylib/wrap::tempnam :claylib/wrap)
  (export 'claylib/wrap::gui-check-box-property :claylib/wrap)
  (export 'claylib/wrap::draw-mesh :claylib/wrap)
  (export 'claylib/wrap::gui-scroll-panel :claylib/wrap)
  (export 'claylib/wrap::gui-unlock :claylib/wrap)
  (export 'claylib/wrap::sound :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@PIXEL-FORMAT| :claylib/wrap)
  (export 'claylib/wrap::texture :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-released :claylib/wrap)
  (export 'claylib/wrap::%%count :claylib/wrap)
  (export 'claylib/wrap::get-key-pressed :claylib/wrap)
  (export 'claylib/wrap::+%alloca-h+ :claylib/wrap)
  (export 'claylib/wrap::camera-3d :claylib/wrap)
  (export 'claylib/wrap::c-sinh :claylib/wrap)
  (export 'claylib/wrap::get-file-name :claylib/wrap)
  (export 'claylib/wrap::draw-cube :claylib/wrap)
  (export 'claylib/wrap::target :claylib/wrap)
  (export 'claylib/wrap::j0 :claylib/wrap)
  (export 'claylib/wrap::begin-blend-mode :claylib/wrap)
  (export 'claylib/wrap::audio-stream :claylib/wrap)
  (export 'claylib/wrap::nrand48-r :claylib/wrap)
  (export 'claylib/wrap::color-normalize :claylib/wrap)
  (export 'claylib/wrap::image-color-invert :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-poly :claylib/wrap)
  (export 'claylib/wrap::unload-model :claylib/wrap)
  (export 'claylib/wrap::gen-image-white-noise :claylib/wrap)
  (export 'claylib/wrap::*stdout* :claylib/wrap)
  (export 'claylib/wrap::load-texture-cubemap :claylib/wrap)
  (export 'claylib/wrap::offset-x :claylib/wrap)
  (export 'claylib/wrap::nearbyintl :claylib/wrap)
  (export 'claylib/wrap::gui-window-box :claylib/wrap)
  (export 'claylib/wrap::load-image-anim :claylib/wrap)
  (export 'claylib/wrap::+%sys-types-h+ :claylib/wrap)
  (export 'claylib/wrap::m11 :claylib/wrap)
  (export 'claylib/wrap::bone-weights :claylib/wrap)
  (export 'claylib/wrap::get-render-width :claylib/wrap)
  (export 'claylib/wrap::export-image :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-DROPDOWN-BOX-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::get-glyph-atlas-rec :claylib/wrap)
  (export 'claylib/wrap::getloadavg :claylib/wrap)
  (export 'claylib/wrap::set-music-pitch :claylib/wrap)
  (export 'claylib/wrap::text-to-upper :claylib/wrap)
  (export 'claylib/wrap::draw-fps :claylib/wrap)
  (export 'claylib/wrap::vector4 :claylib/wrap)
  (export 'claylib/wrap::+seek-end+ :claylib/wrap)
  (export 'claylib/wrap::truncf :claylib/wrap)
  (export 'claylib/wrap::set-shader-value-texture :claylib/wrap)
  (export 'claylib/wrap::ynf :claylib/wrap)
  (export 'claylib/wrap::load-utf8 :claylib/wrap)
  (export 'claylib/wrap::+%strings-h+ :claylib/wrap)
  (export 'claylib/wrap::stpcpy :claylib/wrap)
  (export 'claylib/wrap::ffsll :claylib/wrap)
  (export 'claylib/wrap::y1 :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@SHADER-LOCATION-INDEX| :claylib/wrap)
  (export 'claylib/wrap::unload-font :claylib/wrap)
  (export 'claylib/wrap::vector3-cross-product :claylib/wrap)
  (export 'claylib/wrap::is-window-ready :claylib/wrap)
  (export 'claylib/wrap::atan2f :claylib/wrap)
  (export 'claylib/wrap::normal :claylib/wrap)
  (export 'claylib/wrap::+rayguiapi+ :claylib/wrap)
  (export 'claylib/wrap::fminf :claylib/wrap)
  (export 'claylib/wrap::nearbyintf :claylib/wrap)
  (export 'claylib/wrap::+%bits-types---locale-t-h+ :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-pressed :claylib/wrap)
  (export 'claylib/wrap::strcmp :claylib/wrap)
  (export 'claylib/wrap::+seek-cur+ :claylib/wrap)
  (export 'claylib/wrap::+fp-infinite+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-gradient-h :claylib/wrap)
  (export 'claylib/wrap::is-path-file :claylib/wrap)
  (export 'claylib/wrap::gamma :claylib/wrap)
  (export 'claylib/wrap::triangle-count :claylib/wrap)
  (export 'claylib/wrap::ecvt :claylib/wrap)
  (export 'claylib/wrap::trace-log-level :claylib/wrap)
  (export 'claylib/wrap::get-codepoint-previous :claylib/wrap)
  (export 'claylib/wrap::vector2-invert :claylib/wrap)
  (export 'claylib/wrap::+pdp-endian+ :claylib/wrap)
  (export 'claylib/wrap::expm1f :claylib/wrap)
  (export 'claylib/wrap::get-clipboard-text :claylib/wrap)
  (export 'claylib/wrap::ctx-data :claylib/wrap)
  (export 'claylib/wrap::load-model-from-mesh :claylib/wrap)
  (export 'claylib/wrap::image-blur-gaussian :claylib/wrap)
  (export 'claylib/wrap::vector2-subtract-value :claylib/wrap)
  (export 'claylib/wrap::fd-mask :claylib/wrap)
  (export 'claylib/wrap::draw-texture-rec :claylib/wrap)
  (export 'claylib/wrap::m6 :claylib/wrap)
  (export 'claylib/wrap::c-tan :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-SPINNER-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::load-sound :claylib/wrap)
  (export 'claylib/wrap::vector2-rotate :claylib/wrap)
  (export 'claylib/wrap::exit :claylib/wrap)
  (export 'claylib/wrap::llroundf :claylib/wrap)
  (export 'claylib/wrap::material-count :claylib/wrap)
  (export 'claylib/wrap::+%default-source+ :claylib/wrap)
  (export 'claylib/wrap::vector2-length-sqr :claylib/wrap)
  (export 'claylib/wrap::+%iolbf+ :claylib/wrap)
  (export 'claylib/wrap::vector2-move-towards :claylib/wrap)
  (export 'claylib/wrap::set-window-icons :claylib/wrap)
  (export 'claylib/wrap::unload-image-palette :claylib/wrap)
  (export 'claylib/wrap::gui-state :claylib/wrap)
  (export 'claylib/wrap::logl :claylib/wrap)
  (export 'claylib/wrap::ldexpl :claylib/wrap)
  (export 'claylib/wrap::set-save-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::c-asinh :claylib/wrap)
  (export 'claylib/wrap::gui-spinner-property :claylib/wrap)
  (export 'claylib/wrap::+eof+ :claylib/wrap)
  (export 'claylib/wrap::get-gesture-drag-angle :claylib/wrap)
  (export 'claylib/wrap::+raygui-panel-border-width+ :claylib/wrap)
  (export 'claylib/wrap::save-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::get-touch-position :claylib/wrap)
  (export 'claylib/wrap::drand48-r :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle-lines :claylib/wrap)
  (export 'claylib/wrap::shader-uniform-data-type :claylib/wrap)
  (export 'claylib/wrap::draw-triangle :claylib/wrap)
  (export 'claylib/wrap::shader :claylib/wrap)
  (export 'claylib/wrap::sinhl :claylib/wrap)
  (export 'claylib/wrap::vector3-subtract :claylib/wrap)
  (export 'claylib/wrap::image-dither :claylib/wrap)
  (export 'claylib/wrap::bones :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-strip-3d :claylib/wrap)
  (export 'claylib/wrap::poll-input-events :claylib/wrap)
  (export 'claylib/wrap::j0l :claylib/wrap)
  (export 'claylib/wrap::is-sound-playing :claylib/wrap)
  (export 'claylib/wrap::+wexited+ :claylib/wrap)
  (export 'claylib/wrap::fgets :claylib/wrap)
  (export 'claylib/wrap::strtouq :claylib/wrap)
  (export 'claylib/wrap::%flags :claylib/wrap)
  (export 'claylib/wrap::vector2-clamp :claylib/wrap)
  (export 'claylib/wrap::gui-lock :claylib/wrap)
  (export 'claylib/wrap::draw-circle-lines :claylib/wrap)
  (export 'claylib/wrap::%%high :claylib/wrap)
  (export 'claylib/wrap::begin-mode-2d :claylib/wrap)
  (export 'claylib/wrap::end-vr-stereo-mode :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-z :claylib/wrap)
  (export 'claylib/wrap::bone-ids :claylib/wrap)
  (export 'claylib/wrap::text-replace :claylib/wrap)
  (export 'claylib/wrap::getsubopt :claylib/wrap)
  (export 'claylib/wrap::source :claylib/wrap)
  (export 'claylib/wrap::+stderr+ :claylib/wrap)
  (export 'claylib/wrap::decode-data-base64 :claylib/wrap)
  (export 'claylib/wrap::+m-2-sqrtpi+ :claylib/wrap)
  (export 'claylib/wrap::image-alpha-premultiply :claylib/wrap)
  (export 'claylib/wrap::mesh :claylib/wrap)
  (export 'claylib/wrap::color-to-hsv :claylib/wrap)
  (export 'claylib/wrap::tmpfile :claylib/wrap)
  (export 'claylib/wrap::draw-model-wires-ex :claylib/wrap)
  (export 'claylib/wrap::vao-id :claylib/wrap)
  (export 'claylib/wrap::load-image :claylib/wrap)
  (export 'claylib/wrap::zoom :claylib/wrap)
  (export 'claylib/wrap::get-monitor-name :claylib/wrap)
  (export 'claylib/wrap::setstate-r :claylib/wrap)
  (export 'claylib/wrap::matrix-frustum :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-euler :claylib/wrap)
  (export 'claylib/wrap::gui-enable-tooltip :claylib/wrap)
  (export 'claylib/wrap::shader-attribute-data-type :claylib/wrap)
  (export 'claylib/wrap::ldexp :claylib/wrap)
  (export 'claylib/wrap::m7 :claylib/wrap)
  (export 'claylib/wrap::+%struct-timespec+ :claylib/wrap)
  (export 'claylib/wrap::draw-text-ex :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-pressed :claylib/wrap)
  (export 'claylib/wrap::+fp-nan+ :claylib/wrap)
  (export 'claylib/wrap::shader-location-index :claylib/wrap)
  (export 'claylib/wrap::+rl-vector2-type+ :claylib/wrap)
  (export 'claylib/wrap::get-monitor-position :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-COMBO-BOX-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::texture-2d :claylib/wrap)
  (export 'claylib/wrap::gui-property-element :claylib/wrap)
  (export 'claylib/wrap::tanf :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-poly :claylib/wrap)
  (export 'claylib/wrap::draw-point-3d :claylib/wrap)
  (export 'claylib/wrap::bone-count :claylib/wrap)
  (export 'claylib/wrap::atoi :claylib/wrap)
  (export 'claylib/wrap::draw-billboard-rec :claylib/wrap)
  (export 'claylib/wrap::wave-crop :claylib/wrap)
  (export 'claylib/wrap::unload-mesh :claylib/wrap)
  (export 'claylib/wrap::%io-write-ptr :claylib/wrap)
  (export 'claylib/wrap::get-image-color :claylib/wrap)
  (export 'claylib/wrap::dreml :claylib/wrap)
  (export 'claylib/wrap::lcong48 :claylib/wrap)
  (export 'claylib/wrap::+fd-setsize+ :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-MUTEXATTR-T| :claylib/wrap)
  (export 'claylib/wrap::%float32x :claylib/wrap)
  (export 'claylib/wrap::ctx-type :claylib/wrap)
  (export 'claylib/wrap::vector2-add-value :claylib/wrap)
  (export 'claylib/wrap::setlinebuf :claylib/wrap)
  (export 'claylib/wrap::unload-shader :claylib/wrap)
  (export 'claylib/wrap::save-file-text :claylib/wrap)
  (export 'claylib/wrap::cosl :claylib/wrap)
  (export 'claylib/wrap::image-text-ex :claylib/wrap)
  (export 'claylib/wrap::camera :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-rounded-lines :claylib/wrap)
  (export 'claylib/wrap::tmpnam :claylib/wrap)
  (export 'claylib/wrap::at-quick-exit :claylib/wrap)
  (export 'claylib/wrap::gui-color-picker-property :claylib/wrap)
  (export 'claylib/wrap::c-rem :claylib/wrap)
  (export 'claylib/wrap::is-music-stream-playing :claylib/wrap)
  (export 'claylib/wrap::cosf :claylib/wrap)
  (export 'claylib/wrap::lrintf :claylib/wrap)
  (export 'claylib/wrap::quaternion-to-matrix :claylib/wrap)
  (export 'claylib/wrap::r-audio-processor :claylib/wrap)
  (export 'claylib/wrap::fflush :claylib/wrap)
  (export 'claylib/wrap::+camera-cull-distance-far+ :claylib/wrap)
  (export 'claylib/wrap::pclose :claylib/wrap)
  (export 'claylib/wrap::is-font-ready :claylib/wrap)
  (export 'claylib/wrap::image-color-tint :claylib/wrap)
  (export 'claylib/wrap::get-frame-time :claylib/wrap)
  (export 'claylib/wrap::get-gesture-pinch-angle :claylib/wrap)
  (export 'claylib/wrap::+%math-h+ :claylib/wrap)
  (export 'claylib/wrap::save-file-data :claylib/wrap)
  (export 'claylib/wrap::strdup :claylib/wrap)
  (export 'claylib/wrap::unload-render-texture :claylib/wrap)
  (export 'claylib/wrap::+%iofbf+ :claylib/wrap)
  (export 'claylib/wrap::matrix-add :claylib/wrap)
  (export 'claylib/wrap::log1pf :claylib/wrap)
  (export 'claylib/wrap::c-remove :claylib/wrap)
  (export 'claylib/wrap::draw-cube-wires-v :claylib/wrap)
  (export 'claylib/wrap::get-glyph-info :claylib/wrap)
  (export 'claylib/wrap::file-exists :claylib/wrap)
  (export 'claylib/wrap::rpmatch :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-mesh :claylib/wrap)
  (export 'claylib/wrap::fdimf :claylib/wrap)
  (export 'claylib/wrap::hide-cursor :claylib/wrap)
  (export 'claylib/wrap::draw-ring-lines :claylib/wrap)
  (export 'claylib/wrap::+%ionbf+ :claylib/wrap)
  (export 'claylib/wrap::finitel :claylib/wrap)
  (export 'claylib/wrap::channels :claylib/wrap)
  (export 'claylib/wrap::log1pl :claylib/wrap)
  (export 'claylib/wrap::+%string-h+ :claylib/wrap)
  (export 'claylib/wrap::vector3-ortho-normalize :claylib/wrap)
  (export 'claylib/wrap::vector3-dot-product :claylib/wrap)
  (export 'claylib/wrap::mesh-material :claylib/wrap)
  (export 'claylib/wrap::image-to-pot :claylib/wrap)
  (export 'claylib/wrap::get-color :claylib/wrap)
  (export 'claylib/wrap::ferror-unlocked :claylib/wrap)
  (export 'claylib/wrap::get-screen-to-world-2d :claylib/wrap)
  (export 'claylib/wrap::rewind :claylib/wrap)
  (export 'claylib/wrap::strchr :claylib/wrap)
  (export 'claylib/wrap::+%wchar-t+ :claylib/wrap)
  (export 'claylib/wrap::vr-device-info :claylib/wrap)
  (export 'claylib/wrap::+m-ln2+ :claylib/wrap)
  (export 'claylib/wrap::text-length :claylib/wrap)
  (export 'claylib/wrap::+true+ :claylib/wrap)
  (export 'claylib/wrap::get-gesture-detected :claylib/wrap)
  (export 'claylib/wrap::get-camera-matrix-2d :claylib/wrap)
  (export 'claylib/wrap::image-clear-background :claylib/wrap)
  (export 'claylib/wrap::long-double :claylib/wrap)
  (export 'claylib/wrap::draw-line-bezier :claylib/wrap)
  (export 'claylib/wrap::+raygui-line-text-padding+ :claylib/wrap)
  (export 'claylib/wrap::set-window-min-size :claylib/wrap)
  (export 'claylib/wrap::vector3-divide :claylib/wrap)
  (export 'claylib/wrap::text-append :claylib/wrap)
  (export 'claylib/wrap::putc :claylib/wrap)
  (export 'claylib/wrap::getchar-unlocked :claylib/wrap)
  (export 'claylib/wrap::gui-disable-tooltip :claylib/wrap)
  (export 'claylib/wrap::asinf :claylib/wrap)
  (export 'claylib/wrap::begin-texture-mode :claylib/wrap)
  (export 'claylib/wrap::m9 :claylib/wrap)
  (export 'claylib/wrap::is-cursor-hidden :claylib/wrap)
  (export 'claylib/wrap::gui-text-box-property :claylib/wrap)
  (export 'claylib/wrap::detach-audio-mixed-processor :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-rec :claylib/wrap)
  (export 'claylib/wrap::set-texture-filter :claylib/wrap)
  (export 'claylib/wrap::hypotl :claylib/wrap)
  (export 'claylib/wrap::c-random :claylib/wrap)
  (export 'claylib/wrap::puts :claylib/wrap)
  (export 'claylib/wrap::load-texture :claylib/wrap)
  (export 'claylib/wrap::vector2-subtract :claylib/wrap)
  (export 'claylib/wrap::load-model-animations :claylib/wrap)
  (export 'claylib/wrap::draw-mesh-instanced :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cubicmap :claylib/wrap)
  (export 'claylib/wrap::setbuf :claylib/wrap)
  (export 'claylib/wrap::end-drawing :claylib/wrap)
  (export 'claylib/wrap::advance-x :claylib/wrap)
  (export 'claylib/wrap::lgammal-r :claylib/wrap)
  (export 'claylib/wrap::float16 :claylib/wrap)
  (export 'claylib/wrap::draw-sphere :claylib/wrap)
  (export 'claylib/wrap::export-wave :claylib/wrap)
  (export 'claylib/wrap::vector3-length-sqr :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-SLIDER-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::material :claylib/wrap)
  (export 'claylib/wrap::vector3-distance :claylib/wrap)
  (export 'claylib/wrap::get-monitor-physical-height :claylib/wrap)
  (export 'claylib/wrap::gen-image-cellular :claylib/wrap)
  (export 'claylib/wrap::draw-poly-lines :claylib/wrap)
  (export 'claylib/wrap::color-alpha-blend :claylib/wrap)
  (export 'claylib/wrap::gui-color-panel :claylib/wrap)
  (export 'claylib/wrap::c-round :claylib/wrap)
  (export 'claylib/wrap::get-glyph-index :claylib/wrap)
  (export 'claylib/wrap::erff :claylib/wrap)
  (export 'claylib/wrap::tangents :claylib/wrap)
  (export 'claylib/wrap::+raygui-valuebox-max-chars+ :claylib/wrap)
  (export 'claylib/wrap::modf :claylib/wrap)
  (export 'claylib/wrap::color :claylib/wrap)
  (export 'claylib/wrap::+m-e+ :claylib/wrap)
  (export 'claylib/wrap::exp2l :claylib/wrap)
  (export 'claylib/wrap::+%va-list-defined+ :claylib/wrap)
  (export 'claylib/wrap::+m-1-pi+ :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-released :claylib/wrap)
  (export 'claylib/wrap::putw :claylib/wrap)
  (export 'claylib/wrap::+auto-cursor-cooldown+ :claylib/wrap)
  (export 'claylib/wrap::quaternion :claylib/wrap)
  (export 'claylib/wrap::set-shader-value-v :claylib/wrap)
  (export 'claylib/wrap::+m-2-pi+ :claylib/wrap)
  (export 'claylib/wrap::image-resize-canvas :claylib/wrap)
  (export 'claylib/wrap::get-camera-up :claylib/wrap)
  (export 'claylib/wrap::get-current-monitor :claylib/wrap)
  (export 'claylib/wrap::%chain :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-volume :claylib/wrap)
  (export 'claylib/wrap::get-text-lines :claylib/wrap)
  (export 'claylib/wrap::recs :claylib/wrap)
  (export 'claylib/wrap::set-material-texture :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-v :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-triangle
          :claylib/wrap)
  (export 'claylib/wrap::m1 :claylib/wrap)
  (export 'claylib/wrap::rectangle :claylib/wrap)
  (export 'claylib/wrap::gen-image-color :claylib/wrap)
  (export 'claylib/wrap::+math-errno+ :claylib/wrap)
  (export 'claylib/wrap::load-font-ex :claylib/wrap)
  (export 'claylib/wrap::get-mouse-position :claylib/wrap)
  (export 'claylib/wrap::rand-r :claylib/wrap)
  (export 'claylib/wrap::erfl :claylib/wrap)
  (export 'claylib/wrap::gamepad-axis :claylib/wrap)
  (export 'claylib/wrap::jn :claylib/wrap)
  (export 'claylib/wrap::floorf :claylib/wrap)
  (export 'claylib/wrap::getw :claylib/wrap)
  (export 'claylib/wrap::draw-text-codepoint :claylib/wrap)
  (export 'claylib/wrap::play-music-stream :claylib/wrap)
  (export 'claylib/wrap::+%bits-uintn-identity-h+ :claylib/wrap)
  (export 'claylib/wrap::setstate :claylib/wrap)
  (export 'claylib/wrap::unload-file-data :claylib/wrap)
  (export 'claylib/wrap::position :claylib/wrap)
  (export 'claylib/wrap::+math-errhandling+ :claylib/wrap)
  (export 'claylib/wrap::set-window-position :claylib/wrap)
  (export 'claylib/wrap::get-gesture-drag-vector :claylib/wrap)
  (export 'claylib/wrap::load-wave-samples :claylib/wrap)
  (export 'claylib/wrap::draw-capsule :claylib/wrap)
  (export 'claylib/wrap::direction :claylib/wrap)
  (export 'claylib/wrap::anim-vertices :claylib/wrap)
  (export 'claylib/wrap::load-shader :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CONFIG-FLAGS| :claylib/wrap)
  (export 'claylib/wrap::ftrylockfile :claylib/wrap)
  (export 'claylib/wrap::get-world-to-screen-ex :claylib/wrap)
  (export 'claylib/wrap::sample-size :claylib/wrap)
  (export 'claylib/wrap::load-dropped-files :claylib/wrap)
  (export 'claylib/wrap::llroundl :claylib/wrap)
  (export 'claylib/wrap::+raygui-h+ :claylib/wrap)
  (export 'claylib/wrap::is-window-focused :claylib/wrap)
  (export 'claylib/wrap::+rlapi+ :claylib/wrap)
  (export 'claylib/wrap::remainder :claylib/wrap)
  (export 'claylib/wrap::get-file-length :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@MATERIAL-MAP-INDEX| :claylib/wrap)
  (export 'claylib/wrap::fclose :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-x :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-CONTROL| :claylib/wrap)
  (export 'claylib/wrap::gui-label :claylib/wrap)
  (export 'claylib/wrap::ilogbf :claylib/wrap)
  (export 'claylib/wrap::strtof :claylib/wrap)
  (export 'claylib/wrap::get-monitor-height :claylib/wrap)
  (export 'claylib/wrap::asinl :claylib/wrap)
  (export 'claylib/wrap::quick-exit :claylib/wrap)
  (export 'claylib/wrap::atof :claylib/wrap)
  (export 'claylib/wrap::mem-free :claylib/wrap)
  (export 'claylib/wrap::image-color-contrast :claylib/wrap)
  (export 'claylib/wrap::strsignal :claylib/wrap)
  (export 'claylib/wrap::load-image-colors :claylib/wrap)
  (export 'claylib/wrap::%%val :claylib/wrap)
  (export 'claylib/wrap::mesh-count :claylib/wrap)
  (export 'claylib/wrap::gui-load-icons :claylib/wrap)
  (export 'claylib/wrap::gesture :claylib/wrap)
  (export 'claylib/wrap::a64l :claylib/wrap)
  (export 'claylib/wrap::fscanf :claylib/wrap)
  (export 'claylib/wrap::processor :claylib/wrap)
  (export 'claylib/wrap::tgamma :claylib/wrap)
  (export 'claylib/wrap::camera-mode :claylib/wrap)
  (export 'claylib/wrap::lgammaf :claylib/wrap)
  (export 'claylib/wrap::+m-sqrt2+ :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@--ATOMIC-WIDE-COUNTER@S@ATOMIC-WIDE-COUNTER.H@1141|
          :claylib/wrap)
  (export 'claylib/wrap::+raygui-support-log-info+ :claylib/wrap)
  (export 'claylib/wrap::vector2-zero :claylib/wrap)
  (export 'claylib/wrap::model-animation :claylib/wrap)
  (export 'claylib/wrap::isinf :claylib/wrap)
  (export 'claylib/wrap::set-shapes-texture :claylib/wrap)
  (export 'claylib/wrap::set-mouse-position :claylib/wrap)
  (export 'claylib/wrap::image-color-brightness :claylib/wrap)
  (export 'claylib/wrap::set-window-size :claylib/wrap)
  (export 'claylib/wrap::%cur-column :claylib/wrap)
  (export 'claylib/wrap::is-audio-stream-ready :claylib/wrap)
  (export 'claylib/wrap::detach-audio-stream-processor :claylib/wrap)
  (export 'claylib/wrap::ceilf :claylib/wrap)
  (export 'claylib/wrap::vector3-refract :claylib/wrap)
  (export 'claylib/wrap::ceil :claylib/wrap)
  (export 'claylib/wrap::image-draw-circle-v :claylib/wrap)
  (export 'claylib/wrap::quaternion-subtract-value :claylib/wrap)
  (export 'claylib/wrap::+nfdbits+ :claylib/wrap)
  (export 'claylib/wrap::get-screen-height :claylib/wrap)
  (export 'claylib/wrap::begin-vr-stereo-mode :claylib/wrap)
  (export 'claylib/wrap::%flags2 :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-axis-count :claylib/wrap)
  (export 'claylib/wrap::get-working-directory :claylib/wrap)
  (export 'claylib/wrap::+%bits-time64-h+ :claylib/wrap)
  (export 'claylib/wrap::+rl-vector3-type+ :claylib/wrap)
  (export 'claylib/wrap::gui-get-state :claylib/wrap)
  (export 'claylib/wrap::scalbnf :claylib/wrap)
  (export 'claylib/wrap::get-camera-view-matrix :claylib/wrap)
  (export 'claylib/wrap::get-camera-right :claylib/wrap)
  (export 'claylib/wrap::+raygui-textinputbox-height+ :claylib/wrap)
  (export 'claylib/wrap::close-audio-device :claylib/wrap)
  (export 'claylib/wrap::modfl :claylib/wrap)
  (export 'claylib/wrap::strcoll :claylib/wrap)
  (export 'claylib/wrap::vector3-barycenter :claylib/wrap)
  (export 'claylib/wrap::+raygui-messagebox-button-padding+
          :claylib/wrap)
  (export 'claylib/wrap::quaternion-to-euler :claylib/wrap)
  (export 'claylib/wrap::ffsl :claylib/wrap)
  (export 'claylib/wrap::nearbyint :claylib/wrap)
  (export 'claylib/wrap::+l-ctermid+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@TEXTURE-FILTER| :claylib/wrap)
  (export 'claylib/wrap::putenv :claylib/wrap)
  (export 'claylib/wrap::+pi+ :claylib/wrap)
  (export 'claylib/wrap::+tmp-max+ :claylib/wrap)
  (export 'claylib/wrap::log10f :claylib/wrap)
  (export 'claylib/wrap::+max-line-buffer-size+ :claylib/wrap)
  (export 'claylib/wrap::decompress-data :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-triangle :claylib/wrap)
  (export 'claylib/wrap::text-split :claylib/wrap)
  (export 'claylib/wrap::unload-texture :claylib/wrap)
  (export 'claylib/wrap::matrix-invert :claylib/wrap)
  (export 'claylib/wrap::quaternion-identity :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-button-pressed :claylib/wrap)
  (export 'claylib/wrap::font :claylib/wrap)
  (export 'claylib/wrap::anim-normals :claylib/wrap)
  (export 'claylib/wrap::offset :claylib/wrap)
  (export 'claylib/wrap::transform :claylib/wrap)
  (export 'claylib/wrap::%vtable-offset :claylib/wrap)
  (export 'claylib/wrap::wrap :claylib/wrap)
  (export 'claylib/wrap::scalbf :claylib/wrap)
  (export 'claylib/wrap::strrchr :claylib/wrap)
  (export 'claylib/wrap::color-from-normalized :claylib/wrap)
  (export 'claylib/wrap::gui-panel :claylib/wrap)
  (export 'claylib/wrap::+raylib-version-patch+ :claylib/wrap)
  (export 'claylib/wrap::bind-pose :claylib/wrap)
  (export 'claylib/wrap::draw-text :claylib/wrap)
  (export 'claylib/wrap::srand48-r :claylib/wrap)
  (export 'claylib/wrap::params :claylib/wrap)
  (export 'claylib/wrap::get-gesture-pinch-vector :claylib/wrap)
  (export 'claylib/wrap::draw-texture-v :claylib/wrap)
  (export 'claylib/wrap::set-mouse-cursor :claylib/wrap)
  (export 'claylib/wrap::set-shader-value-matrix :claylib/wrap)
  (export 'claylib/wrap::isnanf :claylib/wrap)
  (export 'claylib/wrap::fd-set :claylib/wrap)
  (export 'claylib/wrap::sample-rate :claylib/wrap)
  (export 'claylib/wrap::+mouse-left-button+ :claylib/wrap)
  (export 'claylib/wrap::matrix-look-at :claylib/wrap)
  (export 'claylib/wrap::load-vr-stereo-config :claylib/wrap)
  (export 'claylib/wrap::sqrtl :claylib/wrap)
  (export 'claylib/wrap::update-texture-rec :claylib/wrap)
  (export 'claylib/wrap::+raygui-textsplit-max-items+ :claylib/wrap)
  (export 'claylib/wrap::timespec :claylib/wrap)
  (export 'claylib/wrap::%%x :claylib/wrap)
  (export 'claylib/wrap::fade :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-gradient-v :claylib/wrap)
  (export 'claylib/wrap::gui-color-picker :claylib/wrap)
  (export 'claylib/wrap::m3 :claylib/wrap)
  (export 'claylib/wrap::quaternion-divide :claylib/wrap)
  (export 'claylib/wrap::quaternion-add-value :claylib/wrap)
  (export 'claylib/wrap::gui-tab-bar :claylib/wrap)
  (export 'claylib/wrap::+rmapi+ :claylib/wrap)
  (export 'claylib/wrap::minimize-window :claylib/wrap)
  (export 'claylib/wrap::locs :claylib/wrap)
  (export 'claylib/wrap::get-fps :claylib/wrap)
  (export 'claylib/wrap::left :claylib/wrap)
  (export 'claylib/wrap::ynl :claylib/wrap)
  (export 'claylib/wrap::acoshl :claylib/wrap)
  (export 'claylib/wrap::vector3-unproject :claylib/wrap)
  (export 'claylib/wrap::+rad2deg+ :claylib/wrap)
  (export 'claylib/wrap::vector2-distance :claylib/wrap)
  (export 'claylib/wrap::ftell :claylib/wrap)
  (export 'claylib/wrap::strtol :claylib/wrap)
  (export 'claylib/wrap::load-directory-files-ex :claylib/wrap)
  (export 'claylib/wrap::+%posix-source+ :claylib/wrap)
  (export 'claylib/wrap::rintf :claylib/wrap)
  (export 'claylib/wrap::jrand48-r :claylib/wrap)
  (export 'claylib/wrap::coshf :claylib/wrap)
  (export 'claylib/wrap::mouse-cursor :claylib/wrap)
  (export 'claylib/wrap::rand-deg :claylib/wrap)
  (export 'claylib/wrap::vector2-one :claylib/wrap)
  (export 'claylib/wrap::coshl :claylib/wrap)
  (export 'claylib/wrap::image-draw-line :claylib/wrap)
  (export 'claylib/wrap::+mouse-middle-button+ :claylib/wrap)
  (export 'claylib/wrap::draw-bounding-box :claylib/wrap)
  (export 'claylib/wrap::draw-plane :claylib/wrap)
  (export 'claylib/wrap::begin-drawing :claylib/wrap)
  (export 'claylib/wrap::vector2-clamp-value :claylib/wrap)
  (export 'claylib/wrap::lround :claylib/wrap)
  (export 'claylib/wrap::load-texture-from-image :claylib/wrap)
  (export 'claylib/wrap::qfcvt :claylib/wrap)
  (export 'claylib/wrap::renameat :claylib/wrap)
  (export 'claylib/wrap::seed48-r :claylib/wrap)
  (export 'claylib/wrap::set-load-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::+%bits-stdio-lim-h+ :claylib/wrap)
  (export 'claylib/wrap::expm1l :claylib/wrap)
  (export 'claylib/wrap::strtold :claylib/wrap)
  (export 'claylib/wrap::draw-model-ex :claylib/wrap)
  (export 'claylib/wrap::u-char :claylib/wrap)
  (export 'claylib/wrap::trace-log :claylib/wrap)
  (export 'claylib/wrap::fflush-unlocked :claylib/wrap)
  (export 'claylib/wrap::unload-utf8 :claylib/wrap)
  (export 'claylib/wrap::pixel-format :claylib/wrap)
  (export 'claylib/wrap::+wuntraced+ :claylib/wrap)
  (export 'claylib/wrap::+raygui-textsplit-max-text-size+
          :claylib/wrap)
  (export 'claylib/wrap::get-font-default :claylib/wrap)
  (export 'claylib/wrap::srandom :claylib/wrap)
  (export 'claylib/wrap::mem-alloc :claylib/wrap)
  (export 'claylib/wrap::texture-wrap :claylib/wrap)
  (export 'claylib/wrap::glyphs :claylib/wrap)
  (export 'claylib/wrap::%float32 :claylib/wrap)
  (export 'claylib/wrap::nexttoward :claylib/wrap)
  (export 'claylib/wrap::mkstemp :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@FD-SET| :claylib/wrap)
  (export 'claylib/wrap::fmin :claylib/wrap)
  (export 'claylib/wrap::unload-wave :claylib/wrap)
  (export 'claylib/wrap::upload-mesh :claylib/wrap)
  (export 'claylib/wrap::update-music-stream :claylib/wrap)
  (export 'claylib/wrap::hypotf :claylib/wrap)
  (export 'claylib/wrap::translation :claylib/wrap)
  (export 'claylib/wrap::gui-control :claylib/wrap)
  (export 'claylib/wrap::strspn :claylib/wrap)
  (export 'claylib/wrap::gen-image-text :claylib/wrap)
  (export 'claylib/wrap::m13 :claylib/wrap)
  (export 'claylib/wrap::+raygui-max-props-base+ :claylib/wrap)
  (export 'claylib/wrap::load-image-raw :claylib/wrap)
  (export 'claylib/wrap::load-directory-files :claylib/wrap)
  (export 'claylib/wrap::getc :claylib/wrap)
  (export 'claylib/wrap::%codecvt :claylib/wrap)
  (export 'claylib/wrap::gui-combo-box-property :claylib/wrap)
  (export 'claylib/wrap::gamepad-button :claylib/wrap)
  (export 'claylib/wrap::draw-texture-ex :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@TRACE-LOG-LEVEL| :claylib/wrap)
  (export 'claylib/wrap::scale :claylib/wrap)
  (export 'claylib/wrap::clearenv :claylib/wrap)
  (export 'claylib/wrap::draw-billboard :claylib/wrap)
  (export 'claylib/wrap::+raygui-line-margin-text+ :claylib/wrap)
  (export 'claylib/wrap::scalblnf :claylib/wrap)
  (export 'claylib/wrap::draw-text-codepoints :claylib/wrap)
  (export 'claylib/wrap::vector3-clamp-value :claylib/wrap)
  (export 'claylib/wrap::quaternion-nlerp :claylib/wrap)
  (export 'claylib/wrap::llround :claylib/wrap)
  (export 'claylib/wrap::+m-log10e+ :claylib/wrap)
  (export 'claylib/wrap::rotation :claylib/wrap)
  (export 'claylib/wrap::+wnowait+ :claylib/wrap)
  (export 'claylib/wrap::load-font :claylib/wrap)
  (export 'claylib/wrap::drand48-data :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@N-PATCH-LAYOUT| :claylib/wrap)
  (export 'claylib/wrap::is-music-ready :claylib/wrap)
  (export 'claylib/wrap::pow :claylib/wrap)
  (export 'claylib/wrap::llrint :claylib/wrap)
  (export 'claylib/wrap::vector3-to-float-v :claylib/wrap)
  (export 'claylib/wrap::tgammal :claylib/wrap)
  (export 'claylib/wrap::putchar :claylib/wrap)
  (export 'claylib/wrap::data :claylib/wrap)
  (export 'claylib/wrap::image-color-replace :claylib/wrap)
  (export 'claylib/wrap::unload-model-animation :claylib/wrap)
  (export 'claylib/wrap::on-exit :claylib/wrap)
  (export 'claylib/wrap::nan :claylib/wrap)
  (export 'claylib/wrap::exp2 :claylib/wrap)
  (export 'claylib/wrap::+m-sqrt1-2+ :claylib/wrap)
  (export 'claylib/wrap::fprintf :claylib/wrap)
  (export 'claylib/wrap::quaternion-to-axis-angle :claylib/wrap)
  (export 'claylib/wrap::image-crop :claylib/wrap)
  (export 'claylib/wrap::tanl :claylib/wrap)
  (export 'claylib/wrap::load-shader-from-memory :claylib/wrap)
  (export 'claylib/wrap::distance :claylib/wrap)
  (export 'claylib/wrap::isnan :claylib/wrap)
  (export 'claylib/wrap::+little-endian+ :claylib/wrap)
  (export 'claylib/wrap::draw-sphere-ex :claylib/wrap)
  (export 'claylib/wrap::llabs :claylib/wrap)
  (export 'claylib/wrap::right-lens-center :claylib/wrap)
  (export 'claylib/wrap::+deg2rad+ :claylib/wrap)
  (export 'claylib/wrap::lgammaf-r :claylib/wrap)
  (export 'claylib/wrap::set-sound-pitch :claylib/wrap)
  (export 'claylib/wrap::draw-capsule-wires :claylib/wrap)
  (export 'claylib/wrap::%io-save-end :claylib/wrap)
  (export 'claylib/wrap::+filename-max+ :claylib/wrap)
  (export 'claylib/wrap::%%wch :claylib/wrap)
  (export 'claylib/wrap::+m-pi-2+ :claylib/wrap)
  (export 'claylib/wrap::j1l :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-sphere :claylib/wrap)
  (export 'claylib/wrap::gui-status-bar :claylib/wrap)
  (export 'claylib/wrap::expl :claylib/wrap)
  (export 'claylib/wrap::+%bits-floatn-h+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-circle-lines-v :claylib/wrap)
  (export 'claylib/wrap::setenv :claylib/wrap)
  (export 'claylib/wrap::vr-stereo-config :claylib/wrap)
  (export 'claylib/wrap::camera-move-forward :claylib/wrap)
  (export 'claylib/wrap::rename :claylib/wrap)
  (export 'claylib/wrap::+fp-zero+ :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder-ex :claylib/wrap)
  (export 'claylib/wrap::vector3-angle :claylib/wrap)
  (export 'claylib/wrap::vector2-lerp :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GESTURE| :claylib/wrap)
  (export 'claylib/wrap::+auto-cursor-delay+ :claylib/wrap)
  (export 'claylib/wrap::is-render-texture-ready :claylib/wrap)
  (export 'claylib/wrap::layout :claylib/wrap)
  (export 'claylib/wrap::remquof :claylib/wrap)
  (export 'claylib/wrap::load-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::load-materials :claylib/wrap)
  (export 'claylib/wrap::u-int :claylib/wrap)
  (export 'claylib/wrap::fabsl :claylib/wrap)
  (export 'claylib/wrap::init-audio-device :claylib/wrap)
  (export 'claylib/wrap::scalbl :claylib/wrap)
  (export 'claylib/wrap::camera-move-to-target :claylib/wrap)
  (export 'claylib/wrap::toggle-fullscreen :claylib/wrap)
  (export 'claylib/wrap::finitef :claylib/wrap)
  (export 'claylib/wrap::load-music-stream-from-memory :claylib/wrap)
  (export 'claylib/wrap::log2f :claylib/wrap)
  (export 'claylib/wrap::+raygui-icon-data-elements+ :claylib/wrap)
  (export 'claylib/wrap::capacity :claylib/wrap)
  (export 'claylib/wrap::draw-model-wires :claylib/wrap)
  (export 'claylib/wrap::text-to-lower :claylib/wrap)
  (export 'claylib/wrap::material-map-index :claylib/wrap)
  (export 'claylib/wrap::m4 :claylib/wrap)
  (export 'claylib/wrap::gcvt :claylib/wrap)
  (export 'claylib/wrap::+infinity+ :claylib/wrap)
  (export 'claylib/wrap::perror :claylib/wrap)
  (export 'claylib/wrap::get-music-time-length :claylib/wrap)
  (export 'claylib/wrap::camera-pitch :claylib/wrap)
  (export 'claylib/wrap::random-data :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-lines-ex :claylib/wrap)
  (export 'claylib/wrap::+false+ :claylib/wrap)
  (export 'claylib/wrap::mkdtemp :claylib/wrap)
  (export 'claylib/wrap::h-screen-size :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-TOGGLE-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::is-gesture-detected :claylib/wrap)
  (export 'claylib/wrap::%%data :claylib/wrap)
  (export 'claylib/wrap::gui-button :claylib/wrap)
  (export 'claylib/wrap::image-flip-vertical :claylib/wrap)
  (export 'claylib/wrap::lgamma :claylib/wrap)
  (export 'claylib/wrap::vector3-clamp :claylib/wrap)
  (export 'claylib/wrap::mrand48-r :claylib/wrap)
  (export 'claylib/wrap::vector2-negate :claylib/wrap)
  (export 'claylib/wrap::vector3-add-value :claylib/wrap)
  (export 'claylib/wrap::dremf :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-LIST-VIEW-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::matrix-to-float-v :claylib/wrap)
  (export 'claylib/wrap::fminl :claylib/wrap)
  (export 'claylib/wrap::fdopen :claylib/wrap)
  (export 'claylib/wrap::encode-data-base64 :claylib/wrap)
  (export 'claylib/wrap::fputc-unlocked :claylib/wrap)
  (export 'claylib/wrap::+stdin+ :claylib/wrap)
  (export 'claylib/wrap::update-mesh-buffer :claylib/wrap)
  (export 'claylib/wrap::get-camera-forward :claylib/wrap)
  (export 'claylib/wrap::logbl :claylib/wrap)
  (export 'claylib/wrap::+raygui-max-controls+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-knot :claylib/wrap)
  (export 'claylib/wrap::y0l :claylib/wrap)
  (export 'claylib/wrap::rindex :claylib/wrap)
  (export 'claylib/wrap::draw-billboard-pro :claylib/wrap)
  (export 'claylib/wrap::%%old-x :claylib/wrap)
  (export 'claylib/wrap::significandf :claylib/wrap)
  (export 'claylib/wrap::%%align :claylib/wrap)
  (export 'claylib/wrap::draw-circle-sector :claylib/wrap)
  (export 'claylib/wrap::quaternion-multiply :claylib/wrap)
  (export 'claylib/wrap::%io-read-end :claylib/wrap)
  (export 'claylib/wrap::srand :claylib/wrap)
  (export 'claylib/wrap::check-collision-circle-rec :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-sphere :claylib/wrap)
  (export 'claylib/wrap::%io-write-base :claylib/wrap)
  (export 'claylib/wrap::jrand48 :claylib/wrap)
  (export 'claylib/wrap::c-acosh :claylib/wrap)
  (export 'claylib/wrap::+%bits-stdint-intn-h+ :claylib/wrap)
  (export 'claylib/wrap::+%stdlib-h+ :claylib/wrap)
  (export 'claylib/wrap::export-data-as-code :claylib/wrap)
  (export 'claylib/wrap::save-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::isnanl :claylib/wrap)
  (export 'claylib/wrap::quaternion-lerp :claylib/wrap)
  (export 'claylib/wrap::logf :claylib/wrap)
  (export 'claylib/wrap::expm1 :claylib/wrap)
  (export 'claylib/wrap::draw-circle-gradient :claylib/wrap)
  (export 'claylib/wrap::colors :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@DIV-T| :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GAMEPAD-BUTTON| :claylib/wrap)
  (export 'claylib/wrap::+raygui-version-major+ :claylib/wrap)
  (export 'claylib/wrap::free :claylib/wrap)
  (export 'claylib/wrap::get-world-to-screen :claylib/wrap)
  (export 'claylib/wrap::begin-mode-3d :claylib/wrap)
  (export 'claylib/wrap::vector2-scale :claylib/wrap)
  (export 'claylib/wrap::+fp-normal+ :claylib/wrap)
  (export 'claylib/wrap::get-touch-point-id :claylib/wrap)
  (export 'claylib/wrap::v-screen-center :claylib/wrap)
  (export 'claylib/wrap::vector3-negate :claylib/wrap)
  (export 'claylib/wrap::drem :claylib/wrap)
  (export 'claylib/wrap::vector2-length :claylib/wrap)
  (export 'claylib/wrap::cbrtl :claylib/wrap)
  (export 'claylib/wrap::name :claylib/wrap)
  (export 'claylib/wrap::n-patch-layout :claylib/wrap)
  (export 'claylib/wrap::texture-cubemap :claylib/wrap)
  (export 'claylib/wrap::stream :claylib/wrap)
  (export 'claylib/wrap::+raygui-colorbaralpha-checked-size+
          :claylib/wrap)
  (export 'claylib/wrap::strtod :claylib/wrap)
  (export 'claylib/wrap::nrand48 :claylib/wrap)
  (export 'claylib/wrap::depth :claylib/wrap)
  (export 'claylib/wrap::%io-buf-base :claylib/wrap)
  (export 'claylib/wrap::fgetc :claylib/wrap)
  (export 'claylib/wrap::set-music-volume :claylib/wrap)
  (export 'claylib/wrap::unload-vr-stereo-config :claylib/wrap)
  (export 'claylib/wrap::c-acos :claylib/wrap)
  (export 'claylib/wrap::is-shader-ready :claylib/wrap)
  (export 'claylib/wrap::nanl :claylib/wrap)
  (export 'claylib/wrap::jnf :claylib/wrap)
  (export 'claylib/wrap::text-is-equal :claylib/wrap)
  (export 'claylib/wrap::quaternion-equals :claylib/wrap)
  (export 'claylib/wrap::+m-ln10+ :claylib/wrap)
  (export 'claylib/wrap::ceill :claylib/wrap)
  (export 'claylib/wrap::set-mouse-scale :claylib/wrap)
  (export 'claylib/wrap::%io-wide-data :claylib/wrap)
  (export 'claylib/wrap::unload-image :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-TEXT-ALIGNMENT| :claylib/wrap)
  (export 'claylib/wrap::+scrollbar-left-side+ :claylib/wrap)
  (export 'claylib/wrap::is-sound-ready :claylib/wrap)
  (export 'claylib/wrap::draw-text-pro :claylib/wrap)
  (export 'claylib/wrap::disable-event-waiting :claylib/wrap)
  (export 'claylib/wrap::get-camera-projection-matrix :claylib/wrap)
  (export 'claylib/wrap::c-exp :claylib/wrap)
  (export 'claylib/wrap::end-mode-2d :claylib/wrap)
  (export 'claylib/wrap::gui-default-property :claylib/wrap)
  (export 'claylib/wrap::measure-text-ex :claylib/wrap)
  (export 'claylib/wrap::draw-line-strip :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-TEXT-BOX-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-fan :claylib/wrap)
  (export 'claylib/wrap::c-abs :claylib/wrap)
  (export 'claylib/wrap::quaternion-transform :claylib/wrap)
  (export 'claylib/wrap::get-mouse-ray :claylib/wrap)
  (export 'claylib/wrap::%io-write-end :claylib/wrap)
  (export 'claylib/wrap::is-window-maximized :claylib/wrap)
  (export 'claylib/wrap::strtok :claylib/wrap)
  (export 'claylib/wrap::check-collision-recs :claylib/wrap)
  (export 'claylib/wrap::scalbln :claylib/wrap)
  (export 'claylib/wrap::strcat :claylib/wrap)
  (export 'claylib/wrap::r-audio-buffer :claylib/wrap)
  (export 'claylib/wrap::load-audio-stream :claylib/wrap)
  (export 'claylib/wrap::stop-sound :claylib/wrap)
  (export 'claylib/wrap::load-image-from-screen :claylib/wrap)
  (export 'claylib/wrap::matrix-scale :claylib/wrap)
  (export 'claylib/wrap::load-material-default :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-tangents :claylib/wrap)
  (export 'claylib/wrap::wave-copy :claylib/wrap)
  (export 'claylib/wrap::fmal :claylib/wrap)
  (export 'claylib/wrap::image-rotate-cw :claylib/wrap)
  (export 'claylib/wrap::gui-draw-icon :claylib/wrap)
  (export 'claylib/wrap::strlen :claylib/wrap)
  (export 'claylib/wrap::atanhl :claylib/wrap)
  (export 'claylib/wrap::right :claylib/wrap)
  (export 'claylib/wrap::+%bits-libm-simd-decl-stubs-h+
          :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-pro :claylib/wrap)
  (export 'claylib/wrap::get-mouse-delta :claylib/wrap)
  (export 'claylib/wrap::strtoul :claylib/wrap)
  (export 'claylib/wrap::image-resize :claylib/wrap)
  (export 'claylib/wrap::end-mode-3d :claylib/wrap)
  (export 'claylib/wrap::fmodf :claylib/wrap)
  (export 'claylib/wrap::is-key-down :claylib/wrap)
  (export 'claylib/wrap::vector3-normalize :claylib/wrap)
  (export 'claylib/wrap::srandom-r :claylib/wrap)
  (export 'claylib/wrap::fileno :claylib/wrap)
  (export 'claylib/wrap::color-tint :claylib/wrap)
  (export 'claylib/wrap::get-file-mod-time :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@LLDIV-T| :claylib/wrap)
  (export 'claylib/wrap::%io-file :claylib/wrap)
  (export 'claylib/wrap::+bufsiz+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GAMEPAD-AXIS| :claylib/wrap)
  (export 'claylib/wrap::gui-fade :claylib/wrap)
  (export 'claylib/wrap::gui-slider :claylib/wrap)
  (export 'claylib/wrap::vertex-count :claylib/wrap)
  (export 'claylib/wrap::fovy :claylib/wrap)
  (export 'claylib/wrap::check-collision-box-sphere :claylib/wrap)
  (export 'claylib/wrap::set-music-pan :claylib/wrap)
  (export 'claylib/wrap::printf :claylib/wrap)
  (export 'claylib/wrap::lgamma-r :claylib/wrap)
  (export 'claylib/wrap::+%size-t+ :claylib/wrap)
  (export 'claylib/wrap::+fp-ilogbnan+ :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-xyz :claylib/wrap)
  (export 'claylib/wrap::+%rwlock-internal-h+ :claylib/wrap)
  (export 'claylib/wrap::%%value64 :claylib/wrap)
  (export 'claylib/wrap::get-directory-path :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-rec :claylib/wrap)
  (export 'claylib/wrap::scalbnl :claylib/wrap)
  (export 'claylib/wrap::popen :claylib/wrap)
  (export 'claylib/wrap::quaternion-invert :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-name :claylib/wrap)
  (export 'claylib/wrap::attach-audio-stream-processor :claylib/wrap)
  (export 'claylib/wrap::+%bits-floatn-common-h+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cylinder :claylib/wrap)
  (export 'claylib/wrap::scalbn :claylib/wrap)
  (export 'claylib/wrap::scalblnl :claylib/wrap)
  (export 'claylib/wrap::load-file-data :claylib/wrap)
  (export 'claylib/wrap::%freeres-buf :claylib/wrap)
  (export 'claylib/wrap::play-sound :claylib/wrap)
  (export 'claylib/wrap::gui-text-alignment :claylib/wrap)
  (export 'claylib/wrap::rand-type :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-available :claylib/wrap)
  (export 'claylib/wrap::blend-mode :claylib/wrap)
  (export 'claylib/wrap::+exit-success+ :claylib/wrap)
  (export 'claylib/wrap::lens-separation-distance :claylib/wrap)
  (export 'claylib/wrap::restore-window :claylib/wrap)
  (export 'claylib/wrap::fma :claylib/wrap)
  (export 'claylib/wrap::fdiml :claylib/wrap)
  (export 'claylib/wrap::window-should-close :claylib/wrap)
  (export 'claylib/wrap::image-color-grayscale :claylib/wrap)
  (export 'claylib/wrap::text-to-pascal :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-lines :claylib/wrap)
  (export 'claylib/wrap::image-draw :claylib/wrap)
  (export 'claylib/wrap::get-random-value :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@--ONCE-FLAG| :claylib/wrap)
  (export 'claylib/wrap::width :claylib/wrap)
  (export 'claylib/wrap::maximize-window :claylib/wrap)
  (export 'claylib/wrap::mouse-button :claylib/wrap)
  (export 'claylib/wrap::take-screenshot :claylib/wrap)
  (export 'claylib/wrap::rand :claylib/wrap)
  (export 'claylib/wrap::%unused2 :claylib/wrap)
  (export 'claylib/wrap::pause-music-stream :claylib/wrap)
  (export 'claylib/wrap::matrix-identity :claylib/wrap)
  (export 'claylib/wrap::is-window-hidden :claylib/wrap)
  (export 'claylib/wrap::load-image-from-memory :claylib/wrap)
  (export 'claylib/wrap::stop-music-stream :claylib/wrap)
  (export 'claylib/wrap::+raygui-textinputbox-button-height+
          :claylib/wrap)
  (export 'claylib/wrap::trace-log-callback :claylib/wrap)
  (export 'claylib/wrap::logbf :claylib/wrap)
  (export 'claylib/wrap::atexit :claylib/wrap)
  (export 'claylib/wrap::+%io-user-lock+ :claylib/wrap)
  (export 'claylib/wrap::set-window-title :claylib/wrap)
  (export 'claylib/wrap::strcpy :claylib/wrap)
  (export 'claylib/wrap::update-model-animation :claylib/wrap)
  (export 'claylib/wrap::+raygui-textinputbox-button-padding+
          :claylib/wrap)
  (export 'claylib/wrap::set-sound-pan :claylib/wrap)
  (export 'claylib/wrap::paths :claylib/wrap)
  (export 'claylib/wrap::vector3-invert :claylib/wrap)
  (export 'claylib/wrap::sprintf :claylib/wrap)
  (export 'claylib/wrap::+%atfile-source+ :claylib/wrap)
  (export 'claylib/wrap::export-image-as-code :claylib/wrap)
  (export 'claylib/wrap::enable-event-waiting :claylib/wrap)
  (export 'claylib/wrap::gui-dropdown-box :claylib/wrap)
  (export 'claylib/wrap::+%mdouble+ :claylib/wrap)
  (export 'claylib/wrap::+%bits-endianness-h+ :claylib/wrap)
  (export 'claylib/wrap::gui-color-bar-hue :claylib/wrap)
  (export 'claylib/wrap::get-world-to-screen-2d :claylib/wrap)
  (export 'claylib/wrap::matrix-determinant :claylib/wrap)
  (export 'claylib/wrap::+fp-subnormal+ :claylib/wrap)
  (export 'claylib/wrap::codepoint-to-utf8 :claylib/wrap)
  (export 'claylib/wrap::gui-message-box :claylib/wrap)
  (export 'claylib/wrap::draw-cube-v :claylib/wrap)
  (export 'claylib/wrap::gui-list-view-ex :claylib/wrap)
  (export 'claylib/wrap::fopen :claylib/wrap)
  (export 'claylib/wrap::+material-map-diffuse+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-line-v :claylib/wrap)
  (export 'claylib/wrap::fmod :claylib/wrap)
  (export 'claylib/wrap::c-cosh :claylib/wrap)
  (export 'claylib/wrap::wait-time :claylib/wrap)
  (export 'claylib/wrap::lgammal :claylib/wrap)
  (export 'claylib/wrap::+icon-text-padding+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@SHADER-UNIFORM-DATA-TYPE|
          :claylib/wrap)
  (export 'claylib/wrap::vector2-divide :claylib/wrap)
  (export 'claylib/wrap::gui-value-box :claylib/wrap)
  (export 'claylib/wrap::+wstopped+ :claylib/wrap)
  (export 'claylib/wrap::image-resize-nn :claylib/wrap)
  (export 'claylib/wrap::+raylib-h+ :claylib/wrap)
  (export 'claylib/wrap::compress-data :claylib/wrap)
  (export 'claylib/wrap::model :claylib/wrap)
  (export 'claylib/wrap::+%sys-select-h+ :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-lines :claylib/wrap)
  (export 'claylib/wrap::%float64x :claylib/wrap)
  (export 'claylib/wrap::color-contrast :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-gradient-ex :claylib/wrap)
  (export 'claylib/wrap::%exit :claylib/wrap)
  (export 'claylib/wrap::sqrtf :claylib/wrap)
  (export 'claylib/wrap::get-codepoint-next :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CUBEMAP-LAYOUT| :claylib/wrap)
  (export 'claylib/wrap::vector3-length :claylib/wrap)
  (export 'claylib/wrap::point :claylib/wrap)
  (export 'claylib/wrap::min :claylib/wrap)
  (export 'claylib/wrap::acosl :claylib/wrap)
  (export 'claylib/wrap::bone-info :claylib/wrap)
  (export 'claylib/wrap::gui-list-view-property :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@--FSID-T| :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-MUTEX-T| :claylib/wrap)
  (export 'claylib/wrap::gui-grid :claylib/wrap)
  (export 'claylib/wrap::gui-check-box :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|
          :claylib/wrap)
  (export 'claylib/wrap::l64a :claylib/wrap)
  (export 'claylib/wrap::unload-font-data :claylib/wrap)
  (export 'claylib/wrap::wave :claylib/wrap)
  (export 'claylib/wrap::color-from-hsv :claylib/wrap)
  (export 'claylib/wrap::draw-texture-n-patch :claylib/wrap)
  (export 'claylib/wrap::+mb-cur-max+ :claylib/wrap)
  (export 'claylib/wrap::log10 :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-axis-angle :claylib/wrap)
  (export 'claylib/wrap::load-music-stream :claylib/wrap)
  (export 'claylib/wrap::check-collision-lines :claylib/wrap)
  (export 'claylib/wrap::draw-pixel-v :claylib/wrap)
  (export 'claylib/wrap::gui-disable :claylib/wrap)
  (export 'claylib/wrap::unload-material :claylib/wrap)
  (export 'claylib/wrap::left-lens-center :claylib/wrap)
  (export 'claylib/wrap::glyph-count :claylib/wrap)
  (export 'claylib/wrap::gui-icon-text :claylib/wrap)
  (export 'claylib/wrap::copysign :claylib/wrap)
  (export 'claylib/wrap::*stderr* :claylib/wrap)
  (export 'claylib/wrap::draw-line-bezier-cubic :claylib/wrap)
  (export 'claylib/wrap::%%low :claylib/wrap)
  (export 'claylib/wrap::image :claylib/wrap)
  (export 'claylib/wrap::+l-tmpnam+ :claylib/wrap)
  (export 'claylib/wrap::draw-cube-wires :claylib/wrap)
  (export 'claylib/wrap::set-mouse-offset :claylib/wrap)
  (export 'claylib/wrap::set-trace-log-callback :claylib/wrap)
  (export 'claylib/wrap::+raylib-version-major+ :claylib/wrap)
  (export 'claylib/wrap::pause-sound :claylib/wrap)
  (export 'claylib/wrap::gui-slider-property :claylib/wrap)
  (export 'claylib/wrap::color-alpha :claylib/wrap)
  (export 'claylib/wrap::property-value :claylib/wrap)
  (export 'claylib/wrap::getc-unlocked :claylib/wrap)
  (export 'claylib/wrap::erand48 :claylib/wrap)
  (export 'claylib/wrap::gen-image-font-atlas :claylib/wrap)
  (export 'claylib/wrap::%float64 :claylib/wrap)
  (export 'claylib/wrap::view-offset :claylib/wrap)
  (export 'claylib/wrap::vector3 :claylib/wrap)
  (export 'claylib/wrap::gui-set-style :claylib/wrap)
  (export 'claylib/wrap::getenv :claylib/wrap)
  (export 'claylib/wrap::llrintf :claylib/wrap)
  (export 'claylib/wrap::gui-slider-bar :claylib/wrap)
  (export 'claylib/wrap::%%value32 :claylib/wrap)
  (export 'claylib/wrap::file-path-list :claylib/wrap)
  (export 'claylib/wrap::lrint :claylib/wrap)
  (export 'claylib/wrap::begin-scissor-mode :claylib/wrap)
  (export 'claylib/wrap::dprintf :claylib/wrap)
  (export 'claylib/wrap::+nan+ :claylib/wrap)
  (export 'claylib/wrap::set-window-state :claylib/wrap)
  (export 'claylib/wrap::draw-texture :claylib/wrap)
  (export 'claylib/wrap::get-gesture-hold-duration :claylib/wrap)
  (export 'claylib/wrap::nextafterl :claylib/wrap)
  (export 'claylib/wrap::gammal :claylib/wrap)
  (export 'claylib/wrap::load-wave :claylib/wrap)
  (export 'claylib/wrap::change-directory :claylib/wrap)
  (export 'claylib/wrap::%io-marker :claylib/wrap)
  (export 'claylib/wrap::export-font-as-code :claylib/wrap)
  (export 'claylib/wrap::+%stdio-h+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-text-ex :claylib/wrap)
  (export 'claylib/wrap::ray-collision :claylib/wrap)
  (export 'claylib/wrap::copysignf :claylib/wrap)
  (export 'claylib/wrap::vector2-multiply :claylib/wrap)
  (export 'claylib/wrap::gui-set-tooltip :claylib/wrap)
  (export 'claylib/wrap::*stdin* :claylib/wrap)
  (export 'claylib/wrap::ray :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@BLEND-MODE| :claylib/wrap)
  (export 'claylib/wrap::resume-audio-stream :claylib/wrap)
  (export 'claylib/wrap::+huge-vall+ :claylib/wrap)
  (export 'claylib/wrap::frexpf :claylib/wrap)
  (export 'claylib/wrap::image-format :claylib/wrap)
  (export 'claylib/wrap::draw-line-3d :claylib/wrap)
  (export 'claylib/wrap::significand :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@TEXTURE-WRAP| :claylib/wrap)
  (export 'claylib/wrap::image-from-image :claylib/wrap)
  (export 'claylib/wrap::unload-file-text :claylib/wrap)
  (export 'claylib/wrap::get-pixel-data-size :claylib/wrap)
  (export 'claylib/wrap::init-window :claylib/wrap)
  (export 'claylib/wrap::significandl :claylib/wrap)
  (export 'claylib/wrap::+raygui-icon-max-name-length+ :claylib/wrap)
  (export 'claylib/wrap::erfc :claylib/wrap)
  (export 'claylib/wrap::load-image-palette :claylib/wrap)
  (export 'claylib/wrap::%wide-data :claylib/wrap)
  (export 'claylib/wrap::+%thread-mutex-internal-h+ :claylib/wrap)
  (export 'claylib/wrap::+%ilp32+ :claylib/wrap)
  (export 'claylib/wrap::fabsf :claylib/wrap)
  (export 'claylib/wrap::roundf :claylib/wrap)
  (export 'claylib/wrap::y1l :claylib/wrap)
  (export 'claylib/wrap::c-asin :claylib/wrap)
  (export 'claylib/wrap::meshes :claylib/wrap)
  (export 'claylib/wrap::atoll :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-CONDATTR-T| :claylib/wrap)
  (export 'claylib/wrap::texcoords2 :claylib/wrap)
  (export 'claylib/wrap::gui-toggle-group :claylib/wrap)
  (export 'claylib/wrap::ctermid :claylib/wrap)
  (export 'claylib/wrap::update-sound :claylib/wrap)
  (export 'claylib/wrap::m10 :claylib/wrap)
  (export 'claylib/wrap::matrix-multiply :claylib/wrap)
  (export 'claylib/wrap::getchar :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-pitch :claylib/wrap)
  (export 'claylib/wrap::get-window-position :claylib/wrap)
  (export 'claylib/wrap::+%io-eof-seen+ :claylib/wrap)
  (export 'claylib/wrap::get-touch-y :claylib/wrap)
  (export 'claylib/wrap::vertices :claylib/wrap)
  (export 'claylib/wrap::attach-audio-mixed-processor :claylib/wrap)
  (export 'claylib/wrap::play-audio-stream :claylib/wrap)
  (export 'claylib/wrap::set-master-volume :claylib/wrap)
  (export 'claylib/wrap::c-tanh :claylib/wrap)
  (export 'claylib/wrap::load-model :claylib/wrap)
  (export 'claylib/wrap::get-image-alpha-border :claylib/wrap)
  (export 'claylib/wrap::gui-is-locked :claylib/wrap)
  (export 'claylib/wrap::get-monitor-physical-width :claylib/wrap)
  (export 'claylib/wrap::+%bits-byteswap-h+ :claylib/wrap)
  (export 'claylib/wrap::materials :claylib/wrap)
  (export 'claylib/wrap::set-clipboard-text :claylib/wrap)
  (export 'claylib/wrap::gui-set-state :claylib/wrap)
  (export 'claylib/wrap::frexp :claylib/wrap)
  (export 'claylib/wrap::set-model-mesh-material :claylib/wrap)
  (export 'claylib/wrap::fdim :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@MOUSE-CURSOR| :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle-v :claylib/wrap)
  (export 'claylib/wrap::gui-get-icons :claylib/wrap)
  (export 'claylib/wrap::vector2-normalize :claylib/wrap)
  (export 'claylib/wrap::swap-screen-buffer :claylib/wrap)
  (export 'claylib/wrap::vector2-add :claylib/wrap)
  (export 'claylib/wrap::resume-sound :claylib/wrap)
  (export 'claylib/wrap::remquo :claylib/wrap)
  (export 'claylib/wrap::matrix-perspective :claylib/wrap)
  (export 'claylib/wrap::*signgam* :claylib/wrap)
  (export 'claylib/wrap::sinhf :claylib/wrap)
  (export 'claylib/wrap::open-url :claylib/wrap)
  (export 'claylib/wrap::+wnohang+ :claylib/wrap)
  (export 'claylib/wrap::get-mouse-wheel-move :claylib/wrap)
  (export 'claylib/wrap::truncl :claylib/wrap)
  (export 'claylib/wrap::interpupillary-distance :claylib/wrap)
  (export 'claylib/wrap::c-sin :claylib/wrap)
  (export 'claylib/wrap::draw-circle-sector-lines :claylib/wrap)
  (export 'claylib/wrap::clearerr-unlocked :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-box :claylib/wrap)
  (export 'claylib/wrap::+%bits-atomic-wide-counter-h+ :claylib/wrap)
  (export 'claylib/wrap::+wcontinued+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-rounded :claylib/wrap)
  (export 'claylib/wrap::get-music-time-played :claylib/wrap)
  (export 'claylib/wrap::quot :claylib/wrap)
  (export 'claylib/wrap::draw-model :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@LDIV-T| :claylib/wrap)
  (export 'claylib/wrap::is-file-extension :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder-wires :claylib/wrap)
  (export 'claylib/wrap::u-long :claylib/wrap)
  (export 'claylib/wrap::gui-color-bar-alpha :claylib/wrap)
  (export 'claylib/wrap::n-patch-info :claylib/wrap)
  (export 'claylib/wrap::m14 :claylib/wrap)
  (export 'claylib/wrap::+rl-vector4-type+ :claylib/wrap)
  (export 'claylib/wrap::get-time :claylib/wrap)
  (export 'claylib/wrap::lrand48-r :claylib/wrap)
  (export 'claylib/wrap::y0 :claylib/wrap)
  (export 'claylib/wrap::load-font-data :claylib/wrap)
  (export 'claylib/wrap::y1f :claylib/wrap)
  (export 'claylib/wrap::strtoq :claylib/wrap)
  (export 'claylib/wrap::+stdout+ :claylib/wrap)
  (export 'claylib/wrap::asinhf :claylib/wrap)
  (export 'claylib/wrap::set-texture-wrap :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-down :claylib/wrap)
  (export 'claylib/wrap::is-audio-stream-processed :claylib/wrap)
  (export 'claylib/wrap::log10l :claylib/wrap)
  (export 'claylib/wrap::gen-image-gradient-h :claylib/wrap)
  (export 'claylib/wrap::get-shader-location-attrib :claylib/wrap)
  (export 'claylib/wrap::ilogb :claylib/wrap)
  (export 'claylib/wrap::+m-log2e+ :claylib/wrap)
  (export 'claylib/wrap::m5 :claylib/wrap)
  (export 'claylib/wrap::vector3-distance-sqr :claylib/wrap)
  (export 'claylib/wrap::sinf :claylib/wrap)
  (export 'claylib/wrap::clear-background :claylib/wrap)
  (export 'claylib/wrap::+huge-val+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle-rec :claylib/wrap)
  (export 'claylib/wrap::gui-spinner :claylib/wrap)
  (export 'claylib/wrap::set-sound-volume :claylib/wrap)
  (export 'claylib/wrap::c-atanh :claylib/wrap)
  (export 'claylib/wrap::color-brightness :claylib/wrap)
  (export 'claylib/wrap::draw-line-ex :claylib/wrap)
  (export 'claylib/wrap::get-codepoint-count :claylib/wrap)
  (export 'claylib/wrap::v-resolution :claylib/wrap)
  (export 'claylib/wrap::is-window-resized :claylib/wrap)
  (export 'claylib/wrap::base-size :claylib/wrap)
  (export 'claylib/wrap::nextafterf :claylib/wrap)
  (export 'claylib/wrap::nexttowardl :claylib/wrap)
  (export 'claylib/wrap::get-char-pressed :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-buffer-size-default
          :claylib/wrap)
  (export 'claylib/wrap::unload-directory-files :claylib/wrap)
  (export 'claylib/wrap::is-material-ready :claylib/wrap)
  (export 'claylib/wrap::atan2 :claylib/wrap)
  (export 'claylib/wrap::llrintl :claylib/wrap)
  (export 'claylib/wrap::is-texture-ready :claylib/wrap)
  (export 'claylib/wrap::+%sigset-nwords+ :claylib/wrap)
  (export 'claylib/wrap::text-format :claylib/wrap)
  (export 'claylib/wrap::normalize :claylib/wrap)
  (export 'claylib/wrap::hit :claylib/wrap)
  (export 'claylib/wrap::keyboard-key :claylib/wrap)
  (export 'claylib/wrap::mipmaps :claylib/wrap)
  (export 'claylib/wrap::draw-ray :claylib/wrap)
  (export 'claylib/wrap::+%bits-typesizes-h+ :claylib/wrap)
  (export 'claylib/wrap::bounding-box :claylib/wrap)
  (export 'claylib/wrap::vector2 :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder :claylib/wrap)
  (export 'claylib/wrap::texcoords :claylib/wrap)
  (export 'claylib/wrap::color-to-int :claylib/wrap)
  (export 'claylib/wrap::mkstemps :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-line :claylib/wrap)
  (export 'claylib/wrap::bottom :claylib/wrap)
  (export 'claylib/wrap::vector3-perpendicular :claylib/wrap)
  (export 'claylib/wrap::scale-in :claylib/wrap)
  (export 'claylib/wrap::buffer :claylib/wrap)
  (export 'claylib/wrap::%io-read-base :claylib/wrap)
  (export 'claylib/wrap::gui-get-font :claylib/wrap)
  (export 'claylib/wrap::ilogbl :claylib/wrap)
  (export 'claylib/wrap::fileno-unlocked :claylib/wrap)
  (export 'claylib/wrap::get-application-directory :claylib/wrap)
  (export 'claylib/wrap::unload-audio-stream :claylib/wrap)
  (export 'claylib/wrap::disable-cursor :claylib/wrap)
  (export 'claylib/wrap::strtoll :claylib/wrap)
  (export 'claylib/wrap::atanhf :claylib/wrap)
  (export 'claylib/wrap::+m-pi+ :claylib/wrap)
  (export 'claylib/wrap::vector3-scale :claylib/wrap)
  (export 'claylib/wrap::seed48 :claylib/wrap)
  (export 'claylib/wrap::atanl :claylib/wrap)
  (export 'claylib/wrap::draw-grid :claylib/wrap)
  (export 'claylib/wrap::+raygui-grid-alpha+ :claylib/wrap)
  (export 'claylib/wrap::render-texture-2d :claylib/wrap)
  (export 'claylib/wrap::%io-save-base :claylib/wrap)
  (export 'claylib/wrap::isinfl :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-y :claylib/wrap)
  (export 'claylib/wrap::ushort :claylib/wrap)
  (export 'claylib/wrap::realpath :claylib/wrap)
  (export 'claylib/wrap::+raygui-messagebox-button-height+
          :claylib/wrap)
  (export 'claylib/wrap::gen-texture-mipmaps :claylib/wrap)
  (export 'claylib/wrap::+shader-loc-map-diffuse+ :claylib/wrap)
  (export 'claylib/wrap::frexpl :claylib/wrap)
  (export 'claylib/wrap::ffs :claylib/wrap)
  (export 'claylib/wrap::+%bits-endian-h+ :claylib/wrap)
  (export 'claylib/wrap::+bool+ :claylib/wrap)
  (export 'claylib/wrap::get-window-handle :claylib/wrap)
  (export 'claylib/wrap::h-resolution :claylib/wrap)
  (export 'claylib/wrap::is-key-pressed :claylib/wrap)
  (export 'claylib/wrap::c-atan :claylib/wrap)
  (export 'claylib/wrap::camera-move-right :claylib/wrap)
  (export 'claylib/wrap::+big-endian+ :claylib/wrap)
  (export 'claylib/wrap::load-codepoints :claylib/wrap)
  (export 'claylib/wrap::gui-dummy-rec :claylib/wrap)
  (export 'claylib/wrap::image-mipmaps :claylib/wrap)
  (export 'claylib/wrap::load-wave-from-memory :claylib/wrap)
  (export 'claylib/wrap::camera-move-up :claylib/wrap)
  (export 'claylib/wrap::get-collision-rec :claylib/wrap)
  (export 'claylib/wrap::set-save-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-PROGRESS-BAR-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::timeval :claylib/wrap)
  (export 'claylib/wrap::+raylib-version-minor+ :claylib/wrap)
  (export 'claylib/wrap::vector3-rotate-by-quaternion :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder-wires-ex :claylib/wrap)
  (export 'claylib/wrap::draw-ellipse-lines :claylib/wrap)
  (export 'claylib/wrap::modff :claylib/wrap)
  (export 'claylib/wrap::%markers :claylib/wrap)
  (export 'claylib/wrap::is-file-dropped :claylib/wrap)
  (export 'claylib/wrap::set-shader-value :claylib/wrap)
  (export 'claylib/wrap::+raygui-max-props-extended+ :claylib/wrap)
  (export 'claylib/wrap::draw-line :claylib/wrap)
  (export 'claylib/wrap::vector3-equals :claylib/wrap)
  (export 'claylib/wrap::draw-line-v :claylib/wrap)
  (export 'claylib/wrap::directory-exists :claylib/wrap)
  (export 'claylib/wrap::eye-to-screen-distance :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-DEFAULT-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::vector2-reflect :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-strip :claylib/wrap)
  (export 'claylib/wrap::get-mesh-bounding-box :claylib/wrap)
  (export 'claylib/wrap::set-load-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::a :claylib/wrap)
  (export 'claylib/wrap::exp2f :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle :claylib/wrap)
  (export 'claylib/wrap::get-mouse-y :claylib/wrap)
  (export 'claylib/wrap::fmaf :claylib/wrap)
  (export 'claylib/wrap::+raylib-version+ :claylib/wrap)
  (export 'claylib/wrap::draw-line-bezier-quad :claylib/wrap)
  (export 'claylib/wrap::resume-music-stream :claylib/wrap)
  (export 'claylib/wrap::font-type :claylib/wrap)
  (export 'claylib/wrap::unload-wave-samples :claylib/wrap)
  (export 'claylib/wrap::v-screen-size :claylib/wrap)
  (export 'claylib/wrap::lens-distortion-values :claylib/wrap)
  (export 'claylib/wrap::draw-ellipse :claylib/wrap)
  (export 'claylib/wrap::hypot :claylib/wrap)
  (export 'claylib/wrap::+%io-err-seen+ :claylib/wrap)
  (export 'claylib/wrap::+raygui-icon-max-icons+ :claylib/wrap)
  (export 'claylib/wrap::get-touch-x :claylib/wrap)
  (export 'claylib/wrap::+raygui-tabbar-item-width+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@MOUSE-BUTTON| :claylib/wrap)
  (export 'claylib/wrap::fputs :claylib/wrap)
  (export 'claylib/wrap::yn :claylib/wrap)
  (export 'claylib/wrap::quaternion-scale :claylib/wrap)
  (export 'claylib/wrap::image-flip-horizontal :claylib/wrap)
  (export 'claylib/wrap::is-model-animation-valid :claylib/wrap)
  (export 'claylib/wrap::quaternion-subtract :claylib/wrap)
  (export 'claylib/wrap::get-camera-matrix :claylib/wrap)
  (export 'claylib/wrap::log2 :claylib/wrap)
  (export 'claylib/wrap::+raygui-windowbox-statusbar-height+
          :claylib/wrap)
  (export 'claylib/wrap::gui-set-icon-scale :claylib/wrap)
  (export 'claylib/wrap::get-monitor-width :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-RWLOCK-T| :claylib/wrap)
  (export 'claylib/wrap::is-window-fullscreen :claylib/wrap)
  (export 'claylib/wrap::camera-2d :claylib/wrap)
  (export 'claylib/wrap::|C:@UA@PTHREAD-RWLOCKATTR-T| :claylib/wrap)
  (export 'claylib/wrap::labs :claylib/wrap)
  (export 'claylib/wrap::+camera-cull-distance-near+ :claylib/wrap)
  (export 'claylib/wrap::c-abort :claylib/wrap)
  (export 'claylib/wrap::get-codepoint :claylib/wrap)
  (export 'claylib/wrap::gen-image-checked :claylib/wrap)
  (export 'claylib/wrap::chroma-ab-correction :claylib/wrap)
  (export 'claylib/wrap::tmpnam-r :claylib/wrap)
  (export 'claylib/wrap::get-monitor-refresh-rate :claylib/wrap)
  (export 'claylib/wrap::update-audio-stream :claylib/wrap))

(defun claylib/wrap::initialize-claw-library-claylib/makewrap ()
  (unless (zerop (cffi:foreign-funcall
                   "__claw_claylib_makewrap_loader_029F3B4D4B4751761EE365971C1CE3853"
                   :int))
    (error "Failed to initialize adapater")))

