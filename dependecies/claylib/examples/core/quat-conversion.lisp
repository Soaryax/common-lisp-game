(in-package #:cl-user)
(defpackage claylib/examples/quat-conversion
  (:use :cl :claylib)
  (:export :main))
(in-package #:claylib/examples/quat-conversion)

(defun main ()
  (with-window (:title "raylib [core] example - quat conversions")
    (let ((camera (make-camera-3d 0 10 10
                                  0 0 0
                                  0 1 0))
          (q1 (make-vector4 0 0 0 0))
          (m1 (make-zero-matrix))
          (m2 (make-zero-matrix))
          (m3 (make-zero-matrix))
          (m4 (make-zero-matrix))
          (v1 (make-vector3 0 0 0))
          (v2 (make-vector3 0 0 0))
          (pos1 (make-vector3 -1 0 0))
          (pos2 (make-vector3 1 0 0))
          (pos3 (make-vector3 0 0 0))
          (pos4 (make-vector3 0 0 -1))
          (2pi (coerce (* pi 2) 'single-float))
          (scene (make-scene ()
                             ((model (make-instance 'model
                                                    :scale (make-vector3 1 1 1)
                                                    :tint +red+))
                              (grid (make-grid 10 1.0))
                              (text1 (make-text "" 20 20 :size 20))
                              (text2 (make-text "" 20 40 :size 20))
                              (text3 (make-text "" 20 60 :size 20))
                              (text4 (make-text "" 200 20 :size 20))
                              (text5 (make-text "" 200 40 :size 20))
                              (text6 (make-text "" 200 60 :size 20))))))
      (with-scenes scene ()
        (load-model-from-mesh (gen-mesh-cylinder 0.2 1.0 32)
                              :model (scene-object scene 'model))
        (do-game-loop (:livesupport t)
          (when (< (x v2) 0)
            (incf (x v2) 2pi))
          (when (< (y v2) 0)
            (incf (y v2) 2pi))
          (when (< (z v2) 0)
            (incf (z v2) 2pi))

          (unless (is-key-down-p +key-space+)
            (incf (x v1) 0.01)
            (incf (y v1) 0.03)
            (incf (z v1) 0.05))

          (when (> (x v1) 2pi)
            (decf (x v1) 2pi))
          (when (> (y v1) 2pi)
            (decf (y v1) 2pi))
          (when (> (z v1) 2pi)
            (decf (z v1) 2pi))

          (quaternion-from-euler (x v1) (y v1) (z v1) :quat q1)
          (matrix-rotate-zyx v1 :matrix m1)
          (quaternion-to-matrix q1 :matrix m2)

          (quaternion-from-matrix m1 :quat q1)
          (quaternion-to-matrix q1 :matrix m3)

          (quaternion-to-euler q1 :vec v2)
          (matrix-rotate-zyx v2 :matrix m4)

          (with-drawing ()
            (with-3d-mode camera
              (let ((model (scene-object scene 'model)))
                (set-slot :transform model m1)
                (setf (pos model) pos1)
                (draw-scene scene 'model)
                (set-slot :transform model m2)
                (setf (pos model) pos2)
                (draw-scene scene 'model)
                (set-slot :transform model m3)
                (setf (pos model) pos3)
                (draw-scene scene 'model)
                (set-slot :transform model m4)
                (setf (pos model) pos4)
                (draw-scene scene 'model))
              (draw-scene scene 'grid))
            (let ((text1 (scene-object scene 'text1))
                  (text2 (scene-object scene 'text2))
                  (text3 (scene-object scene 'text3))
                  (text4 (scene-object scene 'text4))
                  (text5 (scene-object scene 'text5))
                  (text6 (scene-object scene 'text6)))
              (setf (text text1) (format nil "~3$" (x v1))
                    (text text2) (format nil "~3$" (y v1))
                    (text text3) (format nil "~3$" (z v1))
                    (text text4) (format nil "~3$" (x v2))
                    (text text5) (format nil "~3$" (y v2))
                    (text text6) (format nil "~3$" (z v2)))
              (if (= (x v1) (x v2))
                  (setf (color text1) +green+
                        (color text4) +green+)
                  (setf (color text1) +black+
                        (color text4) +black+))
              (if (= (y v1) (y v2))
                  (setf (color text2) +green+
                        (color text5) +green+)
                  (setf (color text2) +black+
                        (color text5) +black+))
              (if (= (z v1) (z v2))
                  (setf (color text3) +green+
                        (color text6) +green+)
                  (setf (color text3) +black+
                        (color text6) +black+))
              (draw-scene-regex scene "^TEXT"))))))))
